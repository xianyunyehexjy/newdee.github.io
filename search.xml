<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[多媒体框架Gstreamer]]></title>
    <url>%2Fposts%2F413bb42a%2F</url>
    <content type="text"><![CDATA[GStreamer is a library for constructing graphs of media-handling components. The applications it supports range from simple Ogg/Vorbis playback, audio/video streaming to complex audio (mixing) and video (non-linear editing) processing. Gstreamer是一个轻便的多媒体框架，在TX1上默认并未提供V4L2驱动，需要手动安装，而且这个驱动是基于Gstreamer的。此外，在TX1上支持的H.264和H.265硬解码也是通过Gstreamer的。 基本概念PipelineGstreamer是通过管道和插件实现各种功能或构建各种流媒体应用的。管道的概念在shell中已经很常见了，不过Gstreamer中的管道符号不是|而是!。Gstreamer中将很多元素串联起来，类似管道的命令，将前者输出作为后者输入。如:1gst-launch-1.0 filesrc location=a.mp3 ! decodebin ! audioconvert ! alsasink 其中,每个元素说明如下: filesrc: 从本地磁盘加载了一个文件，使用该元素时你设置了location 属性指向该文件。 decodebin: 使用该元素从filesrc解码。会自动检测文件的类型并在后台构造一些GStreamer元素来解码。 audioconvert: 音频转换元素。 alsasink: 将音频使用ALSA传递给声卡。 Element元素是Gstreamer内置可使用在管道上的命令，Gstreamer通过各种元素完成任务。可以使用gst-inspect-1.0命令来查看可使用的元素。当创建Pipeline时，需要为各个Element设置各种属性。GStreamer将GstElement细分成如下几类： Source Element: 数据源元素。只有输出端，它仅能用来产生供管道消费的数据，而不能对数据做任何处理。一个典型的数据源元素的例子是音频捕获单元，它负责从声卡读取原始的音频数据，然后作为数据源提供给其它模块使用。 Filter Element: 过滤器元素。既有输入端又有输出端，它从输入端获得相应的数据，并在经过特殊处理之后传递给输出端。一个典型的过滤器元素的例子是音频编码单元，它首先从外界获得音频数据，然后根据特定的压缩算法对其进行编码，最后再将编码后的结果提供给其它模块使用。 Sink Element: 接收器元素。只有输入端，它仅具有消费数据的能力，是整条媒体管道的终端。一个典型的接收器元素的例子是音频回放单元，它负责将接收到的数据写到声卡上，通常这也是音频处理过程中的最后一个环节。 Pad一般元素都有输入输出接口，即pad。可将各个元素视作黑盒，则一般元素都有一个输入pad和输出pad，即过滤器元素。输入pad称为sink，输出pad称为src。管道命令模型基本如下:1[src] ! [sink src] ! [sink src] ! [sink] 最左边的元素只有一个src pad用来提供信息（如filesrc）。接下来的几个元素接收信息并做一些处理，因此他们有sink和src pad（例如decodebin和audiocovert），最后一个元素只接收信息（例如alsasink）。使用gst-inspect-1.0命令查看一个元素的详细信息时，就可以看到该元素的pad信息。 注意可能与平时大家认为的概念有些不同的是，src pad是用来发送数据的端点，即数据的 输出端；而sink pad是用来接收数据的端点，即数据的输入端。 一般来说，src pad只能连接到sink pad。但ghost pad两端就要连接相同类型的pad。 Cap每个元素的cap表示该元素可以接收什么样的信息，类似于V4L2中的cap。 BinGstreamer中的bin类似于c中的结构体，是可以存放多个元素的容器。例如管道是a ! b ! c ! d，可以把他们放进mybin，这样当使用mybin时其实是引用了a ! b ! c ! d。 Ghost pad从名字上来看，ghost pad即特殊的pad。 当你创建了一个bin并在里面放置了很多元素时，该bin变成了你自定义的元素，该元素按 顺序调用里面的元素。要做到这样，你的bin很自然地需要它自己的pad，它自己的pad会挂接 到bin里面元素的pad上，这就是 ghost pad 了。当你创建一个bin时，你创建了ghost pad 并告诉他们要去挂接里面哪一个元素。 Gstreamer程序处理可以使用c或Python，Python中需要import gi，c中使用include &lt;gst/gst.h&gt;等头文件。TX1中的Gstreamer头文件可以在/usr/include/gstreamer-1.0目录下找到。 元素处理Elements是具有一定功能的基本单元，主要组成如下: 1234udpsrc: 接受UDP数据(source产生数据)rtph264depay: H264的RTP拆包(filter)。(rtp+h264包)-&gt;(h264包)mpegtsmux: 打ts包(filter)。(h264包)-&gt;(ts包)filesink: 将数据存入文件(sink消耗数据) 在应用程序中创建GstElement对象的方法是借助于工厂对象GstElementFactory。由于GStreamer框架提供了多种类型的GstElement对象，因此对应地提供了多种类型的GstElementFactory对象，它们是通过特定的工厂名称来进行区分的。如: 12GstElementFactory *factory;factory = gst_element_factory_find ("mad"); 该代码通过gst_element_factory_find()函数创建了一个名为mad的工厂对象元素。]]></content>
      <categories>
        <category>TX1入坑</category>
      </categories>
      <tags>
        <tag>TX1</tag>
        <tag>Gstreamer</tag>
        <tag>视频处理</tag>
        <tag>嵌入式开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux的文件IO和多进程]]></title>
    <url>%2Fposts%2F360656f%2F</url>
    <content type="text"><![CDATA[Linux中的用户编程接口（API）遵循了UNIX中的应用编程界面标准——POSIX。这些系统调用编程接口主要是通过C库(libc)实现的。Linux中程序的运行空间主要分为内核空间和用户空间，通常用户能直接访问的是用户空间，内核空间一般通过系统调用才能访问。主要内容均来自于网络，仅作笔记之用，主要记录一下文件IO的一些基本API和多进程编程方式。 文件IO文件IO中的API主要是对文件的读写操作以及属性查询。主要API包括open,read,write,close,lseek,select和属性查询的stat。对于系统内核，所有操作的文件都是通过文件描述符引用的。文件描述符用一个非负整数表示，当程序打开或者创建文件时，内核向进程返回一个文件描述符用于继续操作；当写一个文件时，则是通过将文件描述符作为参数传递给操作文件的API用于继续处理。 在POSIX应用程序中，整数0、1、2应被代换成符号常数：STDIN_FILENO(标准输入，默认是键盘)STDOUT_FILENO(标准输出，默认是屏幕)STDERR_FILENO(标准错误输出，默认是屏幕) 这些常数都定义在头文件中，文件描述符的范围是0～OPEN_MAX。早期的UNIX版本采用的上限值是19（允许每个进程打开20个文件）， 现在很多系统则将其增加至256。可用的文件I\O函数很多，包括：打开文件，读文件，写文件等。大多数Linux文件I\O只需要用到5个函数：open，read，write，lseek以及close。 open功能说明需要包含的头文件: &lt;sys/types.h&gt;, &lt;sys/stat.h&gt;, &lt;fcntl.h&gt;函数原型:1int open(const str * pathname, int oflag, [..., mode_t mode]) 该函数主要用于打开文件，打开成功返回文件描述符，失败返回-1。 参数说明pathname: 文件的全路径名。mode: 对于open函数而言，仅当创建文件时才使用该参数，主要用于文件权限的设置。 oflag: 表示打开的一些方式,主要有O_RDONLY(只读打开)、O_WRONLY(只写打开)、O_RDWR(读写打开)和:O_APPEND: 追加到文件尾O_CREAT: 若文件不存在则创建它。使用此选择项时，需同时说明第三个参数mode，用其说明新文件的访问权限O_EXCL: 如果同时指定O_CREAT，而该文件又是存在的，报错；也可以测试一个文件是否存在，不存在则创建。O_TRUNC: 如果此文件存在，而且为读写或只写成功打开，则将其长度截短为0O_SYNC: 使每次write都等到物理I\O操作完成 例子创建文件: 12345678910111213141516171819#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#define FILE_PATH "./test.txt"int main(void)&#123; int fd; if ((fd = open(FILE_PATH, O_RDWR | O_CREAT | O_EXCL, 0666)) &lt; 0) &#123; printf("open error\n"); exit(-1); &#125; else &#123; printf("open success\n"); &#125; return 0;&#125; read功能说明主要用于读取文件数据。头文件: &lt;unistd.h&gt;函数原型:1ssize_t read(int fd, void * buf, size_t count) 返回实际读到的字节数，读到文件尾返回0，出错返回-1。其中ssize_t是在头文件中用typedef定义的，相当于signed int类型。 参数说明 fd：要读取的文件的描述符buf：得到的数据在内存中的位置的首地址count：期望本次能读取到的最大字节数。size_t是系统头文件中用typedef定义的数据类型，相当于unsigned int write功能说明和read对应，主要用于写入和修改文件。函数原型:1ssize_t write(int fd, const void * buf, size_t count) 返回实际写入的字节数，出错返回-1。 参数说明 fd：要写入文件的文件描述符buf：要写入文件的数据在内存中存放位置的首地址count：期望写入的数据的最大字节数 例子读写文件:read &amp;&amp; write1234567891011121314151617181920#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;int main(void)&#123; char buf[100]; int num = 0; // 获取键盘输入 if ((num = read(STDIN_FILENO, buf, 10)) == -1) &#123; printf ("read error"); error(-1); &#125; else &#123; // 输出到屏幕上 write(STDOUT_FILENO, buf, num); &#125; return 0;&#125; close功能说明主要用于关闭文件，头文件是unistd.h。函数原型:1int close(int filedes) 参数说明输入参数是需要关闭的文件的描述符。 当一个进程终止的时候，它所有的打开文件都是由内核自动关闭。很多程序都使用这一功能而不显式地调用close关闭一个已打开的文件。但是，作为一名优秀的程序员，应该显式的调用close来关闭已不再使用的文件。 lseek功能说明主要用来设置文件内容的读写位置，是用的较多的操作。需要包含头文件unistd.h和sys/types.h 每个打开的文件都有一个“当前文件偏移量”，是一个非负整数，用以度量从文件开始处计算的字节数。通常，读写操作都是从当前文件偏移量处开始，并使偏移量增加所读或写的字节数。默认情况下，你打开一个文件时(open)，除非指定O_APPEND参数，不然位移量被设为0。函数原型:1off_t lseek(int filesdes, off_t offset, int whence) 参数说明返回新的文件位移，出错返回-1。同样off_t是系统头文件定义的数据类型，相当于signed int。 whence是SEEK_SET, 那么该文件的位移量设置为据文件开始处offset个字节whence是SEEK_CUR, 那么该文件的位移量设置为当前值加offset。offset可为正或负whence是SEEK_END, 那么该文件的位移量设置为文件长度加offset。offset可为正或负 例子123456789101112131415161718192021222324252627282930313233#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;int main(int argc, char * argv[])&#123; int fd; char buf[100]; if ((fd = open(argv[1], O_RDONLY)) &lt; 0) &#123; perror("open"); exit(-1); &#125; read(fd, buf, 1); write(STDOUT_FILENO, buf, 1); lseek(fd, 2, SEEK_CUR); read(fd, buf, 1); write(STDOUT_FILENO, buf, 1); lseek(fd, -1, SEEK_END); read(fd, buf, 1); write(STDOUT_FILENO, buf, 1); lseek(fd, 0, SEEK_SET); read(fd, buf, 1); write(STDOUT_FILENO, buf, 1); close(fd); printf("\n"); return 0;&#125; select功能说明用于同时监控多个文件描述符。因为read一次只能监控一个，且在监控过程中处于阻塞状态，无法同时监控多个输入。需要包含头文件sys/select.h。函数原型:1int select(int maxfd, fd_set \* readset, fd_set \* writeset, fd_set \* exceptset, const struct timeval \* timeout) 参数说明返回值：失败返回-1，成功返回readset，writeset，exceptset中所有，有指定变化的文件描述符的数目(若超时返回0) maxfd：要检测的描述符个数， 因此值应为最大描述符+1readset：被监控是否有输入的文件描述符集。不监控时，设为NULLwriteset：被监控是否可以输入的文件描述符集。不监控时，设为NULLexceptset：被监控是否有错误产生的文件描述符集。不监控时，设为NULLtimeval：监控超时时间。设置为NULL表示一直阻塞到有文件描述符被监控到有指定变化。 Tips:readset，writeset，exceptset这三个描述符集指针均是值—结果参数，调用的时候，被监控描述符相应位需要置1；返回时，未就绪的描数字相应位会被清0，而就绪的会被置1。下面的系统定义的宏，和select配套使用FD_ZERO(&amp;rset)：将文件描述符集rset的所有位清0FD_SET(4, &amp;reset)：设置文件描述符集rset的bit 4FD_CLR(fileno(stdin), &amp;rset)：将文件描述符集rset的bit 0清0FD_ISSET(socketfd, &amp;rset)：若文件描述符集rset中的socketfd位置1 例子1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;stdio.h&gt;#include &lt;sys/select.h&gt;#include &lt;fcntl.h&gt;#include &lt;unistd.h&gt;#define MAXNUM 100#define OPEN_DEV "/dev/input/mice"int main(void)&#123; fd_set rfds; struct timeval tv; int retval, fd; char buf[MAXNUM]; fd = open(OPEN_DEV, O_RDONLY); while (1) &#123; FD_ZERO(&amp;rfds); FD_SET(0, &amp;rfds); FD_SET(fd, &amp;rfds); tv.tv_sec = 5; tv.tv_usec = 0; retval = select(fd+1, &amp;rfds, NULL, NULL, &amp;tv); if (retval &lt; 0) printf ("error\n"); if (retval == 0) printf ("No data within 5 seconds\n"); if (retval &gt; 0) &#123; if (FD_ISSET(0, &amp;rfds)) &#123; printf ("Data is available from keyboard now\n"); read(0, buf, MAXNUM); &#125; if (FD_ISSET(fd, &amp;rfds)) &#123; printf ("Data is available from mouse now\n"); read(fd, buf, MAXNUM); &#125; &#125; &#125; return 0;&#125; stat基本用法主要功能是获取文件的属性。需要包含头文件&lt;sys/types.h&gt;，&lt;sys/stat.h&gt;，&lt;unistd.h&gt;。函数原型:1int stat(const char \* path, struct stat \* buf) 参数说明 path：要查看属性的文件或目录的全路径名称。 buf：指向用于存放属性的结构体。stat成功调用后，buf的各个字段将存放各个属性。struct stat是系统头文件中定义的结构体，定义如下： 123456789101112131415struct stat &#123; dev_t st_dev; ino_t st_ino; mode_t st_mode; nlink_t st_nlink; uid_t st_uid; gid_t st_gid; dev_t st_rdev; off_t st_size; blksize_t st_blksize; blkcnt_t st_blocks; time_t st_atime; time_t st_mtime; time_t st_ctime;&#125;; st_ino：节点号st_mode：文件类型和文件访问权限被编码在该字段中st_nlink：硬连接数st_uid：属主的用户IDst_gid：所属组的组IDst_rdev：设备文件的主、次设备号编码在该字段中st_size：文件的大小st_mtime：文件最后被修改时间成功返回0，失败返回-1。 例子123456789101112131415161718192021222324#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/stat.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;int main(int argc, char **argv)&#123; struct stat buf; if(argc != 2) &#123; printf("Usage: stat &lt;pathname&gt;"); exit(-1); &#125; if(stat(argv[1], &amp;buf) != 0) &#123; printf("stat error."); exit(-1); &#125; printf("#i-node: %ld\n", buf.st_ino); printf("#link: %d\n", buf.st_nlink); printf("UID: %d\n", buf.st_uid); printf("GID: %d\n", buf.st_gid); printf("Size %ld\n", buf.st_size); exit(0);&#125; 文件类型的判定struct stat中有个字段为st_mode，可用来获取文件类型和文件访问权限，可以从该字段解码我们需要的文件信息。 st_mode中文件类型宏定义：S_ISREG(): 普通文件S_ISDIR(): 目录文件S_ISCHR(): 字符设备文件S_ISBLK(): 块设备文件S_ISFIFO(): 有名管道文件S_ISLNK(): 软连接(符号链接)文件S_ISSOCK(): 套接字文件 例子123456789101112131415161718192021222324252627282930313233#include &lt;stdlib.h&gt;#include &lt;sys/stat.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;int main(int argc, char **argv)&#123; struct stat buf; char * file_mode; if(argc != 2) &#123; printf("Usage: stat &lt;pathname&gt;\n"); exit(-1); &#125; if(stat(argv[1], &amp;buf) != 0) &#123; printf("stat error.\n"); exit(-1); &#125; if (S_ISREG(buf.st_mode)) file_mode = "-"; else if (S_ISDIR(buf.st_mode)) file_mode = "d"; else if (S_ISCHR(buf.st_mode)) file_mode = "c"; else if(S_ISBLK(buf.st_mode)) file_mode = "b"; printf("#i-node: %ld\n", buf.st_ino); printf("#link: %d\n", buf.st_nlink); printf("UID: %d\n", buf.st_uid); printf("GID: %d\n", buf.st_gid); printf("Size %ld\n", buf.st_size); printf("mode: %s\n", file_mode); exit(0);&#125; 文件权限的判定文件类型与许可设定被一起编码在st_mode字段中，也需要一组由系统提供的宏来完成解码。 S_ISUID: 执行时，设置用户IDS_ISGID: 执行时，设置组IDS_ISVTX: 保存正文S_IRWXU: 拥有者的读、写和执行权限S_IRUSR: 拥有者的读权限S_IWUSR: 拥有者的写权限S_IXUSR: 拥有者的执行权限S_IRWXG: 用户组的读、写和执行权限S_IRGRP: 用户组的读权限S_IWGRP: 用户组的写权限S_IXGRP: 用户组的执行权限S_IRWXO: 其它读、写、执行权限S_IROTH: 其它读权限S_IWOTH: 其它写权限S_IXOTH: 其它执行权限 stat的目录操作打开目录 需要包含的头文件：&lt;sys/types.h&gt;，&lt;dirent.h&gt;函数原型：DIR * opendir(const char * name)功能：opendir()用来打开参数name指定的目录，并返回DIR *形态的目录流返回值：成功返回目录流；失败返回NULL 读取目录函数原型：struct dirent * readdir(DIR * dir)功能：readdir()返回参数dir目录流的下一个子条目(子目录或子文件)返回值： 成功返回结构体指向的指针，错误或已读完目录，返回NULL函数执行成功返回的结构体原型如下：1234567struct dirent &#123; ino_t d_ino; off_t d_off; unsigned short d_reclen; unsigned char d_type; char d_name[256];&#125;; 其中 d_name字段，是存放子条目的名称 关闭目录 函数原型：int closedir(DIR * dir)功能：closedir()关闭dir所指的目录流返回值：成功返回0；失败返回-1，错误原因在errno中例子:123456789101112131415161718192021#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;dirent.h&gt;int main(int argc, char *argv[])&#123; DIR *dp; struct dirent *entp; if (argc != 2) &#123; printf("usage: showdir dirname\n"); exit(0); &#125; if ((dp = opendir(argv[1])) == NULL) &#123; perror("opendir"); exit(-1); &#125; while ((entp = readdir(dp)) != NULL) printf("%s\n", entp-&gt;d_name); closedir(dp); return 0;&#125; 多进程Linux的基本进程状态其实在使用top命令时候也可以看到一些标识,如R/S/D/T/Z/X等。 R (TASK_RUNNING)，可执行状态。只有在该状态的进程才可能在CPU上运行。而同一时刻可能有多个进程处于可执行状态，这些进程的task_struct结构（进程控制块）被放入对应CPU的可执行队列中（一个进程最多只能出现在一个CPU的可执行队列中）。进程调度器的任务就是从各个CPU的可执行队列中分别选择一个进程在该CPU上运行。很多操作系统教科书将正在CPU上执行的进程定义为RUNNING状态、而将可执行但是尚未被调度执行的进程定义为READY状态，这两种状态在linux下统一为 TASK_RUNNING状态。S (TASK_INTERRUPTIBLE)，可中断的睡眠状态。处于这个状态的进程因为等待某某事件的发生（比如等待socket连接、等待信号量），而被挂起。这些进程的task_struct结构被放入对应事件的等待队列中。当这些事件发生时（由外部中断触发、或由其他进程触发），对应的等待队列中的一个或多个进程将被唤醒。通过ps命令我们会看到，一般情况下，进程列表中的绝大多数进程都处于TASK_INTERRUPTIBLE状态（除非机器的负载很高）。毕竟CPU就这么一两个，进程动辄几十上百个，如果不是绝大多数进程都在睡眠，CPU又怎么响应得过来。D (TASK_UNINTERRUPTIBLE)，不可中断的睡眠状态。与TASK_INTERRUPTIBLE状态类似，进程处于睡眠状态，但是此刻进程是不可中断的。不可中断，指的并不是CPU不响应外部硬件的中断，而是指进程不响应异步信号。绝大多数情况下，进程处在睡眠状态时，总是应该能够响应异步信号的。否则你将惊奇的发现，kill -9竟然杀不死一个正在睡眠的进程了！于是我们也很好理解，为什么ps命令看到的进程几乎不会出现TASK_UNINTERRUPTIBLE状态，而总是TASK_INTERRUPTIBLEi状态。而TASK_UNINTERRUPTIBLE状态存在的意义就在于，内核的某些处理流程是不能被打断的。如果响应异步信号，程序的执行流程中就会被插入一段用于处理异步信号的流程（这个插入的流程可能只存在于内核态，也可能延伸到用户态），于是原有的流程就被中断了。（参见《linux内核异步中断浅析》）在进程对某些硬件进行操作时（比如进程调用read系统调用对某个设备文件进行读操作，而read系统调用最终执行到对应设备驱动的代码，并与对应的物理设备进行交互），可能需要使用TASK_UNINTERRUPTIBLE状态对进程进行保护，以避免进程与设备交互的过程被打断，造成设备陷入不可控的状态。这种情况下的TASK_UNINTERRUPTIBLE状态总是非常短暂的，通过ps命令基本上不可能捕捉到。linux系统中也存在容易捕捉的TASK_UNINTERRUPTIBLE状态。执行vfork系统调用后，父进程将进入TASK_UNINTERRUPTIBLE状态，直到子进程调用exit或exec（参见《神奇的vfork》）。通过下面的代码就能得到处于TASK_UNINTERRUPTIBLE状态的进程： 1234ps -ax | grep a\.out4371 pts/0 D+ 0:00 ./a.out4372 pts/0 S+ 0:00 ./a.out4374 pts/1 S+ 0:00 grep a.out 然后我们可以试验一下TASK_UNINTERRUPTIBLE状态的威力。不管kill还是kill -9，这个TASK_UNINTERRUPTIBLE状态的父进程依然屹立不倒。T (TASK_STOPPED or TASK_TRACED)，暂停状态或跟踪状态。向进程发送一个SIGSTOP信号，它就会因响应该信号而进入TASK_STOPPED状态（除非该进程本身处于TASK_UNINTERRUPTIBLE状态而不响应信号）。（SIGSTOP与SIGKILL信号一样，是非常强制的。不允许用户进程通过signal系列的系统调用重新设置对应的信号处理函数。）向进程发送一个SIGCONT信号，可以让其从TASK_STOPPED状态恢复到TASK_RUNNING状态。当进程正在被跟踪时，它处于TASK_TRACED这个特殊的状态。“正在被跟踪”指的是进程暂停下来，等待跟踪它的进程对它进行操作。比如在gdb中对被跟踪的进程下一个断点，进程在断点处停下来的时候就处于TASK_TRACED状态。而在其他时候，被跟踪的进程还是处于前面提到的那些状态。对于进程本身来说，TASK_STOPPED和TASK_TRACED状态很类似，都是表示进程暂停下来。而TASK_TRACED状态相当于在TASK_STOPPED之上多了一层保护，处于TASK_TRACED状态的进程不能响应SIGCONT信号而被唤醒。只能等到调试进程通过ptrace系统调用执行PTRACE_CONT、PTRACE_DETACH等操作（通过ptrace系统调用的参数指定操作），或调试进程退出，被调试的进程才能恢复TASK_RUNNING状态。Z (TASK_DEAD – EXIT_ZOMBIE)，退出状态，进程成为僵尸进程。 进程在退出的过程中，处于TASK_DEAD状态。 在这个退出过程中，进程占有的所有资源将被回收，除了task_struct结构（以及少数资源）以外。于是进程就只剩下task_struct这么个空壳，故称为僵尸。 之所以保留task_struct，是因为task_struct里面保存了进程的退出码、以及一些统计信息。而其父进程很可能会关心这些信息。比如在shell中，$?变量就保存了最后一个退出的前台进程的退出码，而这个退出码往往被作为if语句的判断条件。 当然，内核也可以将这些信息保存在别的地方，而将task_struct结构释放掉，以节省一些空间。但是使用task_struct结构更为方便，因为在内核中已经建立了从pid到task_struct查找关系，还有进程间的父子关系。释放掉task_struct，则需要建立一些新的数据结构，以便让父进程找到它的子进程的退出信息。父进程可以通过wait系列的系统调用（如wait4、waitid）来等待某个或某些子进程的退出，并获取它的退出信息。然后wait系列的系统调用会顺便将子进程的尸体（task_struct）也释放掉。子进程在退出的过程中，内核会给其父进程发送一个信号，通知父进程来“收尸”。这个信号默认是SIGCHLD，但是在通过clone系统调用创建子进程时，可以设置这个信号。 1234ps -ax | grep a\.out10410 pts/0 S+ 0:00 ./a.out10411 pts/0 Z+ 0:00 [a.out]0413 pts/1 S+ 0:00 grep a.out 只要父进程不退出，这个僵尸状态的子进程就一直存在。那么如果父进程退出了呢，谁又来给子进程“收尸”？当进程退出的时候，会将它的所有子进程都托管给别的进程（使之成为别的进程的子进程）。托管给谁呢？可能是退出进程所在进程组的下一个进程（如果存在的话），或者是1号进程。所以每个进程、每时每刻都有父进程存在。除非它是1号进程。1号进程，pid为1的进程，又称init进程。linux系统启动后，第一个被创建的用户态进程就是init进程。它有两项使命：1、执行系统初始化脚本，创建一系列的进程（它们都是init进程的子孙）；2、在一个死循环中等待其子进程的退出事件，并调用waitid系统调用来完成“收尸”工作；init进程不会被暂停、也不会被杀死（这是由内核来保证的）。它在等待子进程退出的过程中处于TASK_INTERRUPTIBLE状态，“收尸”过程中则处于TASK_RUNNING状态。X (TASK_DEAD – EXIT_DEAD)，退出状态，进程即将被销毁。而进程在退出过程中也可能不会保留它的task_struct。比如这个进程是多线程程序中被detach过的进程（进程、线程参见《linux线程浅析》）。或者父进程通过设置SIGCHLD信号的handler为SIG_IGN，显式的忽略了SIGCHLD信号。（这是posix的规定，尽管子进程的退出信号可以被设置为SIGCHLD以外的其他信号。）此时，进程将被置于EXIT_DEAD退出状态，这意味着接下来的代码立即就会将该进程彻底释放。所以EXIT_DEAD状态是非常短暂的，几乎不可能通过ps命令捕捉到。 获取进程标识号主要有两个函数:getpid和getppid。前者是获取进程号，后者是获取父进程号。需要包含的头文件：&lt;sys/types.h&gt;, &lt;unistd.h&gt; 函数原型：pid_t getpid(void)功能：获取当前进程ID返回值：调用进程的进程ID函数原型：pid_t getppid(void)功能：获取父进程ID返回值：调用进程的父进程ID例子:1234567891011121314#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;int main(void)&#123; pid_t pid = getpid(); pid_t ppid = getppid(); printf ("pid = %d\n", pid); printf ("ppid = %d\n", ppid); return 0;&#125; Linux下C进程内存布局C进程内存布局说明text：代码段。存放的是程序的全部代码（指令），来源于二进制可执行文件中的代码部分initialized data（简称data段）和uninitialized data（简称bss段）组成了数据段。 其中data段存放的是已初始化全局变量和已初始化static局部变量，来源于二进制可执行文件中的数据部分；bss段存放的是未初始化全局变量和未初始化static局部变量，其内容不来源于二进制可执行文件中的数据部分（也就是说：二进制可执行文件中的数据部分没有未初始化全局变量和未初始化static局部变量）。根据C语言标准规定，他们的初始值必须为0，因此bss段存放的是全0。将bss段清0的工作是由系统在加载二进制文件后，开始执行程序前完成的，系统执行这个清0操作是由内核的一段代码完成的，这段代码就是即将介绍的exec系统调用。至于exec从内存什么地方开始清0以及要清0多少空间，则是由记录在二进制可执行文件中的信息决定的（即：二进制文件中记录了text、data、bss段的大小）malloc是从heap（堆）中分配空间的stack（栈）存放的是动态局部变量。当子函数被调用时，系统会从栈中分配空间给该子函数的动态局部变量（注意：此时栈向内存低地址延伸）；当子函数返回时，系统的栈会向内存高地址延伸，这相当于释放子函数的动态局部变量的内存空间。我们假设一下，main函数在调用子函数A后立即调用子函数B，那么子函数B的动态局部变量会覆盖原来子函数A的动态局部变量的存储空间，这就是子函数不能互相访问对方动态局部变量的根本物理原因。内存的最高端存放的是命令行参数和环境变量，将命令行参数和环境变量放到指定位置这个操作是由OS的一段代码（exec系统调用）在加载二进制文件到内存后，开始运行程序前完成的。Linux下C进程内存布局可以由下面的程序的运行结果来获得验证：1234567891011121314151617181920212223#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int global_init_val = 100;int global_noninit_val;extern char **environ;int main(int argc, char *argv[], char *envp[])&#123; static int localstaticval = 10; char *localval; localval = malloc(10); printf("address of text is : %p\n", main); printf("address of data is : %p, %p\n", &amp;global_init_val, &amp;localstaticval); printf("address of bss is : %p\n", &amp;global_noninit_val); printf("address of heap is : %p\n", localval); printf("address of stack is : %p\n", &amp;localval); free(localval); printf("&amp;environ = %p, environ = %p\n", &amp;envp, envp); printf("&amp;argv = %p, argv = %p\n", &amp;argv, argv); return 0; &#125; 运行结果，如下：12345671 address of text is : 0x80484542 address of data is : 0x804a01c, 0x804a0203 address of bss is : 0x804a02c4 address of heap is : 0x96e10085 address of stack is : 0xbffca8bc6 &amp;environ = 0xbffca8d8, environ = 0xbffca97c7 &amp;argv = 0xbffca8d4, argv = 0xbffca974 运行结果的第1（2、3、4、5、6、7）行是由程序的第13（14、15、16、17、20、21）行打印的。由运行结果的第1、2、3、4行可知，存放的是程序代码的text段位于进程地址空间的最低端；往上是存放已初始化全局变量和已初始化static局部变量的data段；往上是存放未初始化全局变量的bss段；往上是堆区（heap）。由运行结果的第7、6、5行可知，命令行参数和环境变量存放在进程地址空间的最高端；往下是存放动态局部变量的栈区（stack）。 环境变量的获取与设置坏境变量在内存中通常是一字符串环境变量名=环境变量值的形式存放。我们的程序可能会调用Linux系统的环境变量，甚至修改环境变量，所以，Linux向我们提供了这种API。需要包含头文件&lt;stdlib.h&gt;。函数原型：char * getenv(const char * name)返回字符指针，该指针指向变量名为name的环境变量的值字符串。int putenv(const char * str)将“环境变量=环境变量值”形式的字符创增加到环境变量列表中；如果该环境变量已存在，则更新已有的值。int setenv(const char * name, const char * value, int rewrite)设置名字为name的环境变量的值为value；如果该环境变量已存在，且rewrite不为0，用新值替换旧值；rewrite为0，就不做任何事。例子:123456789101112131415161718192021222324#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;int main(int argc, char *argv[], char *envp[])&#123; char **ptr; for (ptr = envp; *ptr != 0; ptr++) /* and all env strings */ printf ("%s\n", *ptr); printf ("\n\n--------My environment variable-------\n\n"); printf ("USERNAME is %s\n", getenv("USERNAME")); putenv ("USERNAME=shiyanlou"); printf ("USERNAME is %s\n", getenv("USERNAME")); setenv ("USERNAME", "shiyanlou-2", 0); printf ("USERNAME is %s\n", getenv("USERNAME")); setenv ("USERNAME", "shiyanlou-2", 1); printf ("USERNAME is %s\n", getenv("USERNAME")); return 0;&#125; fork进程控制fork被称为进程控制天字第1号系统调用，可以看出其使用广泛性。 fork的机制与特性12345678910111213#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;stdlib.h&gt;int main(void)&#123; pid_t pid; if ((pid = fork()) == 0) &#123; getchar(); exit(0); &#125; getchar();&#125; 父进程调用fork将会产生一个子进程。此时会有2个问题： 子进程的代码从哪里来？ 子进程首次被OS调度时，执行的第1条代码是哪条代码？ 子进程的代码是父进程代码的一个完全相同拷贝。事实上不仅仅是text段，子进程的全部进程空间（包括：text/data/bss/heap/stack/command line/environment variables）都是父进程空间的一个完全拷贝。下一个问题是：谁为子进程分配了内存空间？谁拷贝了父进程空间的内容到子进程的内存空间？fork当仁不让！事实上，查看fork实现的源代码，由4部分工作组成：首先，为子进程分配内存空间；然后，将父进程空间的全部内容拷贝到分配给子进程的内存空间；然后在内核数据结构中创建并正确初始化子进程的PCB（包括2个重要信息：子进程pid，PC的值=善后代码的第1条指令地址）；最后是一段善后代码。由于子进程的PCB已经产生，所以子进程已经出生，因此子进程就可以被OS调度到来运行。子进程首次被OS调度时，执行的第1条代码在fork内部，不过从应用程序的角度来看，子进程首次被OS调度时，执行的第1条代码是从fork返回。这就导致了fork被调用1次，却返回2次：父、子进程中各返回1次。对于应用程序员而言，最重要的是fork的2次返回值不一样，父进程返回值是子进程的pid，子进程的返回值是0。至于子进程产生后，父、子进程谁先运行，取决于OS调度策略，应用程序员无法控制。以上分析了fork的内部实现以及对应用程序的影响。如果应用程序员觉得难以理解的话，可以暂时抛开，只要记住3个结论即可：fork函数被调用1次（在父进程中被调用），但返回2次（父、子进程中各返回一次）。两次返回的区别是子进程的返回值是0，而父进程的返回值则是子进程的进程ID。父、子进程完全一样（代码、数据），子进程从fork内部开始执行；父、子进程从fork返回后，接着执行下一条语句。一般来说，在fork之后是父进程先执行还是子进程先执行是不确定的，应用程序员无法控制。 fork实例分析12345678910111213141516171819202122232425262728293031323334353637#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/types.h&gt;#define err_sys(info) \ &#123; \ printf ("%s\n", info);\ exit(0); \ &#125;int glob = 6; /* external variable in initialized data */char buf[ ] = "a write to stdout\n";int main(void)&#123; int var; /* automatic variable on the stack */ pid_t pid; var = 88; if ((write(STDOUT_FILENO, buf, sizeof(buf)-1) != sizeof(buf)-1)) err_sys("write error"); printf("before fork\n"); /* we don't flush stdout */ if ( (pid = fork()) &lt; 0) &#123; err_sys("fork error"); &#125; else if (pid == 0) &#123; /* child */ glob++; /* modify variables */ var++; &#125; else &#123; sleep(2); /* parent */ &#125; printf("pid = %d, ppid = %d, glob = %d, var = %d\n", getpid(),getppid(), glob, var); exit(0); &#125; 运行结果:1234a write to stdoutbefore forkpid = 9009, ppid = 9008, glob = 7, var = 89pid = 9008, ppid = 8979, glob = 6, var = 88 运行结果分析：结果的第1行是由父进程的21行打印；结果的第2行是由父进程的24行打印；由于父进程在24行睡眠了2秒，因此fork返回后，子进程先于父进程运行是大概率事件，所以子进程运行到25行打印出结果中的第3行。由于子进程会拷贝父进程的整个进程空间（这其中包括数据），因此当子进程26行从fork返回后，子进程中的glob=6，var=88（拷贝自父进程的数据）。此时子进程中pid=0，因此子进程会执行29、30行，当子进程到达35行时，将打印glob=7，var=89。虽然，子进程改变了glob和var的值，但它仅仅是改变了子进程中的glob和var，而影响不了父进程中的glob和var。在子进程出生后，父、子进程的进程空间（代码、数据等）就是独立，互不干扰的。因此当父进程运行到35行，将会打印父进程中的glob和var的值，他们分别是6和88，这就是运行结果的第4行。 exec进程控制与fork相对应，exec被成为进程控制的地字一号系统调用。 文件描述符详解文件描述符本质是数组下表，如下图所示: 右侧的表称为i节点表，在整个系统中只有1张。该表可以视为结构体数组，该数组的一个元素对应于一个物理文件。中间的表称为文件表，在整个系统中只有1张。该表可以视为结构体数组，一个结构体中有很多字段，其中有3个字段比较重要： file status flags：用于记录文件被打开来读的，还是写的。其实记录的就是open调用中用户指定的第2个参数current file offset：用于记录文件的当前读写位置（指针）。正是由于此字段的存在，使得一个文件被打开并读取后，下一次读取将从上一次读取的字符后开始读取v-node ptr：该字段是指针，指向右侧表的一个元素，从而关联了物理文件。左侧的表称为文件描述符表，每个进程有且仅有1张。该表可以视为指针数组，数组的元素指向文件表的一个元素。最重要的是：数组元素的下标就是大名鼎鼎的文件描述符。open系统调用执行的操作：新建一个i节点表元素，让其对应打开的物理文件（如果对应于该物理文件的i节点元素已经建立，就不做任何操作）；新建一个文件表的元素，根据open的第2个参数设置file status flags字段，将current file offset字段置0，将v-node ptr指向刚建立的i节点表元素；在文件描述符表中，寻找1个尚未使用的元素，在该元素中填入一个指针值，让其指向刚建立的文件表元素。最重要的是：将该元素的下标作为open的返回值返回。这样一来，当调用read（write）时，根据传入的文件描述符，OS就可以找到对应的文件描述符表元素，进而找到文件表的元素，进而找到i节点表元素，从而完成对物理文件的读写。 fork对文件描述符的影响fork会导致子进程继承父进程打开的文件描述符，其本质是将父进程的整个文件描述符表复制一份，放到子进程的PCB中。因此父、子进程中相同文件描述符（文件描述符为整数）指向的是同一个文件表元素，所以父（子）进程读取文件后，子（父）进程将读取同一文件的后续内容。 12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;fcntl.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/types.h&gt;int main(void)&#123; int fd, pid, status; char buf[10]; if ((fd = open("./test.txt", O_RDONLY)) &lt; 0) &#123; perror("open"); exit(-1); &#125; if ((pid = fork()) &lt; 0) &#123; perror("fork"); exit(-1); &#125; else if (pid == 0) &#123; //child read(fd, buf, 2); write(STDOUT_FILENO, buf, 2); &#125; else &#123; //parent sleep(2); lseek(fd, 1, SEEK_CUR); read(fd, buf, 3); write(STDOUT_FILENO, buf, 3); write(STDOUT_FILENO, "\n", 1); &#125; return 0;&#125; 假设，./test.txt的内容是abcdefg。那么子进程的18行将读到字符ab；由于，父、子进程的文件描述符fd都指向同一个文件表元素，因此当父进程执行23行时，fd对应的文件的读写指针将移动到字符d，而不是字符b，从而24行读到的是字符def，而不是字符bcd。程序运行的最终结果是打印abdef，而不是abbcd。相对应的，如果是两个进程独立调用open去打开同一个物理文件，就会有2个文件表元素被创建，并且他们都指向同一个i节点表元素。两个文件表元素都有自己独立的current file offset字段，这将导致2个进程独立的对同一个物理文件进行读写，因此第1个进程读取到文件的第1个字符后，第2个进程再去读取该文件时，仍然是读到的是文件的第1个字符，而不是第1个字符的后续字符。对应用程序员而言，最重要结论是：如果子进程不打算使用父进程打开的文件，那么应该在fork返回后立即调用close关闭该文件。 wait同步wait作用在forkbase.c中，fork出子进程后，为了保证子进程先于父进程运行，在父进程中使用了sleep（2）的方式让父进程睡眠2秒。但实际上这样做，并不能100%保证子进程先于父进程运行，因为在负荷非常重的系统中，有可能在父进程睡眠2秒期间，OS并没有调度到子进程运行，并且当父进程睡醒后，首先调度到父进程运行。系统调用wait可以100%保证父、子进程完全按程序员的安排来进行同步。需要包含的头文件： wait.h函数原型：pid_t wait(int * status)功能：等待进程结束。返回值：若成功则为子进程ID号，若出错则为-1。参数说明： status：用于存放进程结束状态。wait函数用于使父进程阻塞，直到一个子进程结束。父进程调用wait，该父进程可能会: 阻塞(如果其所有子进程都还在运行)。带子进程的终止状态立即返回(如果一个子进程已终止，正等待父进程存取其终止状态)。出错立即返回(如果它没有任何子进程)。 wait调用 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;#include &lt;wait.h&gt;void pr_exit(intstatus);int main(void)&#123; pid_t pid; int status; if ( (pid = fork()) &lt; 0) &#123; perror("fork");exit(-1); &#125; else if (pid == 0) &#123; /* child */ sleep(1); printf("inchild\n"); exit(101); &#125; if (wait(&amp;status) != pid) /* wait for child */ &#123; perror("wait");exit(-2); &#125; printf("in parent\n"); pr_exit(status); /* and print itsstatus */ if ( (pid = fork()) &lt; 0) &#123; perror("fork");exit(-1); &#125; else if (pid == 0) /*child */ abort(); /* generates SIGABRT */ if (wait(&amp;status) != pid) /* wait for child */ &#123; perror("wait");exit(-2); &#125; pr_exit(status); /* and printits status */ if ( (pid = fork()) &lt; 0) &#123; perror("fork");exit(-1); &#125; else if (pid == 0) /*child */ status /= 0; /* divide by 0 generates SIGFPE */ if (wait(&amp;status) != pid) /* wait for child */ &#123; perror("wait");exit(-1); &#125; pr_exit(status); /* and printits status */ exit(0); &#125; void pr_exit(int status) &#123; if (WIFEXITED(status)) printf("normallytermination, low-order 8 bit of exit status = %d\n", WEXITSTATUS(status)); else if(WIFSIGNALED(status)) printf("abnormallytermination, singal number = %d\n", WTERMSIG(status)); &#125; 其中，11行创建了一个子进程，13行根据fork的返回值区分父、子进程。 我们先看父进程，父进程从18行运行，这里调用了wait函数等待子进程结束，并将子进程结束的状态保存在status中。这时，父进程就阻塞在wait这里了，这样就保证了子进程先运行。子进程从13行开始运行，然后sleep 1秒，打印出“in child”后，调用exit函数退出进程。这里exit中有个参数101，表示退出的值是101。.子进程退出后，父进程wait到了子进程的状态，并把状态保存到了status中。后面的pr_exit函数是用来对进程的退出状态进行打印。接下来，父进程又创建一个子进程，然后又一次调用wait函数等待子进程结束，父进程这时候阻塞在了wait这里。子进程开始执行，子进程里面只有一句话：abort（），abort会结束子进程并发送一个SIGABORT信号，唤醒父进程。所以父进程会接受到一个SIGABRT信号，并将子进程的退出状态保存到status中。然后调用pr_exit函数打印出子进程结束的状态。然后父进程再次创建了一个子进程，依然用wait函数等待子进程结束并获取子进程退出时的状态。子进程里面就一句status/= 0，这里用0做了除数，所以子进程会终止，并发送一个SIGFPE信号，这个信号是用来表示浮点运算异常，比如运算溢出，除数不能为0等。这时候父进程wait函数会捕捉到子进程的退出状态，然后调用pr_exit处理。 pr_exit函数将status状态传入，然后判断该状态是不是正常退出，如果是正常退出会打印出退出值；不是正常退出会打印出退出时的异常信号。这里用到了几个宏，简单解释如下： WIFEXITED： 这个宏是用来判断子进程的返回状态是不是为正常，如果是正常退出，这个宏返回真。WEXITSTATUS： 用来返回子进程正常退出的状态值。WIFSIGNALED： 用来判断子进程的退出状态是否是非正常退出，若非正常退出时发送信号，则该宏返回真。WTERMSIG： 用来返回非正常退出状态的信号number。所以这段代码的结果是分别打印出了三个子进程的退出状态和异常结束的信号编号 exec详解当一个程序调用fork产生子进程，通常是为了让子进程去完成不同于父进程的某项任务，因此含有fork的程序，通常的编程模板如下：12345if ((pid = fork()) == 0) &#123; dosomething in child process; exit(0);&#125;do something in parent process; 这样的编程模板使得父、子进程各自执行同一个二进制文件中的不同代码段，完成不同的任务。这样的编程模板在大多数情况下都能胜任，但仔细观察这种编程模板，你会发现它要求程序员在编写源代码的时候，就要预先知道子进程要完成的任务是什么。这本不是什么过分的要求，但在某些情况下，这样的前提要求却得不到满足，最典型的例子就是Linux的基础应用程序 —— shell。你想一想，在编写shell的源代码期间，程序员是不可能知道当shell运行时，用户输入的命令是ls还是cp，难道你要在shell的源代码中使用if–elseif–else if–else if ……结构，并拷贝 ls、cp等等外部命令的源代码到shell源代码中吗？退一万步讲，即使这种弱智的处理方式被接受的话，你仍然会遇到无法解决的难题。想一想，如果用户自己编写了一个源程序，并将其编译为二进制程序test，然后再在shell命令提示符下输入./test，对于采用前述弱智方法编写的shell，它将情何以堪？因此需要exec予以协作。 exec机制在用fork函数创建子进程后，子进程往往要调用exec函数以执行另一个程序。当子进程调用exec函数时，会将一个二进制可执行程序的全路径名作为参数传给exec，exec会用新程序代换子进程原来全部进程空间的内容，而新程序则从其main函数开始执行，这样子进程要完成的任务就变成了新程序要完成的任务了。因为调用exec并不创建新进程，所以前后的进程ID并未改变。exec只是用另一个新程序替换了当前进程的正文、数据、堆和栈段。进程还是那个进程，但实质内容已经完全改变。呵呵，这是不是和中国A股的借壳上市有异曲同工之妙？顺便说一下，新程序的bss段清0这个操作，以及命令行参数和环境变量的指定，也是由exec完成的。 exec用法函数原型：int execle(const char * pathname,const char * arg0, ... (char *)0, char * const envp [] )返回值：exec执行失败返回-1，成功将永不返回（想想为什么？）。哎，牛人就是有脾气，天字1号是调用1次，返回2次；地字1号，干脆就不返回了，你能奈我何？参数：pathname：新程序的二进制文件的全路径名arg0：新程序的第1个命令行参数argv[0]，之后是新程序的第2、3、4……个命令行参数，以(char*)0表示命令行参数的结束envp：新程序的环境变量 12345678910111213#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;int main(int argc, char*argv[])&#123; int i; char **ptr; extern char **environ; for (i = 0; i &lt; argc; i++) /* echo all command-line args */ printf("argv[%d]:%s\n", i, argv[i]); for (ptr = environ; *ptr != 0;ptr++) /* and all env strings */ printf("%s\n",*ptr);&#125; 将此程序进行编译，生成二进制文件命名为echoall，放在当前目录下。很容易看出，此程序运行将打印进程的所有命令行参数和环境变量。运行结果分析： 1-5行是第1个子进程14行运行新程序echoall的结果，其中：1-3行打印的是命令行参数；4、5行打印的是环境变量。6行之后是第2个子进程23行运行新程序echoall的结果，其中：6、7行打印的是命令行参数；8行之后打印的是环境变量。之所以第2个子进程的环境变量那么多，是因为程序23行调用execlp时，没有给出环境变量参数，因此子进程就会继承父进程的全部环境变量。 进程的消亡gdb调试多进程技巧对多进程程序进行调试，存在一个较大的难题，那就是当程序调用fork产生子进程后，gdb跟踪的是父进程，无法进入到子进程里去单步调试子进程。这样一来，如果子进程中的代码运行出错的话，将无法进行调试。因此想调试子进程的话，需要一点技巧： 在子进程的入口处加入sleep(20)函数，以使子进程在被创建后能暂时停止。用ps查看子进程的pid，假定pid为222，则输入命令：gdb程序名称222。从而再运行一个调试程序，使得gdb attach到子进程。用gdb的break命令在子进程中设定断点。用gdb的continue，恢复子进程的运行。等待sleep的睡眠时间到达，从而子进程将在断点处停下来。 启动例程与main函数从程序员的角度看，C应用程序从main函数开始运行。但事实上，当C应用程序被内核通过exec启动时，一个启动例程会先于main函数运行，它会为main函数的运行准备好环境后，调用main函数。而main函数正常结束后return语句将使得main函数返回到启动例程，启动例程在完成必要的善后处理后将最终调用_exit结束进程。有5种方式结束进程： 正常结束：1.从main函数返回2.调用exit3.调用_exit 非正常结束：4.调用abort5.被信号中止 exit函数与_exit函数需要包含的头文件：&lt;stdlib.h&gt;、&lt;unistd.h&gt;函数原型： void exit(int status)、 void _exit(int status)这两个函数的功能都是使进程正常结束。_exit：立即返回内核，它是一个系统调用exit：在返回内核前会执行一些清理操作，这些清理操作包括调用exit handler，以及彻底关闭标准I/O流(这回使得I/O流的buffer中的数据被刷新，即被提交给内核)，它是标准C库中的一个函数。 I/O流和I/O库缓存关于IO流的buffer:12345678910#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;int main(void)&#123; printf("hello"); //printf("hello\n"); //write(1, "hello", 5); sleep(100); return 0; &#125; 其结果没有任何输出。 当应用程序调用printf时，将字符串”hello”提交给了标准I/O库的I/O库缓存。I/O库缓存大致可以认为是printf实现中定义的全局字符数组，因此它位于用户空间，可见”hello”并没有被提交给内核(所以也不可能出现内核将”hello”打印到屏幕的操作)，所以没有打印出任何东西。只有当某些条件满足时，标准I/O库才会刷新I/O库缓存，这些条件包括： 用户空间的I/O库缓存已被填满I/O库缓存遇到了换行符(‘\n’)，并且输出目标是行缓冲设备(屏幕就是这种设备)。因此将上面的代码第6行注释掉，并取消第7行的注释，就可以看到打印出了helloI/O流被关闭，上节中的exit函数就会关闭I/O流Tips:当标准I/O库缓存时，会调用以前的我们学过的系统调用，例如：write，将I/O库缓存中的内容提交给内核。so，上述代码也可以这样：第6行注释，第7行注释，第8行取消注释。也可以在屏幕上看见”hello” Exit handlerExit handler 是程序员编写的函数，进程正常结束时，它们会被系统调回。这使程序员具备了在进程正常结束时，控制进程执行某些善后操作的能力。使用Exit handler，需要程序员完成两件事情：编写Exit handler函数；调用atexit或on_exit向系统注册Exit handler(即告知系统需要回调的Exit handler函数是谁)需要包含头的文件：函数原型：12int atexit(void (* func)(void))int on_exit(void (* func)(int, void *),) 功能：atexit注册的函数func没有参数；on_exit注册的函数func有一个int型参数，系统调用回调func时将向该参数传入进程的退出值，func的另一个void *类型参数将会是arg。ANSI C中，进程最多可以注册32个Exit handler函数，这些函数按照注册时的顺序被逆序调用。123456789101112131415161718192021222324252627282930313233343536373839#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;static void my_exit0(int, void *);static void my_exit1(void);static void my_exit2(void);char str[9]="for test";int main(void) &#123; //char str[9]="for test"; if (atexit(my_exit2) != 0) &#123; perror("can't register my_exit2"); exit(-1); &#125; if (atexit(my_exit1) != 0) &#123; perror("can't register my_exit1"); exit(-1); &#125; if (on_exit(my_exit0,(void *)str) !=0) &#123; perror("can't register my_exit0"); exit(-1); &#125; printf("main is done\n"); printf("abc"); //_exit(1234); exit(1234);&#125;static void my_exit0(int status, void *arg) &#123; printf("zero exit handler\n"); printf("exit %d\n", status); printf("arg=%s\n",(char *)arg);&#125;static void my_exit1(void) &#123; printf("first exit handler\n");&#125;static void my_exit2(void) &#123; printf("second exit handler\n");&#125; 进程中止处理函数执行顺序按照设置顺序的相反顺序执行。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>文件IO</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网易18校招题]]></title>
    <url>%2Fposts%2Fad27c4df%2F</url>
    <content type="text"><![CDATA[没怎么找工作，因为各种原因也没准备，偶然翻到了牛客网，发现以前还有个账号，又看了一下里面的题目，因为没怎么刷题，即兴练手。里面一共有8题，做了一会没做完，之后补上，先写几题。 魔法币时间限制：1秒空间限制：32768K小易准备去魔法王国采购魔法神器,购买魔法神器需要使用魔法币,但是小易现在一枚魔法币都没有,但是小易有两台魔法机器可以通过投入x(x可以为0)个魔法币产生更多的魔法币。魔法机器1:如果投入x个魔法币,魔法机器会将其变为2x+1个魔法币魔法机器2:如果投入x个魔法币,魔法机器会将其变为2x+2个魔法币小易采购魔法神器总共需要n个魔法币,所以小易只能通过两台魔法机器产生恰好n个魔法币,小易需要你帮他设计一个投入方案使他最后恰好拥有n个魔法币。 输入描述:输入包括一行,包括一个正整数n(1 ≤ n ≤ 10^9),表示小易需要的魔法币数量。 输出描述:输出一个字符串,每个字符表示该次小易选取投入的魔法机器。其中只包含字符’1’和’2’。 输入例子1:10 输出例子1:122 大致思路稍微计算一下，可以发现，只用魔法机器1生成的魔法币数量是:$$ 2^m-1$$只用魔法机器2生成的魔法币数量是:$$2^{(m+1)}-2$$而这刚好可以写成一个完全的二叉树: 其中每一个父节点有两个子节点，左边的是采用机器1生成的，右边则是采用机器2生成的。可以看出每个数仅出现一次，说明机器1和机器2的组合唯一，因此可以采用倒推法计算出每一个机器。首先通过计算出在哪一行，然后判断在该行是奇数还是偶数，奇数为1号，偶数为2号，计算完后再按公式返回上一行如此反复。最后代码如下:1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;math.h&gt;int main(void)&#123; int n; scanf("%d",&amp;n); char a[30]; int num = log(n+1)/log(2); int i,tmp=num; while (tmp&gt;1) &#123; int stmp =n+2-pow(2,tmp); if(stmp%2 == 0) &#123; a[tmp-1]='2'; n =(n-2)/2; &#125; else &#123; a[tmp-1]='1'; n = (n-1)/2; &#125; tmp--; &#125; a[0]= n%2?'1':'2'; for (i=0;i&lt;num;i++) printf("%c",a[i]); &#125; 相反数时间限制：1秒空间限制：32768K为了得到一个数的”相反数”,我们将这个数的数字顺序颠倒,然后再加上原先的数得到”相反数”。例如,为了得到1325的”相反数”,首先我们将该数的数字顺序颠倒,我们得到5231,之后再加上原先的数,我们得到5231+1325=6556.如果颠倒之后的数字有前缀零,前缀零将会被忽略。例如n = 100, 颠倒之后是1. 输入描述:输入包括一个整数n,(1 ≤ n ≤ 10^5) 输出描述:输出一个整数,表示n的相反数 输入例子1:1325 输出例子1:6556 思路直接求出每一位逆序相加即可，比较简单，直接贴代码:12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt; int main(void)&#123; int i=0,k=1,n,tmp,rev[5]; scanf("%d",&amp;n); tmp=n; while(tmp&gt;9) &#123; rev[i]=tmp%10; tmp =(tmp-rev[i])/10; i++; k *=10; &#125; rev[i]=tmp; int result=n; i=0; while(k&gt;0) &#123; //printf("%d",rev[i]); result += rev[i]*k; i++; k /=10; &#125; printf("%d",result);&#125; 字符串碎片时间限制：1秒空间限制：32768K一个由小写字母组成的字符串可以看成一些同一字母的最大碎片组成的。例如,”aaabbaaac”是由下面碎片组成的:’aaa’,’bb’,’c’。牛牛现在给定一个字符串,请你帮助计算这个字符串的所有碎片的平均长度是多少。 输入描述:输入包括一个字符串s,字符串s的长度length(1 ≤ length ≤ 50),s只含小写字母(‘a’-‘z’) 输出描述:输出一个整数,表示所有碎片的平均长度,四舍五入保留两位小数。 如样例所示: s = “aaabbaaac”所有碎片的平均长度 = (3 + 2 + 3 + 1) / 4 = 2.25 输入例子1:aaabbaaac 输出例子1:2.25 思路用一个计数器，遍历一遍，碰到不相同的就加１。代码如下:123456789101112131415161718#include &lt;stdio.h&gt;#include &lt;string.h&gt; int main(void)&#123; char s[50]; scanf("%s",s); char *p=s; int len=1,frac=1; while(*(p+1) != '\0') &#123; len++; if(*p != *(p+1)) frac++; p++; &#125; printf("%.2f",(len+0.0)/frac);&#125; 游历魔法王国时间限制：1秒空间限制：32768K魔法王国一共有n个城市,编号为0~n-1号,n个城市之间的道路连接起来恰好构成一棵树。小易现在在0号城市,每次行动小易会从当前所在的城市走到与其相邻的一个城市,小易最多能行动L次。如果小易到达过某个城市就视为小易游历过这个城市了,小易现在要制定好的旅游计划使他能游历最多的城市,请你帮他计算一下他最多能游历过多少个城市(注意0号城市已经游历了,游历过的城市不重复计算)。 输入描述:输入包括两行,第一行包括两个正整数n(2 ≤ n ≤ 50)和L(1 ≤ L ≤ 100),表示城市个数和小易能行动的次数。第二行包括n-1个整数parenti, 对于每个合法的i(0 ≤ i ≤ n - 2),在(i+1)号城市和parent[i]间有一条道路连接。 输出描述:输出一个整数,表示小易最多能游历的城市数量。 输入例子1:5 20 1 2 3 输出例子1:3 思路找出树的最大长度和L比较，如果大于L，那就直接是L+1，如果小于L，剩下的必须走别的路，且必须走两次，所以最后结果是maxlen+(L-maxlen)/2。代码如下:1234567891011121314151617181920212223242526272829303132#include &lt;stdio.h&gt; int getlen(int n,int p[50]) &#123; int mlen=0,tmp,i,k; for (i=n-2;i&gt;=0;i--) &#123; k=i; tmp=0; while(p[k]!=0) &#123; tmp++; k=p[k]-1; &#125; tmp++; mlen=(mlen&gt;tmp)?mlen:tmp; &#125; return mlen; &#125;int main(void)&#123; int i,n,L; int p[50]; scanf("%d%d",&amp;n,&amp;L); for(i=0;i&lt;n-1;i++) scanf("%d",&amp;p[i]); int maxlen; maxlen =getlen(n,p); maxlen = (maxlen&gt;L)?L:(maxlen+int((L-maxlen)/2)); maxlen++; printf("%d",maxlen); &#125; 重排数列时间限制：1秒空间限制：100768K小易有一个长度为N的正整数数列A = {A[1], A[2], A[3]…, A[N]}。牛博士给小易出了一个难题:对数列A进行重新排列,使数列A满足所有的A[i] * Ai + 1都是4的倍数。小易现在需要判断一个数列是否可以重排之后满足牛博士的要求。 输入描述:输入的第一行为数列的个数t(1 ≤ t ≤ 10),接下来每两行描述一个数列A,第一行为数列长度n(1 ≤ n ≤ 10^5)第二行为n个正整数Ai 输出描述:对于每个数列输出一行表示是否可以满足牛博士要求,如果可以输出Yes,否则输出No。 输入例子231 10 10041 2 3 4 输出例子YesNo 大致思路比较是否是4的倍数和奇数的数目，如果前者大于等于后者，必然是满足的。还有一种情况是前者等于后者减一，此时不存在非4倍数的偶数。最后代码如下:123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;stdio.h&gt;int Isarray(int n, int a[100000])&#123; int n1=0,n2=0,n4=0,i=0; for(;i&lt;n;i++) &#123; if(a[i]%4==0) ++n4; else if(a[i]%2==0) ++n2; else ++n1; &#125; //printf("%d,%d,%d,%d\t",n1,n2,n4,n); if (n==1 &amp;&amp; n4 ) return 1; if(n4 &gt; (n1-1)) return 1; else if((n4 == n1-1) &amp;&amp; (n2 == 0) ) return 1; else return 0; &#125;int main(void)&#123; int i,j,t,n,a[100000],b[10]; scanf("%d",&amp;t); for(j=0;j&lt;t;j++) &#123; scanf("%d",&amp;n); for(i=0;i&lt;n;i++) scanf("%d",&amp;a[i]); b[j]=Isarray(n,a); &#125; for(j=0;j&lt;t;j++) if(b[j]) printf("Yes\n"); else printf("No\n"); return 0;&#125;]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>网易</tag>
        <tag>校招</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[楼赛]]></title>
    <url>%2Fposts%2Fc72229d1%2F</url>
    <content type="text"><![CDATA[这几天登录了下实验楼，看到有个楼赛，然后就参加了，这里记录一下。虽然一直用Linux，但是基本没专门去上过之类的课，最早还是智能信息课的实验机房里搭Hadoop用到的，然后还挺喜欢的，以至于后来卸了Win把笔记本装了Ubuntu，用的开源软件，也没有盗版的困扰了。呐，就是这样说的，当然没打算拿奖，里面高手估计多得是，所以也是求个体验。 楼赛一共有三题，虽然比较简单，不过比较实用，太难的屠龙之术也就没啥必要丢出来以论轩轾了。 第一题 备份日志文件描述如下:这个就是写个每天自动备份打包完成任务的脚本，不过里面不让写脚本，这个里面虽然说了，但是还是花了很多时间才放弃写脚本。 时间输出首先是要获得当前时间，以确定两点开始备份。通常是使用date命令。首先查看一下date的参数:123456789101112131415161718192021222324 $ ▶ date --helpUsage: date [OPTION]... [+FORMAT] or: date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]Display the current time in the given FORMAT, or set the system date.Mandatory arguments to long options are mandatory for short options too. -d, --date=STRING display time described by STRING, not 'now' -f, --file=DATEFILE like --date; once for each line of DATEFILE -I[FMT], --iso-8601[=FMT] output date/time in ISO 8601 format. FMT='date' for date only (the default), 'hours', 'minutes', 'seconds', or 'ns' for date and time to the indicated precision. Example: 2006-08-14T02:34:56-0600 -R, --rfc-2822 output date and time in RFC 2822 format. Example: Mon, 14 Aug 2006 02:34:56 -0600 --rfc-3339=FMT output date/time in RFC 3339 format. FMT='date', 'seconds', or 'ns' for date and time to the indicated precision. Example: 2006-08-14 02:34:56-06:00 -r, --reference=FILE display the last modification time of FILE -s, --set=STRING set time described by STRING -u, --utc, --universal print or set Coordinated Universal Time (UTC) --help display this help and exit --version output version information and exit 后面比较多就不贴了，主要是获取年月日，好给打包文件命名。12date +%y%m%d171029 能获取出来这一步基本就OK了。 自动化任务使用cron命令实现自动化。首先编辑crontab文件，在其中加入执行时间和执行命令，即备份并打包文件。比较简单，就直接贴代码了:12crontab -e0 2 * * * mkdir /home/shiyanlou/backup &amp;&amp; tar -cvf /home/shiyanlou/backup/"$(date +%y-%m-%d)".tar /var/log/dpkg.log /var/log/mysql.log /var/log/fontconfig.log 然后启动一下cron服务:1sudo service cron start 或者1sudo cron start 第二题 批量创建删除用户和组描述如下:批量创建删除用户和组，按照里面的要求，大概是创建一个脚本，可以实现创建和删除用户的功能，输入为四个参数，对于已经创建的用户显示星号。 确保输入正确输入正确包括 学生数量正确 12345if [ $# -ne 4 ]thenecho "parameter"exitfi 参数数目正确 12345if [ $4 -lt 1 ] || [ $4 -gt 10 ]thenecho "parameter error"exitfi 功能参数正确即必须是del或者add参数，即删除或者添加用户组。可以最后加个else处理这个部分。 随机数的生成一共要生成六位随机数，虽说linux自带RANDOM，但是都是小于等于五位数的，且不能确保多少位，所以使用urandom来获取随机数。1tr -cd 0-9 &lt;/dev/urandom | head -c 6 大致思路是这样，然后贴代码了。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647if [ $# -ne 4 ]thenecho "parameter"exitfiif [ $4 -lt 1 ] || [ $4 -gt 10 ]thenecho "parameter error"exitelif [ $1 == "add" ]thenid $2 &gt;&amp; /dev/nullif [ $? -ne 0 ]thenpw=`tr -cd 0-9 &lt;/dev/urandom | head -c 6`sudo useradd -s /bin/zsh $2 -p $pwss="#$2 ALL=(ALL:ALL) ALL"echo $sssudo sh -c "echo $ss &gt;&gt; /etc/sudoers"sudo usermod -aG sudo $2echo $2:$pwelseecho $2:******fifor stu in `seq 1 $4`doid $3$stu &gt;&amp; /dev/nullif [ $? -ne 0 ]thenpw=`tr -cd 0-9 &lt;/dev/urandom | head -c 6`echo $3$stu:$pwsudo useradd -s /bin/zsh -p $pw $3$stuelseecho $3$stu:******fidoneelif [ $1 == "del" ]thensudo userdel $2for stu in `seq 1 $4`dosudo userdel $3$studoneelseecho "parameter error"exitfi 第三题 获取系统信息描述如下:获取系统信息，包括系统各部分硬件信息和软件信息。 CPU信息CPU信息可以通过查看Linux的cpuinfo获取，不过并没有直接给出CPU数量，虽然可以直接看出。这里通过把processor的数量加1得到1echo "cpu num: "$(grep processor /proc/cpuinfo | wc -l) 内存信息内存信息可以通过很多方式查看，比如top，还有就是Linux的meminfo，还有就是free命令。但是要求自定义单位，所以这里用free。12echo $(free -g |grep Mem |awk '&#123;print "memory total: " $2"G"&#125;')echo $(free -m |grep Mem |awk '&#123;print "memory free: " $4"M"&#125;') 磁盘信息磁盘信息一般使用df命令，这里要获取根目录的磁盘大小，根目录一般在输出中第一行，所以需要获取其位置:1echo "disk size: "$(df -h|awk '&#123;print $2&#125;'|sed -n 2p) 不过这个只是碰运气，有的不在第一行，就会出错了，但是grep直接过滤掉根目录是没用的，这里需要精确匹配根目录/，所以需要用到grep -w1echo "disk size: "$(df -h|grep -w '/' |awk '&#123;print $2&#125;'|sed -n 2p) 系统信息获取系统位数，直接:1echo "system bit:" $(getconf LONG_BIT) 进程数查看当前所有进程可以用ps命令实现，但是没有计数的功能，也不必为此单独创建一个命令，可以结合wc命令实现该功能:1echo "process: "$(ps -A |wc -l) 软件数目和上面一样，可以通过dpkg命令查询所有安装的软件，再结合wc命令实现计数:1echo "software num: "$(dpkg -l|wc -l) 网卡信息查询IP很简单，一句ifconfig可以解决，但是输出格式不满足要求，需要删掉输出信息中多余的字符，可以用awk命令。1echo "ip: "$(ifconfig eth0 |awk '/inet/ &#123; split($2,x,":");print x[2]&#125;') 最后这题全部代码如下:12345678910echo "cpu num: "$(grep processor /proc/cpuinfo | wc -l)echo $(free -g |grep Mem |awk '&#123;print "memory total: " $2"G"&#125;')echo $(free -m |grep Mem |awk '&#123;print "memory free: " $4"M"&#125;')#echo $(grep MemTotal /proc/meminfo | awk '&#123;print "memory total: " $2&#125;')#echo $(grep MemFree /proc/meminfo | awk '&#123;print "memory free: "$2&#125;')echo "disk size: "$(df -h|grep -w "/" |awk '&#123;print $2&#125;'|sed -n 2p)echo "system bit:" $(getconf LONG_BIT)echo "process: "$(ps -A |wc -l)echo "software num: "$(dpkg -l|wc -l)echo "ip: "$(ifconfig eth0 |awk '/inet/ &#123; split($2,x,":");print x[2]&#125;')]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>楼赛</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mathjax的LaTeX公式语法]]></title>
    <url>%2Fposts%2Fb9c74ed9%2F</url>
    <content type="text"><![CDATA[$$ E = mc^2 $$关于Mathjax的LaTeX公式语法，在Hexo的markdown语法中引用大致相同。 插入公式LaTeX的数学公式主要有两种:行内公式和行间公式。 行内公式行内公式和行间公式都有两种写法，一种是括号，一种是美元符写法 1 。\(formula\) 括号写法$formula$ 美元符写法但是由于Hexo markdown语法中暂未渲染括号的语法，也容易与markdown语法混淆，所以本篇目前使用美元符号的写法。 行间公式$$formula$$ 表示行间公式行内公式与行间公式的效果 2 : 12$[J\_\alpha(x) = \sum\_&#123;m=0&#125;^\infty \frac&#123;(-1)^m&#125;&#123;m! \Gamma (m + \alpha +1)&#125; (&#123; \frac&#123;x&#125;&#123;2&#125;)^&#123;xy^2+1&#125;&#125;]$$$[J\_\alpha(x) = \sum\_&#123;m=0&#125;^\infty \frac&#123;(-1)^m&#125;&#123;m! \Gamma (m + \alpha +1)&#125; (&#123; \frac&#123;x&#125;&#123;2&#125;)^&#123;xy^2+1&#125;&#125;]$$ 效果:行内公式:$[J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha +1)} ({ \frac{x}{2})^{xy^2+1}}]$行间公式:$$[J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha +1)} ({ \frac{x}{2})^{xy^2+1}}]$$ 上下标和括号上下角标上标用^符号表示，下标用_符号表示。如果内容多于一个，可以用{}括起来。如果左右两边都需要有角标，可以用\sideset语法设置。1$$\sideset&#123;^1\_2&#125;&#123;^3\_4&#125;S$$ $$\sideset{^1_2}{^3_4}S$$ 括号小括号是()，中括号是[]，大括号是\{\}。其中使用\left和\right可以设置自适应括号大小。如：1$(\frac&#123;a&#125;&#123;b&#125;)$ 和 $\left(frac&#123;a&#125;&#123;b&#125;\right)$ 效果: $(\frac{a}{b})$ 和 $\left(\frac{a}{b}\right)$ 其中\left和\right通常是成对出现的，如果只需要自适应一个分隔符的大小，也需要写两个语法。这是用另外一个(如\left.)去适配。 1$$\left\.\frac&#123; &#123;\rm d&#125;y&#125;&#123; &#123;\rm d&#125;x&#125;\right|\_&#123;x=0&#125;$$ 效果: $$\left.\frac{ {\rm d}y}{ {\rm d} x} \right|_{x=0}$$ 由于hexo中markdown语法问题，\frac后的两个{ {中间一定要加空格，或者直接取消第二个大括号，显示为: $$\left.\frac{ \rm dy}{ \rm dx} \right|_{x=0}$$ 一些常用表达式分数\frac{}{}表示分数，后面两个部分是分子和分母。 开方\sqrt[n]{formula}表示开n次方。 矢量\vec{a} \cdot \vec{b}表示$\vec{a}\cdot\vec{b}$ 积分\int\_0^1{x^2}sin(x){\rm d}x表示$\int_0^1{x^2}sin(x){\rm d}x$ 极限行内:$\lim\limits\_{n\rightarrow + \infty} \frac{1}{n(n+1)}$ 表示$\lim\limits_{n\rightarrow + \infty} \frac{1}{n(n+1)}$行间:$$\lim\_{n\rightarrow + \infty} \frac{1}{n(n+1)}$$ 表示$$\lim_{n\rightarrow + \infty} \frac{1}{n(n+1)}$$ 累加累乘\sum\_{i=0}^n \frac{1}{i^2}表示$\sum_{i=0}^n \frac{1}{i^2}$\prod\_{i=0}^n \frac{1}{i^2}表示$\prod_{i=0}^n \frac{1}{i^2}$ 特殊字符希腊字符 小写 大写 \alpha A \beta B \gamma \Gamma \delta \Delta \epsilon E \varepsilon \zeta Z \eta H \theta \Theta \vartheta \iota I \kappa K \lambda \Lambda \mu M \nu N \xi \Xi o O \pi \Pi \varpi \rho P \varrho \sigma \Sigma \varsigma \tau T \upsilon \Upsilon \phi \Phi \varphi \chi X \psi \Psi \omega \Omega 关系运算 运算符号 表示方式 ± \pm × \times ÷ \div ∣ \mid ∤ \nmid ⋅ \cdot ∘ \circ ∗ \ast ⨀ \bigodot ⨂ \bigotimes ⨁ \bigoplus ≤ \leq ≥ \geq ≠ \neq ≈ \approx ≡ \equiv ∑ \sum ∏ \prod ∐ \coprod 集合运算 集合符号 表示方式 ∅ \emptyset ∈ \in ∉ \notin ⊂ \subset ⊃ \supset ⊆ \subseteq ⊇ \supseteq ⋂ \bigcap ⋃ \bigcup ⋁ \bigvee ⋀ \bigwedge ⨄ \biguplus ⨆ \bigsqcup 对数和三角运算符 运算符 表示方式 log \log lg \lg ln \ln ⊥ \bot ∠ \angle 30∘ 30^\circ sin \sin cos \cos tan \tan cot \cot sec \sec csc \csc 箭头符号 箭头 表示方式 ↑ \uparrow ↓ \downarrow ⇑ \Uparrow ⇓ \Downarrow → \rightarrow ← \leftarrow ⇒ \Rightarrow ⇐ \Leftarrow ⟶ \longrightarrow ⟵ \longleftarrow ⟹ \Longrightarrow ⟸ \Longleftarrow 其他运算符 运算符 表示方式 ′ \prime ∫ \int ∬ \iint ∭ \iiint ⨌ \iiiint ∮ \oint lim \lim ∞ \infty ∇ \nabla ∵ \because ∴ \therefore ∀ \forall ∃ \exists ≠ \not= ≯ \not&gt; ⊄ \not\subset $\hat{y} $ \hat{y} $\check{y}$ \check{y} $\breve{y}$ \breve{y} $\overline{a+b+c+d} $ \overline{a+b+c+d} $\underline{a+b+c+d} $ \underline{a+b+c+d} $\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$ \overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0} 字体转换 字体 表示方式 \rm 罗马体 \bf 黑体 \sl 倾斜体 \mit 数学斜体 \sc 小体大写字母 \it 意大利体 \cal 花体 \sf 等线体 \tt 打字机字体 1.本篇中公式具体内容均以formula表示。 ↩2.由于hexo markdown语法的渲染，公式中_需要用转义字符表示。 ↩]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>mathjax</tag>
        <tag>latex</tag>
        <tag>markdown</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客的优化]]></title>
    <url>%2Fposts%2F6d87f1ac%2F</url>
    <content type="text"><![CDATA[捣鼓个人博客也有一段时间了，其间加了不少的插件，改来改去，最后打开也变得很慢了。问题主要有两个方面，一个是网络问题，因为托管在Github上，国内访问一直很慢，后来还是迁移到Coding上了，妥协了，给他加了个Hosted by Coding Pages。另一方面则是加载的问题，由于多了许多插件，导致网页加载变慢，特别是在添加live2d之后。所以打算做些工作优化一下博客。 外部链接优化主要是告诉搜索引擎爬虫无需抓取目标页，同时告诉搜索引擎无需将的当前页的Pagerank传递到目标页。Google推荐是用nofollow，nofollow是HTML元标签(meta)的content属性和链接标签(a)的rel属性的一个值，告诉机器(爬虫)无需追踪目标页，为了对抗blogspam(博客垃圾留言信息)。但是如果是通过sitemap直接提交该页面，爬虫还是会爬取，这里的nofollow只是当前页对目标页的一种态度，并不代表其他页对目标页的态度。 主要作用 防止不可信的内容，最常见的是博客上的垃圾留言与评论中为了获取外链的垃圾链接，为了防止页面指向一些拉圾页面和站点。 付费链接：为了防止付费链接影响Google的搜索结果排名，Google建议使用nofollow属性。 引导爬虫抓取有效的页面：避免爬虫抓取一些无意义的页面，影响爬虫抓取的效率。其主要方法是给所有外部链接加上rel=&quot;external nofollow&quot;属性，对外部链接target=”_blank”采用在新窗口种打开外部链接的方法。 安装1npm install hexo-autonofollow --save 配置编辑站点配置文件。1234nofollow: enable: true exclude: - you domain 这里的exclude下主要填你的域名，为豁免域名。 在主页不显示某类文章修改主题目录下layout的index.swig文件:12345678910111213141516171819202122232425&#123;% extends '_layout.swig' %&#125;&#123;% import '_macro/post.swig' as post_template %&#125;&#123;% import '_macro/sidebar.swig' as sidebar_template %&#125;&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125;&#123;% block page_class %&#125; &#123;% if is_home() %&#125; page-home &#123;% endif %&#125;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;section id="posts" class="posts-expand"&gt; &#123;% for post in page.posts %&#125; &#123;% if post.categories!= 'Recommend' %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &#123;% endif %&#125; &#123;% endfor %&#125; &lt;/section&gt; &#123;% include '_partials/pagination.swig' %&#125;&#123;% endblock %&#125;&#123;% block sidebar %&#125; &#123;&#123; sidebar_template.render(false) &#125;&#125;&#123;% endblock %&#125; 在其中加入page的判断页面即可。 添加emoji支持&#x1f604;由于Hexo的默认Markdown语法不支持emoji表情，网上也有人替换了其Markdown渲染工具，但是又会引入新的Bug，所以就放弃了。后来看到有人照着Github的方式做了一个插件，在生成网页的时候将关键字替换成emoji的unicode字符，然后再利用JavaScript将字符替换成图片，这样即使图片加载失败还有字符fallback。其Repo在此。 安装1npm install hexo-filter-github-emojis --save 配置编辑站点配置文件1234567vim _config.xmlgithubEmojis: enable: true className: github-emoji unicode: false styles: localEmojis: 其中，localEmojis可以添加自己的本地表情。 Warning的处理在安装完之后再执行hexo生成站点文件时，会有一个警告，主要内容如下:1DeprecationWarning: Calling an asynchronous function without callback is deprecated. 这个意思是调用无回调的异步函数的方法已经被废弃，可能是使用了writeFile函数。因此在其安装目录下寻找，后来在其index文件中找到了这个函数。修改方法如下: 12cd node_modules/hexo-filter-github-emojisvim index.js 找到带有writeFile函数的一行，应该是这行:1fs.writeFile(path.join(__dirname, 'emojis.json'), JSON.stringify(githubEmojis, null, '\t')) 将writeFile改为writeFileSync函数，即:1fs.writeFileSync(path.join(__dirname, 'emojis.json'), JSON.stringify(githubEmojis, null, '\t')) 之后再运行，警告消失。 后加现在听说作者已经修复了这个问题，所以不需要改了。 静态资源压缩网页加载速度优化，主要通过压缩网页的静态资源如JS,Html,CSS,图片等文件来达到加速效果。网上现在主要有两种，一种是直接用Hexo的插件，Hexo-Neat，还有一种是使用通用的压缩工具Gulp。这里主要使用Gulp。 安装首先是安装Gulp插件:1npm install gulp --save-dev 然后安装gulp相关插件:1234567$ npm install gulp-clean-css --save-dev$ npm install gulp-uglify --save-dev$ npm install gulp-htmlmin --save-dev$ npm install gulp-htmlclean --save-dev$ npm install gulp-imagemin --save-dev$ npm install del --save-dev$ npm install run-sequence --save-dev 配置添加一个gulpfile.js文件，在博客根目录下。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485var gulp = require('gulp');var minifycss = require('gulp-clean-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');var imagemin = require('gulp-imagemin');var del = require('del');var runSequence = require('run-sequence');var Hexo = require('hexo');gulp.task('clean', function() &#123; return del(['public/**/*']);&#125;);// generate html with 'hexo generate'var hexo = new Hexo(process.cwd(), &#123;&#125;);gulp.task('generate', function(cb) &#123; hexo.init().then(function() &#123; return hexo.call('generate', &#123; watch: false &#125;); &#125;).then(function() &#123; return hexo.exit(); &#125;).then(function() &#123; return cb() &#125;).catch(function(err) &#123; console.log(err); hexo.exit(err); return cb(err); &#125;)&#125;)gulp.task('minify-css', function() &#123; return gulp.src(['./public/**/*.css','public/**/*.min.css']) .pipe(minifycss(&#123; compatibility: 'ie8' &#125;)) .pipe(gulp.dest('./public'));&#125;);gulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);gulp.task('minify-js', function() &#123; return gulp.src(['./public/**/*.js','!public/**/*.min.js']) .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);gulp.task('minify-img', function() &#123; return gulp.src('./public/images/**/*.*') .pipe(imagemin()) .pipe(gulp.dest('./public/images'))&#125;)gulp.task('minify-img-aggressive', function() &#123; return gulp.src('./public/images/**/*.*') .pipe(imagemin( [imagemin.gifsicle(&#123;'optimizationLevel': 3&#125;), imagemin.jpegtran(&#123;'progressive': true&#125;), imagemin.optipng(&#123;'optimizationLevel': 7&#125;), imagemin.svgo()], &#123;'verbose': true&#125;)) .pipe(gulp.dest('./public/images'))&#125;)gulp.task('compress', function(cb) &#123; runSequence(['minify-html', 'minify-css', 'minify-img'], cb);&#125;);gulp.task('build', function(cb) &#123; runSequence('clean', 'generate', 'compress', cb)&#125;);gulp.task('default', ['build']) 因为已经将hexo g生成站点文件的过程包含进去了，直接执行gulp即可。但是不知道是不是Next版本更新的原因，导致js的压缩总是出问题，暂时先删掉了runSequence中的minify-js一项，之后再作讨论。 问题解决原因找到了，是因为Gulp的uglify-js不支持ES6的语法，因此编译会出错。解决方案:先使用babel编译。 安装 1npm install --save-dev gulp-babel babel-preset-es2015 babel-core 修改gulpfile.js文件在变量定义中添加一行: 1var babel = require("gulp-babel"); 然后在.pipe(uglify())这一行前加一句:1.pipe(babel(&#123;presets: ['es2015']&#125;)) 问题解决。 替换谷歌字体库众所周知，谷歌字体库访问通常情况都非常慢，于是决定使用国内的CND加速，但是之前360的字体库已经下架了，所以使用中科大的(虽然不下架应该也不会选择它 &#x1f604; )。修改方式:编辑主题的配置文件:1vim theme/next/_config.xml 找到fonts的设置，在host:后面填写1//fonts.lug.ustc.edu.cn 和host:中间注意保持空格。 后加中科大字体库已经挂了，谷歌字体库也经常抽风。于是采用国内CDN加速，参考于Showfom大神的一篇博客 。 修改谷歌字体库将//fonts.googleapis.com修改为国内cdn加速的库，和上面一样，找到fonts的设置，在host:后面填写 1//fonts.cat.net 替换CDNJS 开源 JS 库只需要替换 cdnjs.cloudflare.com 为 cdnjs.cat.net 即可。即： 在vendors中的jquery： 后面添加自定义的地址: 1https://ajax.cat.net/ajax/libs/jquery/3.2.1/jquery.min.js 修改Han字体的CDN由于Han字体使用的CDN是cloudflare的，国内速度比较慢，因此替换其CDN: 在han:后加: 1https://cdnjs.cat.net/ajax/libs/Han/3.3.0/han.min.css 修改其他的CDN最终修改后的配置文件内容如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# Script Vendors.# Set a CDN address for the vendor you want to customize.# For example# jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js# Be aware that you should use the same version as internal ones to avoid potential problems.# Please use the https protocol of CDN files when you enable https on your site.vendors: # Internal path prefix. Please do not edit it. _internal: lib # Internal version: 2.1.3 jquery: https://ajax.cat.net/ajax/libs/jquery/3.2.1/jquery.min.js # Internal version: 2.1.5 # See: http://fancyapps.com/fancybox/ fancybox: https://cdnjs.cat.net/ajax/libs/fancybox/3.1.25/jquery.fancybox.min.js fancybox_css: https://cdnjs.cat.net/ajax/libs/fancybox/3.1.25/jquery.fancybox.min.css # Internal version: 1.0.6 # See: https://github.com/ftlabs/fastclick fastclick: https://cdnjs.cat.net/ajax/libs/fastclick/1.0.6/fastclick.min.js # Internal version: 1.9.7 # See: https://github.com/tuupola/jquery_lazyload lazyload: https://cdnjs.cat.net/ajax/libs/lazyload/2.0.3/lazyload-min.js # Internal version: 1.2.1 # See: http://VelocityJS.org velocity: https://cdnjs.cat.net/ajax/libs/velocity/1.5.0/velocity.min.js # Internal version: 1.2.1 # See: http://VelocityJS.org velocity_ui: https://cdnjs.cat.net/ajax/libs/velocity/1.5.0/velocity.ui.min.js # Internal version: 0.7.9 # See: https://faisalman.github.io/ua-parser-js/ ua_parser: https://cdnjs.cat.net/ajax/libs/UAParser.js/0.7.9/ua-parser.min.js # Internal version: 4.6.2 # See: http://fontawesome.io/ fontawesome: https://cdnjs.cat.net/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css # Internal version: 1 # https://www.algolia.com algolia_instant_js: algolia_instant_css: # Internal version: 1.0.2 # See: https://github.com/HubSpot/pace # Or use direct links below: # pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js # pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css pace: pace_css: # Internal version: 1.0.0 # https://github.com/hustcc/canvas-nest.js canvas_nest: https://cdnjs.cat.net/ajax/libs/canvas-nest.js/1.0.1/canvas-nest.min.js # three three: # three_waves # https://github.com/jjandxa/three_waves three_waves: # three_waves # https://github.com/jjandxa/canvas_lines canvas_lines: # three_waves # https://github.com/jjandxa/canvas_sphere canvas_sphere: # Internal version: 1.0.0 # https://github.com/zproo/canvas-ribbon canvas_ribbon: # Internal version: 3.3.0 # https://github.com/ethantw/Han han: https://cdnjs.cat.net/ajax/libs/Han/3.3.0/han.min.css 然后找出网页中所有其他的使用cloudflare加速的内容，替换掉。$$[J\alpha(x) = \sum{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha}]$$]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Nofollow</tag>
        <tag>Emoji</tag>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题的Gitalk移植]]></title>
    <url>%2Fposts%2F4da30c7%2F</url>
    <content type="text"><![CDATA[之前是由于各种评论服务都挂了，后来采用来必力，偶尔抽了一次风，所以当时打算用Github的Issue当评论。在网上找了很多，大多是Gitment的，也照着网上的教程试了一遍，也装成功了，具体过程都添加在建站时候的一篇文档里了，并没有单独写一篇文章，地址在这。但是Gitment有个问题，对于每一篇文章都得手动去初始化，很麻烦。后来看到Gitalk，样式也挺漂亮的，于是打算尝试一下移植到Next主题上。 新建Gitalk的swig文件由于Next主题的可扩展性还算好，为了方便统一管理，尽量不修改已经存在的文件。首先创建Gitalk的swig文件，放在next/layout/_third-party/comments文件夹下，命名为gitalk.swig。内容如下1234567891011121314151617181920&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125; &lt;link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"&gt; &lt;script src="https://unpkg.com/gitalk/dist/gitalk.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; var gitalk = new Gitalk(&#123; clientID: '&#123;&#123; theme.gitalk.ClientID &#125;&#125;', clientSecret: '&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;', repo: '&#123;&#123; theme.gitalk.repo &#125;&#125;', owner: '&#123;&#123; theme.gitalk.githubID &#125;&#125;', admin: ['&#123;&#123; theme.gitalk.adminUser &#125;&#125;'], id: location.pathname, distractionFreeMode: '&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;' &#125;) gitalk.render('gitalk-container') &lt;/script&gt;&#123;% endif %&#125; 在主题文件layout/_third-party/comments/index.swig中引入刚刚添加的文件。1&#123;% include 'gitalk.swig' %&#125; 修改主题评论代码在layout/_partials/comments.swig文件中找到最后一个if分支，应该是这两句:12&#123;% elseif theme.valine.appid and theme.valine.appkey %&#125; &lt;div id="vcomments"&gt;&lt;/div&gt; 在最后一个if分支后加一个Gitalk的分支:12&#123;% elseif theme.gitalk.enable %&#125; &lt;div id="gitalk-container"&gt;&lt;/div&gt; 在主题配置文件中引入GItalk1vim themes/next/_config.xml 在其中加入:12345678gitalk: enable: true githubID: newdee repo: BlogComments ClientID: ****** ClientSecret: ****** adminUser: newdee distractionFreeMode: true 其中githubID是你的Github用户名，repo是你用来存放评论Issue的仓库，可以不是Blog的仓库。adminUser是你的用户名，主要用来初始化评论的。clientID和client_secret是你的授权客户端ID和密钥。具体获得方法是在Github的设置界面选择Authorized Github Apps，然后Register a new application，将Authorization callback URL设置为你的Blog的域名，然后就可以获得clientID和client_secret了。 基本上到这里就可以直接用了,打开页面会提示你初始化评论框。如果要设置按钮的样式，可以参照以下步骤: 新建样式文件要设置评论框的样式，可以在source/css/_common/components/third-party/文件夹下，新建一个gitalk.styl文件，向其中加入如下内容:1234.gt-header a, .gt-comments a, .gt-popup a border-bottom: none;.gt-container .gt-popup .gt-action.is--active:before top: 0.7em; 可以根据自己的喜好添加修改样式。 引入样式文件在主题目录下的source/css/_common/components/third-party/third-party.styl文件中引入:1@import "gitalk"; Issue重复的问题到这里是可以用了的，但是初始化过程中发现Issue页面有两个一样的，后来发现是因为它把直接文章页面地址和点击阅读更多所跳转的带#more的页面当成两个页面，因此重复创建Issue了。解决方案:由于默认的id参数是location.href，可以将其改为location.pathname，即可解决当前状况。即在gitalk.swig文件中的admin下面加一行:1id: location.pathname, 至此，大功告成。不过配置完才发现，Gitalk也是需要一篇文章一篇文章的初始化的，并不能自动将所有的文章一次性初始化完成。 本地化由于Gitalk是使用UNPKG来给npm的CDN加速的，但是网络延迟有时候会稍高，可以选择直接下载js和css文件到本地。将下载的css文件放于主题目录的source/css目录下，js放于source/js/src目录下。将layout/_third-party/comments/gitalk,swig文件中的超链接两行修改一下:12&lt;link rel="stylesheet" href="/css/gitalk.css"&gt;&lt;script src="/js/src/gitalk.min.js"&gt;&lt;/script&gt; 然后就可以正常加载了。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>Gitalk</tag>
        <tag>Github Issue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bash和Tmux的Powerline]]></title>
    <url>%2Fposts%2F1dd5cd65%2F</url>
    <content type="text"><![CDATA[Powerline可以说是一个状态提示栏，当你在终端操作各种指令的时候，状态提示可以告诉你你当前的一些信息，有时候会提高一些工作效率，不过更多时候可能只是觉得很cool吧。主要说两个Powerline，一个是Bash的（Zsh算一类），一个是Tmux的。由于在Tmux中的状态提示比较丰富了，所以不用Vim了，感觉装多了插件，Vim越来越慢了。 Bash的Powerlinepowerline-shell安装在Bash下安装Powerline，现在改名叫powerline-shell了，现在的仓库地址在这。环境Ubuntu，不过与环境关系不大，直接用pip管理器安装:1pip install powerline-shell powerline-shell配置首先生成配置文件:1powerline-shell --generate-config &gt; ~/.powerline-shell.json 然后编辑配置文件，1vim ~/.powerline-shell.json 可以参照这个Demo。其中参数具体含义在Repo中的Readme上有说明。 字体库安装由于Powerline所用的字体，一般的系统字体库中并不具备，如状态提示栏中的特殊符号。包括Bash和Tumx的Powerline等，都需要字体支持，不然可能会比较丑。123git clone https://github.com/powerline/fontscd fontssh install.sh 应用Powerline字体安装完成之后需要选择所用的字体，因为用了Powerline，所以需要选择支持Powerline的字体。具体方法：首先在Terminal上的菜单里选择编辑Preference，然后在选择Profiles, 编辑所用的Profiles，再在Text Appearance中选择Custom font，在里面搜索Powerline的基本都是支持Powerline的字体了，选择自己喜欢的一款就好。到这里，Bash的Powerline就算配置好了。 Tmux的Powerline其实Powerline的配置大多类似，这里直接从官方Repo克隆下来。 下载tmux-powerline12cd ~/some/path/git clone https://github.com/erikw/tmux-powerline.git Tmux配置一般在.tmux.conf文件中添加Tmux的配置:1vim ~/.tmux.conf 向其中添加如下内容:1234567set-option -g status onset-option -g status-interval 2set-option -g status-justify "centre"set-option -g status-left-length 60set-option -g status-right-length 90set-option -g status-left "#(~/path/to/tmux-powerline/powerline.sh left)"set-option -g status-right "#(~/path/to/tmux-powerline/powerline.sh right)" 其中~/path/to/tmux-powerline/powerline.sh是克隆的tmux-powerline的目录。这些就是基本配置，已经足够了。也可以控制左右状态栏的可见性:12bind C-[ run '~/path/to/tmux-powerline/mute_powerline.sh left' # Mute left statusbar.bind C-] run '~/path/to/tmux-powerline/mute_powerline.sh right' # Mute right statusbar. 如果喜欢多窗口的Powerline可以添加下面一句话:1set-window-option -g window-status-current-format "#[fg=colour235, bg=colour27]⮀#[fg=colour255, bg=colour27] #I ⮁ #W #[fg=colour27, bg=colour235]⮀" 天气配置Tmux的状态栏的功能有:12345678910AN 和 WAN IP 地址MPD、Rhythmbox、Banshee、MOC、Audacious、cmus 等播放器的正在播放信息Gmail、Maildir、mbox 的新到邮件数电池状态天气预报系统负载、CPU 占用、持续运行时间、网络速度当前目录的 Git、SVN、Mercurial 分支日期及时间主机名称tmux 信息 但是到这里打开Tmux的时候，会显示未设置地区，所以显示不了天气。具体方法是编辑tmux-powerline的目录中文件:1vim ~/.tmux/tmux-powerline/segments/weather.sh 找到其中export TMUX_POWERLINE_SEG_WEATHER_LOCATION这个变量。里面的注释也有说明，需要你自己获取你的地区ID。1234# Your location. Find a code that works for you:# 1. Go to Yahoo weather http://weather.yahoo.com/# 2. Find the weather for you location # 3. Copy the last numbers in that URL. e.g. "http://weather.yahoo.com/united-states/california/newport-beach-12796587/" has the numbers "12796587" 不过填了自己的ID之后可能还是不能显示天气。这时候只需要调整一下语句的顺序，将export TMUX_POWERLINE_SEG_WEATHER_LOCATION=&quot;2137109&quot;这句话放到第一个if语句前面，最后开起来应该是这样:1234TMUX_POWERLINE_SEG_WEATHER_DATA_PROVIDER_DEFAULT="yahoo"TMUX_POWERLINE_SEG_WEATHER_UNIT_DEFAULT="c" TMUX_POWERLINE_SEG_WEATHER_UPDATE_PERIOD_DEFAULT="600"export TMUX_POWERLINE_SEG_WEATHER_LOCATION="2137109" 再回到Tmux，应该恢复正常了。进行到这里，基本上算是大功告成了。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>bash powerline</tag>
        <tag>tmux powerline</tag>
        <tag>powerline</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IPv4下使用IPv6]]></title>
    <url>%2Fposts%2F8544442c%2F</url>
    <content type="text"><![CDATA[在IPv4环境下使用IPv6。当前测试所用系统:ubuntu。因为暂时离开学校，而IPv6目前尚未普及，只有部分高效有所搭建，但希望访问以前的PT站，因此这里记录一下之前的“4 to 6” 的搭建过程。目前所用方法暂时有两种有效，加上SS代理，那就是三种了。 使用miredo网络工具miredo主要用于BSD和Linux的IPV6 Teredo隧道链接，可以转换不支持IPV6的网络连接IPV6，内核中需要有IPV6和TUN隧道支持。用法参数见其WIKI直接用命令行比较方便，这个也免去了很多复杂的配置，具体过程如下: 安装miredo12sudo apt updatesudo apt install miredo 这个很简单，安装完成之后启动就可以创建一个”4 to 6”的虚拟转换网卡。1sudo miredo 使用ifconfig可以查看到多了一个网卡：123456789teredo Link encap:UNSPEC HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00 inet6 addr: 2001:0:53aa:64c:20e0:6050:861c:ebe4/32 Scope:Global inet6 addr: fe80::7d24:d8ab:cc69:a96b/64 Scope:Link inet6 addr: fe80::ffff:ffff:ffff/64 Scope:Link UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1280 Metric:1 RX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:1 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:500 RX bytes:0 (0.0 B) TX bytes:48 (48.0 B) 然后ping一下Google的IPv6地址，应该是可以ping通了。1ping6 ipv6.google.com 不过到这里还没完,ipv6还可以用来访问一些外面的网站。 修改Hosts文件如果本来就有ipv6地址，前面的就都不用做了。Hosts文件参考最新地址，见其Repo。也可以直接拷贝Hosts文件内容，地址在这。因为内容比较多，复制起来比较麻烦，可以直接保存为txt，比如hosts.txt。然后，1cat hosts.txt &gt;&gt; /etc/hosts 然后就可以直接访问Google，YouTube等网站了。不过由于是4to6的网络，没有自己的ipv6地址，所以速度不会太快。 HE.net方案另一种ipv6代理是He.net方案，可以直接访问其官网。 注册首先是注册Tunnel broker，地址在这，里面的邮箱和密码填好就可以，其余的随便填一下。然后进入你的Tunnel页面。 创建Tunnel点击User Function中的Create Regular Tunne，然后选择一个地区的Tunnel服务器，一般选延迟最小的，可以通过ping判断。虽然是在亚洲，但东京和HK的延迟还是很高的，所以不要通过地点判断。然后就是输入你的IPv4地址，注意是外网IP。点击创建，创建成功后进入Example Configuration， 选择你的操作系统，它会给出一段代码，用于配置你的电脑的网卡的。我这里是Ubuntu，所以选择Debian/Ubuntu，然后给出的代码如下:12345678auto he-ipv6iface he-ipv6 inet6 v4tunnel address ****** netmask 64 endpoint ****** local ****** ttl 255 gateway ****** 这个就是网卡的配置，相当于新建一个自动启动的网卡，然后分配了ip。直接复制粘贴到interface文件中即可:1sudo vim /etc/network/interface 注意，如果电脑没有公网IP，则需要把local的IP地址改为你的私有地址，如192.168.2.100 启用网卡添加完之后，需要启用刚刚配置的4 to 6网卡，1sudo ifup he-ipv6 然后就可以访问V6的PT站和外面的一些网站了。当然，速度虽然取决与你的服务器地区，但总体速度也不会很快。 梯子代理IPv6这个之前搭建梯子的时候应该说过了，配置比较简单，如果用SS的 话，直接在SS服务器的configure文件中将server地址改为::即可：1server: "::" ::会同时转发V6和V4流量。当然，前提是在选择服务器的时候启用了IPv6地址。如果服务器延迟低，IPv6下载也会很快的。不过如果用VPS只是为了搭建一个SS，其余的什么都不管，一旦受到Dos-attack，可能流量就一晚上走完了。DDos易攻难守，而且这对于提供虚拟机的服务商也是一种损失。所以最好还需要一点网络和服务器维护的手段。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>IPv6</tag>
        <tag>隧道</tag>
        <tag>HE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FFmpeg常用命令]]></title>
    <url>%2Fposts%2F3c4e255%2F</url>
    <content type="text"><![CDATA[又是一阵时间没回来了，中间偶然获得了You-get这个神器，果然py大法好。但是善难养成，恶易成习。坚持太难了。还值得一提的是，vimium这个chrome插件，使得chrome浏览器基本能摆脱鼠标的束缚。当然，只是基本。还有免费的流程图绘制，Draw.io.然后在用You-get的时候发现了pysocks和tsocks两个小工具。有梯子会很有用。还有就是script录制终端和scriptreplay播放录制终端。You-get需要依赖FFmpeg，当我安装You-get的时候，发现FFmpeg已经有了，记不得什么时候装的。既然没印象，那应该就不是什么困难的事了。那FFmpeg安装就免介绍了。顺便记一下，因为又有一段时间没来阁子更新，hexo貌似又出问题了，试了很多方法没解决，npm和nodejs也是卸了重装，最后确定不是这个问题，然后又重装hexo，结果发现还是一样的bus error。后来新建了一个文件夹用hexo，发现正常初始化，所以大概是package的版本不兼容导致的了。于是重新装一下package.json文件里的插件。顺便提一件事，今天发现手环断了。现在重新继续。 简要介绍FFmpeg 的官网在这,github主页。 FFmpeg的项目主要有几个部分: 视频文件命令行转换工具。 ffserver基于Http、RTSP用于实时广播的多媒体服务器，也可以支持时间平移。 ffpaly用sdl和FFmpeg开发的一个简单的媒体播放器。 libavcodec包含了所有的FFmpeg音视频解码的库。为了保证最优性能和高复用性，大多数编码器从头开发的。 libavformat包含了所有普通音视频格式的解析器和产生器的库。比较流行的播放器，QQ影音，Mplayer,KMPlayer,暴风影音，射手影音都是以FFmpeg作为内核的视频播放器。 转码ffmpeg -i input.avi -b:v 640k output.ts参数说明： -i是输入参数，-b是比特率设置，缺省200kb/s.直接ffmpeg -i input.avi是查看视频信息。 播放媒体直接一个ffplay命令就可以，也可以尝试在终端的文本界面打开这个命令试试。 查看文件格式ffprobe命令 视频合并1ffmpeg -i concat "input1.ts|input2.ts|3.ts" -vcodec copy merges.ts 视频剪切1ffmpeg -i 1.ts -ss 00:00:00 -t :10:00 result.ts 提取图片从视频中提取图片:1ffmpeg -vcodec rawvideo -f rawvideo -pix_fmt gray -s 720x576 -i sample.ts gray -f image2 -vcodec bmp %4d.bmp 添加logo1ffmpeg -i 10.20.ts -vf "movie=../resource/youku_logo.png [logo]; [in][logo] overlay=main_w - overlay_w - 10:10 [out]" -q:v 1 -vcodec mpeg4 10.20.logo.ts 视频旋转1234567ffmpeg -i demo.mp4 -vf "transpose=1" out.mp40 = 90CounterCLockwise and Vertical Flip (default)1 = 90Clockwise2 = 90CounterClockwise3 = 90Clockwise and Vertical FlipFor 180 you can use -vf "transpose=2,transpose=2" 参数说明附上FFmpeg的参数说明：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100-formats 输出所有可用格式-f fmt 指定格式(音频或视频格式)-i filename 指定输入文件名，在linux下当然也能指定:0.0(屏幕录制)或摄像头-y 覆盖已有文件-t duration 记录时长为t-fs limit_size 设置文件大小上限-ss time_off 从指定的时间(s)开始， [-]hh:mm:ss[.xxx]的格式也支持-itsoffset time_off 设置时间偏移(s)，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss[.xxx]的格式也支持-title string 标题-timestamp time 时间戳-author string 作者-copyright string 版权信息-comment string 评论-album string album名-v verbose 与log相关的-target type 设置目标文件类型("vcd", "svcd", "dvd", "dv", "dv50", "pal-vcd", "ntsc-svcd", ...)-dframes number 设置要记录的帧数视频选项:-b 指定比特率(bits/s)，似乎FFmpeg是自动VBR的，指定了就大概是平均比特率-bitexact 使用标准比特率-vb 指定视频比特率(bits/s)-vframes number 设置转换多少桢(frame)的视频-r rate 帧速率(fps) （可以改，确认非标准桢率会导致音画不同步，所以只能设定为15或者29.97）-s size 指定分辨率 (320x240)-aspect aspect 设置视频长宽比(4:3, 16:9 or 1.3333, 1.7777)-croptop size 设置顶部切除尺寸(in pixels)-cropbottom size 设置底部切除尺寸(in pixels)-cropleft size 设置左切除尺寸 (in pixels)-cropright size 设置右切除尺寸 (in pixels)-padtop size 设置顶部补齐尺寸(in pixels)-padbottom size 底补齐(in pixels)-padleft size 左补齐(in pixels)-padright size 右补齐(in pixels)-padcolor color 补齐带颜色(000000-FFFFFF)-vn 取消视频-vcodec codec 强制使用codec编解码方式('copy' to copy stream)-sameq 使用同样视频质量作为源（VBR）-pass n 选择处理遍数（1或者2）。两遍编码非常有用。第一遍生成统计信息，第二遍生成精确的请求的码率-passlogfile file 选择两遍的纪录文件名为file-newvideo 在现在的视频流后面加入新的视频流 高级视频选项-pix_fmt format set pixel format, 'list' as argument shows all the pixel formats supported-intra 仅适用帧内编码-qscale q 以&lt;数值&gt;质量为基础的VBR，取值0.01-255，约小质量越好-loop_input 设置输入流的循环数(目前只对图像有效)-loop_output 设置输出视频的循环数，比如输出gif时设为0表示无限循环-g int 设置图像组大小-cutoff int 设置截止频率-qmin int 设定最小质量，与-qmax（设定最大质量）共用，比如-qmin 10 -qmax 31-qmax int 设定最大质量-qdiff int 量化标度间最大偏差 (VBR)-bf int 使用frames B 帧，支持mpeg1,mpeg2,mpeg4音频选项:-ab 设置比特率(单位：bit/s，也许老版是kb/s)前面-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换 默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80）以上。-aframes number 设置转换多少桢(frame)的音频-aq quality 设置音频质量 (指定编码)-ar rate 设置音频采样率 (单位：Hz)，PSP只认24000-ac channels 设置声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质的DVDrip就可以用2-an 取消音频-acodec codec 指定音频编码('copy' to copy stream)-vol volume 设置录制音量大小(默认为256) &lt;百分比&gt; ，某些DVDrip的AC3轨音量极小，转换时可以用这个提高音量，比如200就是原来的2倍-newaudio 在现在的音频流后面加入新的音频流字幕选项:-sn 取消字幕-scodec codec 设置字幕编码('copy' to copy stream)-newsubtitle 在当前字幕后新增-slang code 设置字幕所用的ISO 639编码(3个字母)Audio/Video 抓取选项:-vc channel 设置视频捕获通道(只对DV1394)-tvstd standard 设转换为flv: ffmpeg -i test.mp3 -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 test.flv ffmpeg -i test.wmv -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 test.flv 转换文件格式的同时抓缩微图： ffmpeg -i "test.avi" -y -f image2 -ss 8 -t 0.001 -s 350x240 'test.jpg' 对已有flv抓图： ffmpeg -i "test.flv" -y -f image2 -ss 8 -t 0.001 -s 350x240 'test.jpg' 转换为3gp: ffmpeg -y -i test.mpeg -bitexact -vcodec h263 -b 128 -r 15 -s 176x144 -acodec aac -ac 2 -ar 22500 -ab 24 -f 3gp test.3gp ffmpeg -y -i test.mpeg -ac 1 -acodec amr_nb -ar 8000 -s 176x144 -b 128 -r 15 test.3gp]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nodeppt入坑]]></title>
    <url>%2Fposts%2F9b44f6cc%2F</url>
    <content type="text"><![CDATA[没错，又来入坑了。昨天刚刚尝试了用reveal.js渲染Markdown的幻灯片，效果还行，但是每次都要在Html文档里面编辑，略嫌麻烦，强迫症患者的理想目标是，找到一个工具，在写好的MD文档之外，调用这个工具，即可渲染得到PPT。而关于PPT的风格主题、模板以及其他的，则可以在工具中指定参数。不过挺难找的，而当初也没好好的学学js，书看了不到一半就放弃了。今天就来试试这个自称最好的Nodeppt。详细介绍见这里,gayhub的repo在这。 开始首先安装Nodeppt注意，需要先安装NodeJS。 1npm install -g nodeppt 然而在npm的过程中，fetch等了很久，网上说可以换成淘宝的源，后来试了一下，是挺快的，然后再切换回原来的源即可。不过还是安装失败。不过问题在于没有加sudo然后启动 1234# 获取帮助nodeppt start -h# 绑定端口nodeppt start -p &lt;port&gt; 或者：1nodeppt start -p port -d path/for/ppts 如: 12345nodeppt start -p 8090 -d path/for/ppts# 绑定host，默认绑定0.0.0.0nodeppt start -p 8080 -d path/for/ppts -H 127.0.0.1# 使用socket通信（按Q键显示/关闭二维码，手机扫描，即可控制）# socket须知：1、注意手机和pc要可以相互访问，2、防火墙，3、ip 启用socket控制有两种方式： 使用url参数： http://127.0.0.1:8080/md/demo.md?controller=socket 使用start命令行：nodeppt start -c socket在页面按键【Q】显示控制url的二维码和控制链接（需要隐身窗口打开），手机上可以使用左右touch滑动和摇一摇切换下一页。 最后创建Slide可以直接用Nodeppt创建，就像hexo创建文档一样。nodeppt create ppt-name接下来就是按照提示输入基本信息，默认就是MD文件，如果需要Html，可以在名字后面加上后缀类型。 扩展语法Nodeppt在支持Markdown基本语法之外，还有一些扩展。 配置基本配置：12345678910title: 这是演讲的题目speaker: 演讲者名字url: 可以设置链接transition: 转场效果，例如：zoomin/cards/slidefiles: /css/theme.moon.css，尾部的文件theme: moon //皮肤highlightStyle: monokai_sublime //hljs的样式headFiles: //头部的文件usemathjax: //如果为yes，则引入mathjax，默认不建议开启，导出文件太多date: 2017年7月26日 另外有：colors-moon-blue-dark-green-light 共六套自带皮肤可供选择。关于目录：可以直接在slide所在根目录添加img、css和js文件夹并添加到引用路径，Nodeppt默认可以找得到的。 排版 使用[slide]标签来分页，如: 1slide style="background-image:url('/img/bg1.png')"] 使用---分界 单条动画 12345使用方法：列表第一条加上 ` &#123;:&amp;.动画类型&#125;``（注意空格）* 上下左右方向键翻页 * 列表支持渐显动画 &#123;:&amp;.moveIn&#125; * 支持多级列表 * 这个动画是moveIn 目前支持的单条动画效果包括： moveIn fadeIn bounceIn rollIn zoomIn 转场动画Markdown的顶部配置可以设置，以方括号标注。magic是在一页幻灯片中播放多个子页面，页面之间进行动效切换，但是slide不翻页（类似keynote的magicmove），使用[magic]标签包裹，子页面之间使用====间隔。[magic]标签支持全部转场动效，效果比较好的有： zoomin/zoomout move circle earthquake newspaper cover-diamond horizontal3d/horizontal vertical3d cover-circle 1234567891011121314151617181920212223242526[slide][magic data-transition="earthquake"]## 标题1-----&lt;div class="columns3"&gt; &lt;img src="/assets/searchbox-fe-framework-and-product/Snip20151209_11.png" height="450"&gt; &lt;img src="/assets/searchbox-fe-framework-and-product/Snip20151209_10.png" height="450"&gt; &lt;img src="/assets/searchbox-fe-framework-and-product/Snip20151209_12.png" height="450"&gt;&lt;/div&gt;====## 标题2-----&lt;div class="columns3"&gt; &lt;img src="/assets/searchbox-fe-framework-and-product/Snip20151209_11.png" height="450"&gt; &lt;img src="/assets/searchbox-fe-framework-and-product/Snip20151209_10.png" height="450"&gt; &lt;img src="/assets/searchbox-fe-framework-and-product/Snip20151209_12.png" height="450"&gt;&lt;/div&gt;====## 标题3-----&lt;div class="columns3"&gt; &lt;img src="/assets/searchbox-fe-framework-and-product/Snip20151209_11.png" height="450"&gt; &lt;img src="/assets/searchbox-fe-framework-and-product/Snip20151209_10.png" height="450"&gt; &lt;img src="/assets/searchbox-fe-framework-and-product/Snip20151209_12.png" height="450"&gt;&lt;/div&gt;[/magic] 如：[slide data-transition=&quot;vertical3d&quot;] 与Html语法混编 内部回调除了使用Html的语法：[code][/code]之外，提供了格外的函数： 12in-callback 切换来...out-callback 切换走... 表格与默认的Markdown语法类似。 在线音乐以及其他的网页插入使用iframe语法插入 导出文件可以选择到处Html用于网页展示或者pdf用于保存。但根据Nodeppt官方的说法，导出pdf不再支持，请使用chrome打印服务另存为pdf，url中添加?print=1，然后使用chrome打印 ctrl+P。不过主要目的自然是用于网页展示了，pdf随时随地可以生成。导出Html文档:123456789# 获取generate帮助nodeppt generate -h# 使用generate命令nodeppt generate filepath# 导出全部，包括Nodeppt的js、img和css文件夹# 默认导出在publish文件夹nodeppt generate ./ppts/demo.md -a# 指定导出文件夹nodeppt generate ./ppts/demo.md output/path -a 导出目录下所有ppt，并且生成ppt list首页： 1nodeppt path output/path -a Demo演示123执行 nodeppt start访问 http://127.0.0.1:8080/在线demo： http://js8.in/nodeppt/ 好了，写了这么多，终于要点题了。在我尝试安装完成之后，发现Nodeppt并没有渲染成功，或许大概是已经停止更新了吧。渲染之后，浏览器打开是酱紫的：入坑完毕。不过后来又找了个Marp，直接转换倒是很方便，可以导出为PDF，但是没有找到导出html的功能，有点遗憾。现在就连Markdown语法都是参差不齐，因为应用不同，所以语法扩展不同，希望能尽快形成一个标准，用md渲染幻灯片的技术普及民众。不过最后还是下了个cleaver来渲染，基本上是可以了。效果在这里。 当然，我又卸载了这个cleaver。因为他和clear命令太像了！！！害得我都没法用补全命令clear。Aaron早逝，但Markdown正无声的占领着这个世界。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>ppt</tag>
        <tag>nodeppt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown制作幻灯片]]></title>
    <url>%2Fposts%2F14461a6d%2F</url>
    <content type="text"><![CDATA[写完博客之后，考虑的就是怎么做幻灯片了。主要考虑的还是用Markdown语法写幻灯片，调查了很多，从remark.js到landslide，从impress.js到show.js，再到deck.js、Fathom.js、Jmpress.js等，五花八门，眼花缭乱，最后还是随机选了一个，reveal.js。 准备工作 reveal.js: Markdown渲染工具 gayhub: 上传 rawgit: 将Github中的html正常加载，并添加CDN 开始Clone或者Fork官方Repo1git clone https://github.com/&lt;you account id&gt;/reveal.js README中有很多配置编辑的方式可供参考， 现在有了一个可运行的reveal.js模板，运行根目录下的index.html即可预览 编辑默认index文档 打开index.html，找到slide的标签，&lt;div class=&quot;slides&quot;&gt;，即为幻灯片正文的开始，在此之下，添加几行代码，打开Markdown的编辑模式:12345&lt; section data-markdown data-separator="---" data-separator-vertical="--"&gt; &lt; script type="text/template"&gt; ### 你要写的正文内容 &lt; /script&gt;&lt; /section&gt; 现在可以用Markdown编辑幻灯片内容了。 基本编辑方式： --- 横向分页 -- 纵向分页，通常一列可以作为一个章节。 # 标题 - 列表 插入图片使用基本的m arkdown插图大法就可以完成。考虑到有时候的网络环境，还是保存在本地再添加比较好。![](upload/pic.jpg)这种格式即可。如果要调整排版和位置，则需要写html的语法。 插入视频这里时候不早了，电脑上没有视频，也懒得插入，下次会自己做一个的，先借用前人的代码，省去从YouTube上下载。1&lt;section data-background-video="your_video_name.webm"&gt; 对外访问将编辑好的reveal.js项目提交到Github上:123git add .git commit -m "add my slides"git push origin master 这里本来并不想写git的命令，因为太基础了，不过送佛送西，就这样吧。然后就可以从网页访问刚刚上传的repo了，我就做了个简单的Helloword。不过到现在位置，我们也仅仅是编辑了一下里面的html，幻灯片并没有被渲染，而是以源代码方式展示出来。这时候使用第三方工具将代码库中的html文件按照期望方式对外暴露使其访问。 打开http://rawgit.com/,输入 https://github.com/&lt;your github id&gt;/cd-in-cloud-reveal-js/blob/master/index.html 得到 production url 和 development url 两个链接。Production url 是带有 CDN 的，和 github 的同步会存在一定的延迟， developement url 的更新会及时一些，不过访问速度相对会没那么快。 然后就是访问生成的HelloWorld,如下所示。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>PPT</tag>
        <tag>revealJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SS服务器搭建]]></title>
    <url>%2Fposts%2F1420aa47%2F</url>
    <content type="text"><![CDATA[在ubuntu环境下的SS服务器搭建。 购买服务器至于翻墙的原因，各人有各人的说法，这堵墙也算是有利有弊，这里我不想多说什么。但Google和Google Scholar，YouTube，以及其他的一些coding资源站的限制访问，大概可以成为很多人有这个需求的起因。考虑到翻墙的人口基数，免费的服务基本上已经快要退出战场了。所以有时候还是花点钱靠谱一些。这类的服务器其实挺多的，用的比较多的是亚马逊的，但是个人感觉太贵，后来在PAC的开源项目中发现了vultr，个人感觉挺便宜的，也算是支持一下免费的PAC，于是准备购买一个vultr服务器， 选择配置这里的配置是ubuntu16.04，1核CPU，40G的SSD硬盘，流量一个月2000G，服务器是东京的服务器，价格是10刀每月，很便宜了，流量基本用不完。而且是按小时计费的，如果你刚刚买了，不喜欢，可以立马撤销掉，也不会花多少钱。然后下单，基本上绑定一张卡就行了，然后它会给你关于这个服务器的ip和密码，密码是随机生成的，你可以自己登陆进去修改，也可以在安装系统之前把你电脑的ssh-key的公钥给他，好免密码登录，不过我试了，好像没起作用。他也有提供网页登录窗口，你登录进去直接操作，不过我比较喜欢本地的操作，就在电脑上ssh 远程登录，用户名是root。然后可以配置一下ssh免密码登录，这个步骤是可选的，而且也非常简单，不清楚的话直接网上搜一下就行了。 搭建环境登陆进去后开始配置环境123apt updateapt install python-pipapt install shadowsocks 更新12pip install --upgrade pippip install --upgrade shadowsocks 这里提示要先装setuptools，于是1pip install setuptools 然后重新升级shadowsocks1pip install --upgrade shadowsocks 添加配置文件我之前是直接在本地写好了，然后直接上传，配置文件内容如下，密码和端口根据需求可以比较随意修改，但不能使用已经被占用的端口。加密协议也可以修改，具体协议根据自己需要。12345678910111213 1 &#123; 2 "server":"0.0.0.0", 3 "local_address": "127.0.0.1", 4 "local_port":1080, 5 "port_password": &#123; 6 "4490": "password", 7 "4491": "password", 8 "4496": "password" 9 &#125;,10 "timeout":300,11 "method":"aes-256-cfb",12 "fast_open": false13 &#125; 首先在服务器端打开端口：1nc -l 1992 &gt; shadowsocks.json 然后在本地输入1nc IP_ADDRESS 1992 &lt; shadowsocks.json 这里的IP_ADDRESS改成自己服务器的ip，端口也可以自己改，一样就行。最后移动到/etc目录下1mv shadowsocks.json /etc/shadowsocks.json 配置完成 开启socks服务运行命令1ssserver -c /etc/shadowsocks.json 出现错误，1-bash: /usr/bin/ssserver: No such file or directory 原因大概是升级shadowsocks之后/usr/bin目录下找不到可执行文件的链接了，可以自己创建一个软连接，用ln命令，也可以直接找到可执行文件位置，直接运行，我比较懒，就选第二种方法了。1whereis ssserver 显示1ssserver: /usr/local/bin/ssserver /usr/share/man/man1/ssserver.1.gz 可以看到，在/usr/local/bin目录下，于是直接运行1root@vultr:~# /usr/local/bin/ssserver -c /etc/shadowsocks.json -d start 到这里，应该就已经搭好了可以用客户端测试一下。显示延迟一百多ms，比较快了，配置到这里就ok了。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
        <tag>ss</tag>
        <tag>vultr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tmux的会话配置]]></title>
    <url>%2Fposts%2F8cfd1ed2%2F</url>
    <content type="text"><![CDATA[受一个外国朋友的影响，用了几个月的Tmux.简直就像打开了新世界的大门。Tmux结合Vim的体验，Tmux控制多个终端的体验，已经无法割舍了。当然，当初也是受这位外国小哥的影响，让我捡起了放弃已久的Vim，并爱上了它。不过用了一段时间，发现虽然可以用tmux attach恢复刚刚关闭的会话，但关机之后并不保存，于是在网上找了一些方法来保存这些会话，好让下次开机依然可以恢复原来的会话。 安装Tmux插件管理工具1git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm 后面的文件夹是自己新建的，刚安装好Tmux的时候，其home目录下的配置文件也需要自己新建。和Vim类似，Tmux 也有一个插件管理系统，叫 Tmux Plugin Manager。之后修改Tmux配置文件： 123456789# List of pluginsset -g @plugin 'tmux-plugins/tpm'set -g @plugin 'tmux-plugins/tmux-sensible'# Other examples:# set -g @plugin 'github_username/plugin_name'# set -g @plugin 'git@github.com/user/plugin'# set -g @plugin 'git@bitbucket.com/user/plugin'# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)run '~/.tmux/plugins/tpm/tpm' 记得run的语句一般要放在配置文件的最后一行。 安装默认插件目前添加了两个插件:tpm和tmux-sensible，是官方推荐的插件，现在已经clone了tpm，下一步就是安装tmux-sensible这个插件。在Tmux中，安装插件的一些快捷命令如下: 123prefix shift-i # installprefix shift-u # updateprefix alt-u # uninstall plugins not on the plugin list 现在安装tmux-sensible插件: 12345Already installed "tpm"Installing "tmux-sensible""tmux-sensible" download successTMUX environment reloaded.Done, press ESCAPE to continue. 安装成功。 安装tmux Resurrect &amp; Continuum插件Tmux Resurrect 和 Tmux Continuum 这两个 Tmux 插件在gayhub上都有托管，主要目的就是解决Tmux的会话备份和恢复。首先，修改配置文件，加上: 1set -g @plugin 'tmux-plugins/tmux-resurrect' 然后prefix+shift+i，进入如下所示界面， 123456Already installed "tpm" [0/0]Already installed "tmux-sensible"Installing "tmux-resurrect" "tmux-resurrect" download successTMUX environment reloaded.Done, press ESCAPE to continue. 至此，resurrect插件安装成功。但是Tmux 的resurrect插件都是靠手动备份的，为了实现自动备份，可以配合tmux continuum插件使用，因此现在安装tmux continum插件: 1set -g @plugin 'tmux-plugins/tmux-continuum' 然后又是一样的结果: 12345678Already installed "tpm" [0/0]Already installed "tmux-sensible"Already installed "tmux-resurrect"Installing "tmux-continuum" "tmux-continuum" download successTMUX environment reloaded.Done, press ESCAPE to continue. 好了，又安装成功了。 Recurrect的插件配置修改配置文件，添加几行配置:123456#tmux-resurrectset -g @resurrect-save-bash-history 'on'set -g @resurrect-capture-pane-contents 'on'set -g @resurrect-strategy-vim 'session'# set -g @resurrect-save 'S'# set -g @resurrect-restore 'R' 至此，已经设置了保存键入的历史命令，以及面板布局和Vim状态。Tmux的手动保存和加载快捷键是:12prefix Ctrl-s # save tmux session to local fileprefix Ctrl-r # reload tmux session from local file 自动备份配置在配置文件中加上continuum的配置参数，默认15分钟一次，可以根据自己的需要修改。 1set -g @continuum-save-interval '60' 自动备份完成，会在Tmux启动时还原。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>tmux</tag>
        <tag>recurrect</tag>
        <tag>continuum</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[回来]]></title>
    <url>%2Fposts%2Fc33ea426%2F</url>
    <content type="text"><![CDATA[尘封的往事不必再提，忘却的岁月如风而逝。 其实这两句话除了能显得中二之外毫无意义，因为旧事依然还会提，慵懒或激情的年纪还是会想起。放在这里，只觉得当做开头不错。QQ空间和朋友圈还是放弃了。大概因为越来越多的好友，而由于本人不喜欢营销，所以通常会屏蔽大部分内容，所以自己也尽量不发需要人点赞转发的内容，以至于除此之外，感觉很多个人的想法，实在不大方便让所有人看见，写日志和说说大抵会显得矫情，选择性屏蔽功能多却麻烦。而随着年岁渐长，也渐渐发现，不必所有感受说与人听，不必所有情怀显得高尚，也不必去刻意要求别人了解自己，况平时不善言辞，正式场合不苟言笑，木讷的很，又何用在众人眼下扮着理想的男主呢？终于决定要重回博客。不过看到自己以前心血来潮的时候搭建的博客，先是各种修改主题文件，本来是想着定制自己的主题，于是便选了一套透明风格的，慢慢的解决了各种问题，后来添加很多没有的功能，弄着弄着，感觉用hexo生成的时间都长了一倍，当时觉得的freestyle，后来感觉难看极了。于是放弃了自己的主题，找许多简约朴实风格的模板主题，然后又是各种折腾，功能阉割，最后又是那样惨不忍睹，后来索性就放弃了这个博客，也不记得多久没维护了。重新配置博客的过程也当是重新熟悉一下当初搭建过程，电脑重装过很多次系统了，所以hexo也要重装，然后便是重新熟悉一下markdown语法了。于是稍加修葺，重新定居于此，改名为“阁子”。于是用这废话累牍作其重生之记。大抵也是心中不快，却忧谗畏讥，不敢私语，只能回到自己阁子里来提笔乱书。研究生阶段便是如此，以至于我在读研期间一直在思考着我到底是否适合读研。刚开始的一日一询，步步紧逼，到后来的不闻不问，放之任之，几年下来，始终没有任何产出。研究生生活便是这般苦闷，以至尘埃既定，花开无果，时常想起，便免不了落些个郁郁寡欢。本来这些废话是准备昨天说的，不过昨天刚准备写，就被一群人拉去酒吧了，生平第一次去酒吧，喝酒，打台球，喝酒，掷骰子，喝酒，唱歌跳舞，喝酒。大概凌晨四点，打车回家。当时准备回来继续写这个的，但发现电脑不在宿舍，于是睡了一觉，便到现在了。 回归于此，看到的人不要太在意，说的有错不要太放在心上，我都这把年纪了，世界观是改不掉的了。至于什么微信二维码的接口，已经关掉了，没有指望从各位手里筹到一个鸡腿。当然，倘若有熟人，也请装作不认识罢，反正我也不会知道。不过如果真有兴趣打赏，嘿嘿嘿嘿，那个，about页面有个人简历，去那里找找。 阁子无光，不见日月。诳语胡诌，未知春秋。 “ただいま！”]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[镜语]]></title>
    <url>%2Fposts%2F48f0e3fe%2F</url>
    <content type="text"><![CDATA[久不动笔，有时候总想说点什么，但是最后不知是碍于什么，也许是怕人看，也许是怕人了解自己，然后投来鄙夷的眼光。不过想到自己好歹也搭建了一个博客，或许可以在没有人知道的地方，尽情的释放自己。 这么想已经很久了，但是每次只是花费了半分钟这么想。以至于现在突然兴起，连题目都想不出来叫啥，所以只能先废话着，等到末了看看能不能尽量少选几个字一言蔽之。 走在路上的时候，好像一直在思考，思考着以后该怎么办，思考着如何才能不浪费时间，周围的经常没有话唠，偶尔聊聊几句。昏暗的路灯下，大家都安静走着，只有树上的黑鸦偶尔叫几声，或是拍拍翅膀。还有落地的声响，是它们的白翔。 现在北京已经是十二月下旬了，马上就要进入春运抢票时间了，不管是学校还是公司，应该都要开始年度总结了。但现在却越来越怕这件事了，每次总结都会发现了浪费了好多时间，都会暗自下决定接下来好好学习，然后便是不断循环着的愧疚自责，不断循环着的下定决心。最后便是越来越怕自己了，或者我会指着镜子问为什么要骗我？为什么要让自己意识到这些，却带不来任何改变？ 明明看着电视里的那些不公平的事，你那么气愤。 然而，最终你还是没能改变导演既定的剧本。 这只是电视，只是剧本，你这样安慰着你。面对所有的该与不该，对于自己的剧本，你依然无法插手。迷茫，愤怒，惊醒，奋斗，迷茫，如此往复。总会想着自己奋斗的初衷，什么时候起已经无法成为动力。总是嘲笑所谓的梦想，到底是为了欺人还是骗自己。为什么当初能坚持一件多少人坚持不了的事，现在做什么都是半途而废？为什么看到自己的无能都是不甘，却还是让自己一如既往？ 不知道从什么时候起，那么的讨厌鸡汤，不知道为什么人非得带着积极的情绪活下去，不知道为什么世间的真理都是需要乐观，也不知道我是怎样成为这样一个阴暗的人的。然而我所知道的是，我却在讨厌鸡汤的同时却也讨厌自己。 人总是在追求幸福，而世间的不幸，正是伴随着这些幸福而生。 当你看到或想到别人的不幸，你才发现自己的幸福；当你看到或想到自己的不幸，也会觉得他人身在福中。 镜子不说话，你们又归于沉默。]]></content>
      <categories>
        <category>呓语</category>
      </categories>
      <tags>
        <tag>年度总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[建站，阁子记]]></title>
    <url>%2Fposts%2F6ed4d3bc%2F</url>
    <content type="text"><![CDATA[丙申九月，建站小记。 这两天趁着双休，学着搭了一下自己的blog，利用的是github的托管页面，用的是hexo的模板，申请了一个免费域名，自己添加了一些工具之类的，再准备陆续把以前自己在CSDN中的blog搬过来。 不知道有没有人能看得到，好像添加搜索那部分还有点问题，sitemap的url报错，不过总算是自己的空间了，虽然还是github提供的，今天忙这个两顿饭都忘记准时吃了，都是吃的汉堡，虽然有点累，但是开辟自己的空间的感觉真的很不错。 不过不知道能不能坚持，我对自己向来是不惮报以最坏的期望的，多少年都在证明这样做的正确性。不过对于进来的人，献上欢迎的花儿，还有飞吻。 现在记一下，博客搭建过程。安装Nodejs和git自然不用多说。然后选择主题，我选择的是一个透明的主题，不过这个主题的作者貌似很懒，只有透明效果。然后布局和插件自己布置。关于访问统计，一共用了百度统计/谷歌统计/腾讯统计，不过这些都是后台统计，显示在网页用的是不蒜子。百度统计和腾讯统计直接在_partial下新建一个ejs，然后把获得的代码粘贴进去就行了。谷歌统计也有通用的模板，把id粘贴进去就行。最后在主题的配置文件里写一下。有的主题已经内置了百度和谷歌的统计代码的，只需要填入id就行，上面是说的没有的情况。添加微博秀，直接到复制微博秀的代码。也是新建一个ejs文件，然后添加一个wedjet修改背景，添加归档Archives,添加sitemap，提交谷歌搜索。添加404，添加外链。hexo方法大致一致，都是在百度谷歌现学现用。以后有时间自己再做个主题，以后有时间在用flask搭一个博客，以后有时间，，，不知道说什么了。 修改了next主题后的一些配置（后加） 把侧边栏头像变成圆形，并且鼠标停留在上面发生旋转效果主要方法：修改themes/next/source/css/_common/components/sidebar/sidebar-author.styl 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ -webkit-animation: play 2s ease-out 1s 1; -moz-animation: play 2s ease-out 1s 1; animation: play 2s ease-out 1s 1; /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.5s ease-out; -moz-transition: -moz-transform 1.5s ease-out; transition: transform 1.5s ease-out;&#125;img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125;.site-author-name &#123; margin: $site-author-name-margin; text-align: $site-author-name-align; color: $site-author-name-color; font-weight: $site-author-name-weight;&#125;.site-description &#123; margin-top: $site-description-margin-top; text-align: $site-description-align; font-size: $site-description-font-size; color: $site-description-color;&#125; 添加nest背景特效：打开next/layout/_layout.swig，在之前添加如下代码： 123&#123;% if theme.canvas_nest %&#125;&lt;script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;&#123;% endif %&#125; 打开/next/_config.yml，添加以下代码： 123456# --------------------------------------------------------------# background settings# --------------------------------------------------------------# add canvas-nest effect# see detail from https://github.com/hustcc/canvas-nest.jscanvas_nest: true 文章链接唯一化文章题目或者变更文章发布时间会经常更改，在默认设置下，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择。安装此插件后，不要在hexo s模式下更改文章文件名，否则文章将成空白。 1npm install hexo-abbrlink --save 修改站点配置文件： 12345permalink: posts/:abbrlink/ # “posts/” 可自行更换# abbrlink configabbrlink:alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 可选择模式： crc16 &amp; hex crc16 &amp; dec crc32 &amp; hex crc32 &amp; dec 添加宠物（虽然没卵用）回到博客目录: 1npm install -save hexo-helper-live2d 然后打开Hexo/blog/themes/next/layout的_layout.swig,将下面代码放到之前： 1&#123;&#123; live2d() &#125;&#125; 然后在在 hexo 的_config.yml 中添加参数： 123live2d:model: wankobottom: -30 下面是一些model，可以换不同的宠物:123456789101112131415161718192021222324* Gantzert_Felixander* Epsilon2.1* haru* miku* ni-j* nico* nito* nipsilon* nietzsche* shizuku* tsumiki* wanko* z16* hibiki* koharu* haruto* Unitychan* tororo* hijiki* width 宽度 默认值: 150* height 高度 默认值： 300* className 元素的类名 默认值： live2d* id 元素的id 默认值： live2dcanvas* bottom 元素的底部偏移 默认值： -20 如果嫌模型位置不正确 可以调整这个参数 详细地址:https://huaji8.top/post/live2d-plugin-2.0/ 首页title的优化更改index.swig文件，文件路径是your-hexo-site\themes\next\layout，将下面代码 1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125; 改成: 1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125; 添加mob_share SDK分享方法：在_config.xml中添加 1234#Sharemob_share: enable: true appkey: ******** 然后添加mob模块：在next/layout/_partials/share/文件夹中新建一个mob_share.swig文件，内容为: 12345678910111213141516171819202122232425&lt;!--MOB SHARE BEGIN--&gt;&lt;div class="-mob-share-ui-button -mob-share-open"&gt;分享&lt;/div&gt;&lt;div class="-mob-share-ui" -mob-share-ui-theme -mob-share-ui-theme-slide-bottom style="display: none"&gt;&lt;ul class="-mob-share-list"&gt; &lt;li class="-mob-share-weixin"&gt;&lt;p&gt;微信&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-qzone"&gt;&lt;p&gt;QQ空间&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-weibo"&gt;&lt;p&gt;新浪微博&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-facebook"&gt;&lt;p&gt;Facebook&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-twitter"&gt;&lt;p&gt;Twitter&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-pocket"&gt;&lt;p&gt;Pocket&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-tumblr"&gt;&lt;p&gt;Tumblr&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-google"&gt;&lt;p&gt;Google+&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-linkedin"&gt;&lt;p&gt;Linkedin&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-qq"&gt;&lt;p&gt;QQ好友&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-tencentweibo"&gt;&lt;p&gt;腾讯微博&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-renren"&gt;&lt;p&gt;人人网&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-douban"&gt;&lt;p&gt;豆瓣&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-youdao"&gt;&lt;p&gt;有道云笔记&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-instapaper"&gt;&lt;p&gt;Instapaper&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="-mob-share-close"&gt;取消&lt;/div&gt;&lt;/div&gt;&lt;div class="-mob-share-ui-bg"&gt;&lt;/div&gt;&lt;script id="-mob-share" src="http://f1.webshare.mob.com/code/mob-share.js?appkey=&#123;&#123;theme.mob_share.appkey&#125;&#125;"&gt;&lt;/script&gt;&lt;!--MOB SHARE END--&gt; 然后添加引用，在next/layout/post.swig文件中，添加一行即可。 12&#123;% elseif theme.mob_share.enable %&#125; &#123;% include '_partials/share/mob_share.swig' %&#125; 后来添加了一些插件：hexo-ruby-character插件插件主要用来给文字注音啥的，具体效果见官方repo 1npm install hexo-ruby-character --save 使用方法： 1&#123;% ruby Base|top %&#125; Base (top) hexo-pdf插件用来在文档中插入pdf的，官方repo安装： 1npm install --save hexo-pdf 用法： 1&#123;% pdf http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125; 图片懒加载虽然图片不多，没多大用，不过还是用了，想着稍微能提速一点。官方repo安装： 1npm install hexo-lazyload-image --save 配置： 1234lazyload:enable: true onlypost: falseloadingImg: # eg. ./images/loading.png 添加DaoVoice插件首先在Daovoice官网注册一个账号，新建一个应用，然后进入应用，选择安装到网站，获取 接入代码 和 app_id。然后编写主题配置文件_config.xml，加入几行： 123daovoice: enable: true app_id: ****** 然后编写 DaoVoice 接入代码： 123456789101112131415161718192021找到themes/next/lauout/_third-party/目录，在该目录下新增 daovoice/daovoice.swig 文件，然后在daovoice文件中写入：&#123;% if theme.daovoice.enable %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123; i["DaoVoiceObject"]=r; i[r]=i[r]||function()&#123; (i[r].q=i[r].q||[]).push(arguments)&#125;, i[r].l=1*new Date(); a=s.createElement(o), m=s.getElementsByTagName(o)[0]; a.async=1; a.src=g; a.charset="utf-8"; m.parentNode.insertBefore(a,m) &#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/&#123;&#123; theme.daovoice.app_id &#125;&#125;.js","daovoice") daovoice('init', &#123; app_id: "&#123;&#123; theme.daovoice.app_id &#125;&#125;" &#125;); daovoice('update'); &lt;/script&gt; &#123;% endif %&#125; 然后再在模板文件里引入 DaoVoice 接入代码：找到themes/next/lauout/_layout.swig文件，引入刚才写的 daovoice.swig 文件。 1&#123;% include '_third-party/daovoice/daovoice.swig' %&#125; 隐藏底部powered一栏打开hexo/themes/next/layout/_partials/footer.swig,使用&lt;!-- --&gt;隐藏之间的代码即可。或者直接删除 修改底栏心形图标直接去fontawesome网站找到对应的图标名字，在主题配置文件中替换掉heart就行。 主页文章添加阴影效果打开\themes\next\source\css_custom\custom.styl,向里面加入： 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 修改页面底部标签分类的#号修改模板/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将 # 换成喜欢的图标，具体可以去FontAwesome网站去找。 添加脚注1npm install hexo-reference --save 用法： 12345678910basic footnote1here is an inline footnote[^2](inline footnote)and another one3and another one4 [^1]: basic footnote content[^3]: paragraphfootnotecontent[^4]: footnote content with some [markdown](https://en.wikipedia.org/wiki/Markdown) 添加居中模块用HTML代码： 1&lt;blockquote class="blockquote-center"&gt;优秀的人，不是不合群，而是他们合群的人里面没有你&lt;/blockquote&gt; 添加鼠标特效新建一个js： 1vim themes/next/source/js/src/mouse.js 在里面输入: 12345678910111213141516171819202122232425262728/* 鼠标特效 */var a_idx = 0;jQuery(document).ready(function($) &#123; $("body").click(function(e) &#123; var a = new Array("富强", "民主", "文明", "和谐", "自由", "平等", "公正" ,"法治", "爱国", "敬业", "诚信", "友善"); var $i = $("&lt;span/&gt;").text(a[a_idx]); a_idx = (a_idx + 1) % a.length; var x = e.pageX, y = e.pageY; $i.css(&#123; "z-index": 999999999999999999999999999999999999999999999999999999999999999999999, "top": y - 20, "left": x, "position": "absolute", "font-weight": "bold", "color": "#ff6651" &#125;); $("body").append($i); $i.animate(&#123; "top": y - 180, "opacity": 0 &#125;, 1500, function() &#123; $i.remove(); &#125;); &#125;);&#125;); 然后在Blog\themes\next\layout\_layout.swig文件的最下方，&lt;/body&gt;前面添加&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/mouse.js&quot;&gt;&lt;/script&gt;。 添加时钟在next\layout\_macro中找到sidebar.swig(侧边导航栏),在合适的位置加入一下代码: 1234&lt;div class="swf_clock" align="center"&gt;&lt;embed name="honehoneclock" width="160" height="70" align="middle" pluginspage="http://www.macromedia.com/go/getflashplayer" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock01.swf" type="application/x-shockwave-flash" wmode="transparent" quality="high" bgcolor="#ffffff" allowscriptaccess="always"&gt;&lt;/div&gt; 给页面添加背景图片在theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码： 1234567body&#123; background:url(图片链接); background-size:cover; background-repeat:no-repeat; background-attachment:fixed; background-position:center; &#125; 文字背景色以及半透明的设置一样，在theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码： 123456.content &#123; border-radius: 10px; margin-top: 60px; background:rgba(颜色rgb,透明度) none repeat scroll !important; &#125; 其中border-radius是给文章背景设置圆角，margin-top是设置文章到顶部的距离，其中属性可根据自己的需要进行调整。在修改完文章背景色之后，文字颜色可能和背景色不能很好的搭配，这时候我们就需要修改文章字体的颜色了。打开theme/next/source/css/_common/scaffolding文件夹下的base.styl文件，找到body{}，将其中的color:$text-color更改为你想要的颜色即可。代码如下： 1234567891011body &#123; position: relative; /* Required by scrollspy */ font-family: $font-family-base; font-size: $font-size-base; line-height: $line-height-base; color: 颜色代码; background: $body-bg-color; +mobile() &#123; padding-right: 0 !important; &#125; +tablet() &#123; padding-right: 0 !important; &#125; +desktop-large() &#123; font-size: $font-size-large; &#125;&#125; 文章页面宽度设置还是在theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码： 1main-inner &#123;width: 页面宽度;&#125; 文章内单行代码的样式设置如果更改了网页底色，单行代码的颜色可能与背景色不搭配，这时就需要我们自己设置了。在theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码： 1#posts code &#123;color: 颜色代码;background-color:颜色代码;&#125; 网页顶部和底部的文字颜色修改头部文字颜色 更改头部site-title的字体颜色在theme/next/source/css/_common/components/header文件夹下打开site-meta.styl文件，找到.brand{}向里面添加以下代码： 1color: 颜色代码 !important; 更改头部menu的字体颜色在相同的文件夹下打开menu.styl文件，找到a{}，向里面添加以下代码： 1color: 颜色代码 !important; 底部文字颜色底部文字颜色的修改就显得很简单了，还是在theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码： 1.footer-inner &#123;color: 颜色代码;&#125; 侧栏背景图以及内部文字颜色的修改还是在theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码： 1234567#sidebar &#123; background:url(图片链接); background-size: cover; background-position:center; background-repeat:no-repeat; p,span,a &#123;color: 颜色代码;&#125;&#125; 其中设置p,span,a{color:颜色代码}，即可修改侧边栏内部文字的颜色。 修改Mist风格下的侧边栏位置为左边此设置为修改next主题Mist风格下侧边栏的位置为左边（默认为右边）以及侧边栏变化后页面变化的方向，具体操作如下： 更改页面变化方向：首先，打开next/source/js/src文件夹下的motion.js文件Ctrl+F查找paddingRight；把所有（2个）PaddingRight更改为paddingLeft即可。代码样式如下： 12&#123;paddingLeft: SIDEBAR_WIDTH&#125;,NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(&#123;paddingLeft: 0&#125;); 更改所有和sidebar相关的元素： 更改sidebar： 打开next/source/css/_common/components/sidebar文件夹下的sidebar.styl文件，将.sidebar{}内的right: 0;改为left: 0;，形式如下： 123.sidebar &#123; position: fixed; left: 0; 打开相同路径下的sidebar-toggle.styl文件，将.sidebar-toggle{}内的right: $b2t-position-right;改为left: $b2t-position-right;，形式如下： 123.sidebar-toggle &#123; position: fixed; left: $b2t-position-right; 返回上一个文件夹，打开back-to-top.styl文件，将.back-to-top {}内的right: $b2t-position-right;改为left: $b2t-position-right;，形式如下： 12345.back-to-top &#123; box-sizing: border-box; position: fixed; bottom: $b2t-position-bottom; left: $b2t-position-right; 修正侧边栏在左边时的小BUGBUG描述：在更改浏览器大小的时候，顶部栏和底部栏未和侧边栏同步。解决方法：在themes/next/layout/source/js/src文件夹下打开motion.js文件，在$(document).ready(function (){}顶部其中添加代码 12345678910111213window.onload=function()&#123; var bwol=document.body.offsetWidth; if(bwol &lt; 975)&#123; $('aside#sidebar').css("display","none"); $('body').css("paddingLeft","0px"); &#125;&#125;window.onresize = function()&#123; var bwos=document.body.offsetWidth; bwos &lt; 975 &amp;&amp; $('body').velocity('stop').velocity(&#123;paddingLeft: 0&#125;,0); if($('aside#sidebar').css('display') != 'none' &amp;&amp; $('aside#sidebar').css('width')!='0px') $('body').velocity('stop').velocity(&#123;paddingLeft: 350&#125;,0);&#125; 更改侧边栏控制按钮的样式在themes/next/layout/source/js/src文件夹下打开motion.js文件，在顶部其中更改代码。找到以下代码的位置： 123var sidebarToggleLine1st = new SidebarToggleLine();var sidebarToggleLine2st = new SidebarToggleLine();var sidebarToggleLine3st = new SidebarToggleLine(); 将其内部内容更改为以下内容： 123456789101112131415161718192021222324var sidebarToggleLine1st = new SidebarToggleLine(&#123; el: '.sidebar-toggle-line-first', status: &#123; arrow: &#123;width: '50%', rotateZ: '45deg', top: '2px', left: '6px'&#125;, // close: &#123;width: '100%', rotateZ: '-45deg', top: '5px', left: '0px'&#125; //叉字形 close: &#123;width: '50%', rotateZ: '-45deg', top: '2px', left: '0px'&#125; //箭头形 &#125; &#125;); var sidebarToggleLine2nd = new SidebarToggleLine(&#123; el: '.sidebar-toggle-line-middle', status: &#123; arrow: &#123;width: '90%'&#125;, // close: &#123;opacity: 0&#125; //箭头形 close: &#123;width: '90%'&#125; &#125; &#125;); var sidebarToggleLine3rd = new SidebarToggleLine(&#123; el: '.sidebar-toggle-line-last', status: &#123; arrow: &#123;width: '50%', rotateZ: '-45deg', top: '-2px', left: '6px'&#125;, // close: &#123;width: '100%', rotateZ: '45deg', top: '-5px', left: '0px'&#125; //叉字形 close: &#123;width: '50%', rotateZ: '45deg', top: '-2px', left: '0px'&#125; //箭头形 &#125; &#125;); 添加侧边栏头像的链接修改鼠标样式：在themes/next/layout/source/css/_common/componets/sidebar文件夹下打开sidebar-author.styl文件，在.site-author-image{}内添加cursor: pointer;形如： 123456789.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; cursor: pointer;&#125; 添加链接：在themes/next/layout/source/js/src文件夹下打开motion.js文件，在顶部其中添加代码： 123$('.site-author-image').click(function()&#123; window.location.href="自定义链接";&#125;); 设置鼠标划入侧边栏才显示站点信息：在theme/next/layout/_macro文件夹下打开sidebar.swig文件，找到以下代码行的位置： 1&lt;nav class="site-state motion-element"&gt; 在其上添加以下代码： 123456789101112&lt;!--my custom code begin--&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.0/jquery.min.js"&gt;&lt;/script&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/velocity/1.5.0/velocity.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt; $("#sidebar").hover(function()&#123; $("#mydivshow").velocity('stop').velocity(&#123;opacity: 1&#125;); &#125;,function()&#123; $("#mydivshow").velocity('stop').velocity(&#123;opacity: 0&#125;); &#125;);&lt;/script&gt;&lt;div id="mydivshow" class="mydivshow"&gt;&lt;!--my custom code end--&gt; 然后找到代码行： 1234&lt;/section&gt;&#123;% if display_toc and toc(page.content).length &gt; 1 %&#125;&lt;!--noindex--&gt;&lt;section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active"&gt; 在此的上方添加一个，如下所示： 12345678&lt;!--my custom code begin--&gt;&lt;/div&gt;&lt;!--my custom code end--&gt;&lt;/section&gt;&#123;% if display_toc and toc(page.content).length &gt; 1 %&#125;&lt;!--noindex--&gt; &lt;section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active"&gt; &lt;div class="post-toc"&gt; 自定义区域的初始化设置在theme/next/source/css/_custom文件夹下打开custom.styl文件，向里面增添下列代码： 1#mydivshow&#123;opacity: 0;&#125; 注：具体代码添加位置以及代码里的section.site-overview可以自己修改，和末尾的是控制显示区域，section.site-overview则是用户鼠标滑入划出时的触发事件区域。 自定义音乐播放器安装APlayer插件1npm install aplayer --save 安装完后在node_modules目录下找到APlayer.min.js文件，将其复制到theme/next/source/js/src/目录下。 生成音乐播放器在你想要加入音乐播放器的地方插入以下代码，本站把他放在了侧边栏里，具体操作如下。打开theme/next/layout/_custom/文件夹下的sidebar.swig文件，向其中添加以下代码： 12345678910111213141516171819202122&lt;div id="player1" class="aplayer"&gt;&lt;/div&gt;&lt;script src="/js/src/APlayer.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;var ap = new APlayer(&#123; element: document.getElementById('player1'), // Optional, player element narrow: false, // Optional, narrow style autoplay: true, // Optional, autoplay song(s), not supported by mobile browsers showlrc: 0, // Optional, show lrc, can be 0, 1, 2, see: ###With lrc mutex: true, // Optional, pause other players when this player playing theme: '#e6d0b2', // Optional, theme color, default: #b7daff mode: 'random', // Optional, play mode, can be `random` `single` `circulation`(loop) `order`(no loop), default: `circulation` preload: 'metadata', // Optional, the way to load music, can be 'none' 'metadata' 'auto', default: 'auto' listmaxheight: '513px', // Optional, max height of play list music: &#123; // Required, music info, see: ###With playlist title: 'Preparation', // Required, music title author: 'Hans Zimmer/Richard Harvey', // Required, music author url: 'http://7xifn9.com1.z0.glb.clouddn.com/Preparation.mp3', // Required, music url pic: 'http://7xifn9.com1.z0.glb.clouddn.com/Preparation.jpg', // Optional, music picture lrc: '[00:00.00]lrc here\n[00:01.00]aplayer' // Optional, lrc, see: ###With lrc &#125;&#125;);&lt;/script&gt; 自定义播放器样式包含颜色更改，列表歌曲信息的排版修改。在theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码： 12345678910111213141516.aplayer-list ol li:hover &#123; /*列表悬停颜色*/ background:rgba(颜色代码,透明度) none repeat scroll !important;&#125;.aplayer-list ol li &#123; /*列表底色*/ background:rgba(颜色代码,透明度);&#125;.aplayer-list-light &#123; /*列表播放歌曲颜色*/ background:rgba(颜色代码,透明度) none repeat scroll !important;&#125;#player1 &#123; /*边框样式*/ border-radius: 6px; div,ol &#123;border-radius: 6px;&#125; &#125;#player1 *&#123;color: 颜色代码;&#125; /*字体颜色*//*列表歌曲信息的排版*/.aplayer-list-index&#123;float:left;&#125;.aplayer-list-title&#123;float:left;&#125;.aplayer-list-author&#123;float:right;&#125; 自定义萌萌哒音乐播放控制边栏1npm install aplayer-controler --save 仓库链接 DOS风格的404页面效果在这里 博客自动部署刚开始是准备用AppVeyor的，托管在github上，教程在这里不过发现私有仓库没法添加。然后发现GitLab自有CI，所以尝试用GitLab部署。就是那个最近因为不小心使用 rm rf 把自家数据库删光、还在 YouTube 上直播修库、让失误的程序员看了 10 小时的 nyancat 的那个 GitLab。。。参考链接见这里 live2d插件手机端隐藏由于现在这个模型在手机上比较大，而且不是很清晰，视觉效果不是很好，所以决定在手机端隐藏。方法很简单，判断一下是否移动端即可。在theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码：1#live2dcanvas &#123; +mobile() &#123; display: none; &#125; &#125; Gitment评论插件最初用的多说，后来多说挂了，之后采用来必力，看起来挺好看的，而且next主题也集成了这个插件，但是后端都是不靠谱的啊!这两天又抽风了，完全加载不出来，官方还没挂，但是页面已经显示不了了。最后还是决定采用Gayhub的评论系统，集成Gitment插件。Gitment的作者是imsun，其项目主页在这. 首先创建Gitment的swig文件，放到主题中，为了便于管理，我决定放在next/layout/_third-party/comments文件夹下。其内容为:12345678910111213141516171819202122232425262728293031323334353637&#123;% if theme.gitment.enable %&#125; &#123;% set owner = theme.gitment.githubID %&#125; &#123;% set repo = theme.gitment.repo %&#125; &#123;% set cid = theme.gitment.ClientID %&#125; &#123;% set cs = theme.gitment.ClientSecret %&#125; &lt;link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"&gt; &lt;script src="https://imsun.github.io/gitment/dist/gitment.browser.js"&gt;&lt;/script&gt; &#123;% if not theme.gitment.lazy %&#125; &lt;script type="text/javascript"&gt; var gitment = new Gitment(&#123; id: window.location.pathname, owner: '&#123;&#123;owner&#125;&#125;', repo: '&#123;&#123;repo&#125;&#125;', oauth: &#123; client_id: '&#123;&#123;cid&#125;&#125;', client_secret: '&#123;&#123;cs&#125;&#125;', &#125;&#125;); gitment.render('gitment-container'); &lt;/script&gt; &#123;% else %&#125; &lt;script type="text/javascript"&gt; function ShowGitment()&#123; document.getElementById("gitment-display-button").style.display = "none"; document.getElementById("gitment-container").style.display = "block"; var gitment = new Gitment(&#123; id: document.location.href, owner: '&#123;&#123;owner&#125;&#125;', repo: '&#123;&#123;repo&#125;&#125;', oauth: &#123; client_id: '&#123;&#123;cid&#125;&#125;', client_secret: '&#123;&#123;cs&#125;&#125;', &#125;&#125;); gitment.render('gitment-container'); &#125; &lt;/script&gt; &#123;% endif %&#125;&#123;% endif %&#125; 在主题文件layout/_third-party/comments/index.swig中引入刚刚添加的文件:1&#123;% include 'gitment.swig' %&#125; 设置按钮样式按钮样式可以放在css的文件夹下，具体目录是之前的source/css/_common/components/third-party/文件夹。在其中添加gitment.styl样式设置文件。 12345678910111213#gitment-display-button&#123; display: inline-block; padding: 0 15px; color: #0a9caf; cursor: pointer; font-size: 14px; border: 1px solid #0a9caf; border-radius: 4px; &#125; #gitment-display-button:hover&#123; color: #fff; background: #0a9caf; &#125; 具体button的样式可以自己修改里面的参数。然后在主题下source/css/_common/components/third-party/third-party.styl文件中引入相应的CSS样式: 1@import "gitment"; 修改button显示文字:在主题的en.yml增加: 1gitmentbutton: Show comments from Gitment zh-Hans.yml增加: 1gitmentbutton: 显示 Gitment 评论 修改主题评论代码在layout/_partials/comments.swig文件中找到最后一个if分支，应该是这两句: 12&#123;% elseif theme.valine.appid and theme.valine.appkey %&#125; &lt;div id="vcomments"&gt;&lt;/div&gt; 在最后一个if分支后加一个Gitment的: 1234567&#123;% elseif theme.gitment.enable %&#125; &#123;% if theme.gitment.lazy %&#125; &lt;div onclick="ShowGitment()" id="gitment-display-button"&gt;&#123;&#123; __('gitmentbutton') &#125;&#125;&lt;/div&gt; &lt;div id="gitment-container" style="display:none"&gt;&lt;/div&gt; &#123;% else %&#125; &lt;div id="gitment-container"&gt;&lt;/div&gt; &#123;% endif %&#125; 在主题配置文件中加入开启Gitment评论:123456789# Gitment # Introduction: https://imsun.net/posts/gitment-introduction/gitment: enable: true githubID: #your github ID repo: #your comment repo ClientID: ------ ClientSecret: ------ lazy: false OK,到这里基本上是完成了。不过，有点麻烦，每个页面都要手动初始化，懒得折腾了，用了一段时间，还是换回来必力了，前几天官方给回复说已经修复了，暂时先用着罢。 Hexo中插入流程图因为hexo中的markdown语法并未支持流程图，或者说流程图语法现在并不是markdown的基本语法。但在挖坑填坑过程中，偶尔需要解释清楚一个Pipeline的时候，还是需要流程图的。偶然发现了一个插件，hexo-filter-flowchart，官方Repo在此. 安装在blog根目录下使用npm安装：1npm install --save hexo-filter-flowchart 配置站点文件(可选)可以在站点配置文件中修改默认的样式。12345vim _config.xmlflowchart: # raphael: # optional, the source url of raphael.js # flowchart: # optional, the source url of flowchart.js options: # options used for `drawSVG` 流程图用法一般是三个反引号加flow开始，最后三个反引号结束。其中语法示例如下:12345678st=&gt;start: Starte=&gt;endop=&gt;operation: My Operationcond=&gt;condition: Yes or No?st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 最后效果如下: Hexo中插入序列图安装官方Repo在这,一样的，安装一个插件:1npm install --save hexo-filter-sequence 加速修改node_modules/hexo-filter-sequence/index.js文件，将其中的cndjs.cloudflare.com替换成cdnjs.cat.net。 序列图绘制一般是三个反引号加一个sequence开始，以三个反引号结束。示例:123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 在反引号后加上sequence后效果如下: 加速修改node_modules/hexo-filter-flowchart/index.js文件，将其中的cndjs.cloudflare.com替换成cdnjs.cat.net。 st=>start: Start e=>end op=>operation: My Operation cond=>condition: Yes or No? st->op->cond cond(yes)->e cond(no)->op{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-0", options);Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks!{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("sequence-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value)); var diagram = Diagram.parse(code); diagram.drawSVG("sequence-0", options);]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>myfirst</tag>
        <tag>helloworld</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cvsba编译过程（在VS2015下的编译与测试）]]></title>
    <url>%2Fposts%2Ff3656e8e%2F</url>
    <content type="text"><![CDATA[由于之前所用的sba（光束法平差）库是10版本编译的，现在我用的是15版本，而且15的版本相对于以前变化不少，之前也参照过网上的一篇13版本的编译过程，不过一直出错，后来调试很长时间，终于生成成功，这里mark一下。 首先下载cvsba的source code：网址是https://sourceforge.net/projects/cvsba/files/1.0.0/下載的是cvsba-1.0.0，目前依然是这个版本。 然后解压放到对应目录文件夹，依个人喜好。我的是E:\cvsba-1.0.0 编译这里需要一些工具，cmake自然不用多说，还有opencv的依赖，所以事先需要下载opencv，这个不做过多赘述。我这里使用的cmake版本是3.6.1然后打开cmake，选择源文件夹和输出文件夹，尽量不要是一个，方便一点可以在E:\cvsba-1.0.0目录下再建一个bulid文件夹存放。然后config中选择v14，即2015版本。点击确定一般会出现error，因为缺少一些lapack的库。由于编译lapack需要用到fortran编译器，这里没有，所以不再编译，直接从网上下载部分库文件下载clapack.lib, BLAS.lib, libf2c.lib共三个文件，放到E:\cvsba-1.0.0目录下。然后修改错误，把LAPACK_LIB路径改成刚刚放置的位置，继续config，继续修改，把BLAS_LIB路径改成刚刚放置的位置，继续config，继续修改，把F2C_LIB路径改成刚刚放置的位置，其余的不用管，继续config，编译成功。然后generate一下。然后用vs2015打开build文件夹下的cvsba.sln点击cvsba，然后build，发现很多错误。首先是LIBCMT和MSVCRT的问题，在属性表中修改，debug模式中改为/MTd，release中改为/MT。然后重新生成。发现错误如下：原因是没有加如相应的lib, 在程序中增加lib（Link -&gt;input ）附加依赖项 clapack.lib blas.lib libf2c.lib，前面要加其所在文件夹，如E:\cvsba-1.0.0\clapack.lib，E:\cvsba-1.0.0\BLAS.lib，E:\cvsba-1.0.0\libf2c.lib（这是release下面的，debug下添加相应的带d的版本，即E:\cvsba-1.0.0\clapackd.lib，E:\cvsba-1.0.0\BLASd.lib，E:\cvsba-1.0.0\libf2cd.lib）然后重新build，还有错误：原因是15版本现在使用的是内联定义调用许多stdio.h中的函数。解决方法：也是在链接中添加相应依赖库： 1legacy_stdio_definitions.lib 重新build。出现错误，原因也是VC6的stdio.h中未定义，手动在头文件中加入： 1234567#ifdef __cplusplusextern "C"#endifFILE __iob_func[3] = &#123; __acrt_iob_func(0), __acrt_iob_func(1), __acrt_iob_func(2) &#125;; 继续build成功。但是进入debug中发现只有cvsba.dll文件，没有cvsba.lib文件，原因是cvsba..h里面的class声明少了 __declspec(dllexport) 把它加上去就可以了Build，成功接下来测试生成的lib和dll文件是否完好。直接build所有的项目，发现一个问题：解决方法：像该文件中加入#include&lt;time.h&gt;至此，全部建立完成。然后进入生成的文件夹运行，可以用windows的cmd也可以用bash，我这里直接用bash了：需要先生成两个文件用于测试：分别是camsfile和pointsfile，可以自己命名，但用于测试，就随便命名了。可以看到已经多了两个文件。然后运行test_cvsba:测试成功，表示刚刚生成的cvsba.lib和cvsba.dll是没问题的。至此，所有任务已经完成。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>三维重建</tag>
        <tag>VS2015</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一种计算Visual Hull的方法]]></title>
    <url>%2Fposts%2F7ad61e8d%2F</url>
    <content type="text"><![CDATA[计算Visual Hull的方法:A Robust and Accurate Method for Visual Hull Computation [Song Peng 2009] 计算3D bounding box仅从一组轮廓和投影矩阵计算3D bounding box 可以从每个轮廓的2Dbounding box考虑，使用4个变量 假设有N张图计算3D bounding box， 是第i张图的投影矩阵， 表示其2D边框。透视投影等式如下： 其中， 由于图像i的轮廓必须在其2D边框内，因此有以下四个不等式： 因此需要求出4N个线性不等式的x,y,z的最大值和最小值。使用遗传算法解决这个问题。每个个体是一个3D点（x,y,z）。如果希望计算x的最大值最小值，则相应的目标函数为.适应函数等于目标函数。算法如下： 产生一个满足4N个不等式的初始群体，如果知道目标的大致距离，该步骤会简单很多。根据其适应性函数选择个体个体与变异交叉，如果产生了不满足4N不等式的个体，则丢弃保存此次产生最优的个体。如果最大允许生成数未达到，则转至步骤2；else exit。建立Visual Hull的八叉树从Silhouette建立：递归细分，投影测试 从bounding box开始，将等值面上的cube分成八个孩子，迭代。 等值面函数与Visual Hull的表面相关 对于一个给定的3D点v，等值面函数定义为: Di是对轮廓i边缘的倒角距离变换CDT，负内，正外。 Projection test方法评估一个给定的voxel： 计算该voxel的8个顶点的等值面函数。如果8个顶点都在visual hull的外部。投影到所有图像，如果在一幅图像上voxel的投影都在silhouette内部，则类型为in，否则为on。 当8个顶点都在visual hull内部时。将voxel投影到所有图像上，如果所有图像上voxel的投影都在silhouette内部，则类型为in，否则为on。 当部分顶点在visual hull内部时，类型为on。事实上，可以仅通过判断voxel的投影与silhouette的相对位置来判断一个voxel的类型。这里使用的是8个顶点的等值面函数来减少计算时间。当部分顶点在visual hull内部时，不需要计算立方体的投影即可判定其类型为on。另一方面，在marching cubes算法中，也需要等值面函数的值。 文中Projection test方法的实现有两个步骤：计算一个voxel在所有图像上的投影（not esay）文中方法：将8个顶点投影到图像上，然后计算8个点的投影的凸包（convex hull）。凸包与cube的投影相同 文中证明：一个立方的六个面将3D空间划分成27个半空间:26个外部，一个内部。 从外部的26个半空间观察该立方体的轮廓，可以分为三种情况：1个、2个、3个可见面。因此，该立方的投影与8个顶点的投影的凸包相同。 计算一组给定点的凸包使用的方法是gift wrapping 算法，时间复杂度是O(nh)。N是点的数目，h是凸包上的点数。因此，这里 gift wrapping算法如下： 判断立方体的投影与silhouette的相对位置如果多边形内所有像素都在目标区域内部，则多边形在silhouette内部； 如果多边形内所有像素都在目标区域外部，则多边形在silhouette外部； 如果部分像素在目标区域内，则多边形与silhouette相交。 使用marching cubes算法计算visual hull在八叉树重建后，使用marching cubes算法提取visual hull表面。 Voxel占用一个叶节点，使用等值面函数值将其8个顶点编码成8个值。然后做一个距离变换，等值面函数值可以表示到visual hull表面的3D距离：负则在内，正则在外。然后用这些值在于给查找表上去索引，该查找表示预先定义的，定义了voxel内部的表面三角形，将形成最终visual hull mesh的一部分。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>三维重建</tag>
        <tag>visual hull</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu下opencv的配置]]></title>
    <url>%2Fposts%2Febc78778%2F</url>
    <content type="text"><![CDATA[ubuntu下opencv的配置过程：这里ubuntu版本：Ubuntu 14.04.4opencv版本 2.9.13配置过程：首先下载opencv安装包 ;过程不用多说 然后解压到根目录下解压之后记住需要安装一些工具基本命令：123sudo apt-get install build-essentialsudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-devsudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev 实际上只需要前面两行命令即可然后在opencv目录下新建一个临时目录 mkdir release然后进入临时目录1234cd releasecmake -D /usr/local ..makesudo make install 此后还有一步需要注意 如果直接编译运行文件 会提示找不到so文件所以需要添加一个路径链接：1sudo vim /etc/ld.so.conf 然后在其中加上一行：1/usr/local/lib 因为库文件都在这个lib文件夹中现在ok进入opencv目录下的sample文件夹下，继续进入：1cd ~/opencv-2.4.13/samples/c/ 然后编译;1./build_all.sh 最后跑个示例demo就知道可不可以用了：1./find_obj 如图所示： ok～]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三维建模中shape of silhouette 的简要理解]]></title>
    <url>%2Fposts%2Fdfc9d3fd%2F</url>
    <content type="text"><![CDATA[举例 一篇文章：shape silhouette fusion for image-based modeling文章作者Peng Song et al.[2010] 文章基本思想是由一些已标定图像得到其stereo和silhouette的信息（silhouette信息也是由stereo得到），然后融合两种有向点云 利用泊松表面重建算法（PSR）将有向点云转变成一个完整且精确地三角形网;模型(complete，accurate)微软的高质量fvv的论文使用其中方法[High-Quality Streamable Free-Viewpoint Video，2015] 主要用于产生silhouette的深度图方面： 产生visual hull 的八叉树 Mesh 八叉树 （方法：Marching Cubes） Project the mesh into with Z-buffered rasterization. Peng Song文中所述基本步骤: 计算一个visual hull 深度图估计 基于扩张的方法（expansion-based）返回一个3D点云（包含outliers以及冗余信息）；剔除outlier，降低scale，估计深度图的表面法向量，生成一个有向点云（来自stereo） 利用这个点云（来自stereo），雕刻其visual hull的八叉树结构，得到另一个有向点云（来自silhouette）；merge两种点云，利用泊松表面重建PSR算法将来自stereo和silhouette的有向点云转变成一个完整且精确的三角网;模型。 详细步骤:Visual hull 及计算方法计算一个3D边框（3D bounding box）从一组silhouette和投影矩阵计算3D边框，可以考虑计算每个silhouette的2D边框，并后向投影得到。物体的边框可以由一个优化算法计算[Song, P. 2009]（6个变量定义了一个bounding box，分别是x, y, z的最大;和最小;） Visual hull八叉树的建立开始于一个体素（voxel），即上一步中的3D边框。然后将voxel分为3类： 处于visual hull内； 在visual hull边界上； 在visual hull外部。 只有内部和边界的voxel才能细分，直到达到最大细分层数。 判断一个voxel类型的基本方法：使用gift wrapping算法（Jarvis, R.A.1973）计算voxel的8个顶点的投影的凸壳（convex hull），一旦在每张silhouette图上的精确投影计算完成，然后通过确定voxel的投影与所有silhouette的相对位置来判断voxel的类型。（Since the projection of the voxel is a convex polygon, our approach evaluates the relativeposition of the projection to the silhouette by a scan processor that tracks only the right and the left edges from the top to the bottom of the projection.）。 判断方法： 如果多边形内所有像素都在目标区域内部，则多边形在silhouette内部； 如果多边形内所有像素都在目标区域外部，则多边形在silhouette外部； 其他情况，多边形与silhouette相交。 于是提出了一个projection test算法判断： 其中，等;函数isosurface function表示3D点到visual hull表面的3D距离，关系：负→内，正→外。 该projection test算法利用voxel的8个顶点的isofunction的;来降低计算量:当8个顶点中的一部分在visual hull外部，则无必要将voxel投影到所有的silhouette image上去即已知其类型。 Visual hull mesh的提取方法：Marching Cubes算法。 至此，生成的visual hull 将有两个作用： 从multi-view stereo生成深度图 通过PCST（stereo点云）雕刻该visual hull 八叉树生成PCSL（silhouette点云） 在微软文中所述到marching cubes一步之后，用显卡渲染直接得到深度。 接下来介绍Song的其余部分: Shape信息（有向点云，来自stereo） 深度图估计（基于扩张方法） 首先将每张图片划分成许多小窗口，固定大小M*M 使用贪婪方法（greedy approach）计算窗中心像素的深度;如果发现一个深度;，其置信度高于一个门槛thres2，则将该深度;作为这个窗口的参考深度。 对一幅图的所有参考深度;使用median-rejection方法排除明显的outliers。由于选择的深度;都是置信度比较高的，因此很多窗口可能没有参考深度;，特别是一些没有或者很少纹理的表面。 对于无参考深度;的窗口，由其相邻3*3的窗口计算其参考深度。通常如果该窗口的相邻窗口数多于一个固定的数a（这里取得a=4），则用其相邻窗口的深度;计算其深度（中;）。该过程对所有的窗口迭代5次。 可以看到这一步之后点云明显稠密一些。 对扩展窗中的每个像素，从深度间隔（由参考深度定义）中以一个固定的长度d搜索其深度;（search the depth values for all the pixels in the window from a depth interval with fixed length d centered at the reference depth along the optical ray） 扩展窗大小M*M取决于输入图像序列的分辨率，thres2仅取决于纹理状况。D取决于重建物体和扩展窗的大小，通常在重建物体大小的1%到2%。 融合这些深度图，得到一个点云。对每个点云中的3D点，其置信度和视点方向均被存储。 具体算法过程如下： 点云的cleaning和downsamplingCleaning过程： 合并重建目标的visual hull，作为一个约束，来剔除out of visual hull的3D点。 从估计的点云中建立一个表决树，选择一个门槛thres3去排除不相关点。 对每个voxel，计算该voxel中的individual correlation scores之和，与门槛分数比较。 下采样过程： 主要是在每个voxel中提取置信度最高的一个点，达到下采样的目的。 表面法向估计 利用主成分分析PCA 选择两个参数定义一个给定点的领域，一个固定的半径R和点数目N，使用一个KD-Tree 有效计算k紧邻问题。 确定表面法向： 通过该点的视点方向 和表面法向 的点积进行选择：大于0，则表面法向的方向与相同；小于0 ，相反。 输出为一个有向点云：PCST。 使用PSR，问题：无纹理或者纹理很少的区域、非连接区域难以恢复。 Volumetric stereo and silhouette fusion 生成另一个visual hull上的有向点云，表示为PCSL。 方法：将visual hull 八叉树结构的voxel，根据其相对于PCST的点的相对位置分成三类： Type 1：该voxel包含一个或者一些PCST中的3D点 Type 2：该voxel位于PCST中的3D点和该点的参考图的光心的连线上 Type 3：所有剩余的voxel。事实上，大部分都是纹理很少的区域或闭塞表面区域。如下图所示（figrue9. a）在这些剩余的voxel中，提取visual mesh的顶点和法向来重建PCSL（figrue9. b）。 计算方法如下图所示： 联合来自stereo和silhouette的形状信息（通过融合PCSL和PCST两种点云），用PSR方法转变成一个三角网;模型。 在PCSL计算好后，加到PCST上，生成一个更完整的点云，表示为PCSTSL。再用PSR算法，将有向PCSTSL转化为一个三角网;模型。如下图所示 [附]关于文中greedy approach： 输入：一个已标定图像序列和目标的visual hull 对每个image，选择其k个相邻视点使用鲁棒的窗口匹配关联。 对中的每个像素p，从该物体的visual hull计算一个深度间隔（depth interval），即visual hull内p的后向投影（back-projected）光线 重投影该深度间隔到已选择的相邻视点，计算一个m*m的窗口（中心为p）与不同图像上的窗口（中心为p的投影）标准互相关;NCC（normalized cross-correlation）， 对于一个给定的深度间隔，其与在不同image上的投影相关，由极线约束（epipolar constraint），这样不同视点的所有相关曲线都可以关联到一个单独的坐标系统中。 一旦相关曲线被计算出来，则最优深度从中选择：在k个紧邻视点中，对于至少两个视点，其NCC;高于一些门槛。 注意：对中的每个像素p，最优候选深度从最大化NCC;的深度;中选择。若未发现有效深度，则无最优候选深度（none）。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>三维重建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript学习笔记（一）]]></title>
    <url>%2Fposts%2F5f7ed589%2F</url>
    <content type="text"><![CDATA[初学JavaScript，不过之前已经学过很多语言了。刚看JavaScript的时候，感觉很多内容其实和python挺像的，只不过这里初始化时没有要求变量类型。没错，java和JavaScript的区别就是雷锋和雷峰塔的区别。感觉对于编程来说，时间长了，太容易自己为是了。以致于一个很简单的小问题最后可以烦死你，还死活看不出来。所以开始记下笔记，记下容易出错或者一些平时不大注意的细节，以后温故时候，也挺舒服的。大小写区别： JavaScript区分大小写，而HTML并不区分大小写（尽管XHTML区分大小写）。 关于换行： 在JavaScript中，如果各语句独占一行，通常可以省略语句之间的分号（程序结尾或者右花括号之前的分号也可以省略）。但在return、break和continue和随后的表达式直接不能有换行。如果添加了换行，程序只有在极特殊的情况下才会报错，而且程序的调试非常不方便。 例如： return true； JavaScript会解析成（本意是return true；） return； true； 还有一个例外是涉及&#43;&#43;和- -的时候，如果将其用作后缀表达式，它和表达式应当在同一行。否则，行尾将填补分号。 例如： x &#43;&#43; y 解析成“x； &#43;&#43;y” 关于数字： JavaScript中的非数字&#20540;有一点特殊：它和任何&#20540;都不相等，包括自身。因此，不能通过x==NaN来判断变量x是否是NaN，只能使用x!=x来判断：当且仅当x为NaN的时候，表达式的结果才是true。 JavaScript中的数字具有极高的精度，并可以极其近&#20284;于0.1。但是，数字不能精确的表述的确带来了一些问题。 例如： var x = .3 -.2; var y = .2 - .1 ; x == y //false：两&#20540;不相等！ 由于舍入误差，0.3和0.2之间的近&#20284;差&#20540;实际上并不等于0.2和0.1之间的近&#20284;差&#20540;。这个问题并不只在JavaScript中出现，理解这一点非常重要：在任何使用二进制浮点数的编程语言中都会有这个问题。 关于文本： 空字符串长度为0，JavaScript中并没有表示单个字符的“字符型”。 一个长度为2的JavaScript字符串（两个16位&#20540;）有可能表示一个Unicode字符： var p = &quot;π&quot; ; // π由16内码表示0x03c0 var e = &quot;e&quot; ; //e由17位内码表示0x1d452 p.length// 1 e.length// 2 包装对象： 存取字符串、数字或布尔&#20540;的属性时创建的临时对象称作包装对象，它只是偶尔用来区分字符串&#20540;和字符串对象、数字和数&#20540;对象以及布尔&#20540;和布尔对象。 关于对象： 对象的比较并非&#20540;的比较：即使两个包含同样的属性及相同的&#20540;，它们也是不相等的。各个索引元素完全相等的两个数组也不相等。 例如： var o = {x:1}, p={x:1}; o === p// false var a =[], b = []; a ===b//false 对象&#20540;都是引用，对象的比较均是引用的比较：当且仅当它们引用同一个基对象时，他们才相等。 关于类型转换： 除了null和undefined之外的任何&#20540;都具有toString()方法，这个方法的挤过通常和String()方法的返回结果一致。 几个类型转换的惯用法： x &#43; &quot;&quot; // 等价于String(x) &#43;x //等价于Number(x)，也可以写成x-0 ！！x // 等价于Boolean(x) toFixed()根据小数点后的指定位数将数字转换为字符串，从不使用指数记数法。 toExponential()使用指数记数法将数字转换为指数形式的字符串，其中小数点前只有一位，小数点后的位数则有参数指定。 toPrecision()根据指定的有效数字位数将数字转换为字符串。如果有效数字的位数少于数字整数部分的位数，则转换为指数形式。 如果用Number()转换函数传入一个字符串，它会视图将其转换为一个整数或浮点数直接量，这个方法只能基于十进制数进行转换，并且不能出现非法的尾随字符。 parseInt()函数只解析整数，而parseFloat()则可以解析整数和浮点数。如果字符串前缀是“0x”或者“0X”，parseInt()将其解释为十六进制数，parseInt和parseFloat()都会跳过任意数量的前导空&#26684;，尽可能解释更多字符，并忽略后面的内容。如果第一个非空&#26684;字符是非法数字直接量，将最终返回NaN。 parseInt()可以接受第二个可选参数，这个参数指定数字转换的基数，合法的取&#20540;范围是2~36. 对象转换为原始&#20540;：所有的对象(包括数组和函数)都转换为true。 关于变量作用域： 在函数体内，局部变量的优先级高于同名的全局变量。 尽管在全局作用域编写代码时可以不写var语句，但声明局部变量时必须使用var语句。 关于函数作用域和声明提前： JavaScript中没有块级作用域，取而代之的使用了函数作用域：变量在声明它们的函数体以及这个函数体嵌套的任意函数内都是有定义的。这意味着变量在声明之前甚至已经可用。JavaScript的这个特性被非正式的称为声明提前，即JavaScript函数里声明的所有变量(但不涉及赋&#20540;)都被“提前”至函数体的顶部。 关于作为属性的变量： 使用var声明一个变量时，创建的这个属性时不可配置的，也就是说无法通过delete运算符删除。如果没有使用严&#26684;模式并给一个未声明的变量赋&#20540;的话，JavaScript会自动创建一个全局变量。以这种方式创建的变量是全局对象的正常可配置属性，并可以删除它们。 关于作用域链： 在不包含嵌套的函数体内，作用域链上有两个对象，第一个是定义函数函数和局部变量的对象，第二个是全局对象。在一个嵌套的函数体内，作用域链上至少有三个对象。 关于原始表达式: 在一个方法体内，this返回调用这个方法的对象。 关于属性访问表达式： 两种： expression . identifier expression [ expression ] .identifier的写法更加简单，但是这种方式只适用于要访问的属性名称是合法的标识符，并且需要知道访问的属性的名字。 关于方法调用： 执行函数体的时候，作为属性访问主题的对象和数组便是其调用方法内this的指向。 关于对象创建表达式： 如果一个对象创建表达式不需要传入任何参数给构造函数的话，那么这对空圆括号是可以省略掉的。 关于左&#20540;： 在JavaScript中，变量、对象属性和数组元素均是左&#20540;。ECMAScript规范允许内置函数返回一个左&#20540;，但自定义的函数则不能返回左&#20540;。 关于算术表达式： 一个很容易忽略的现象： 假设存在a=1，那么“b=(a&#43;&#43;)&#43;a”将如何计算结果呢？ 正确顺序： (1)计算b (2)计算a&#43;&#43;（假设&#20540;为c） (3)计算a (4)计算c&#43;a (5)将c&#43;a的结果赋&#20540;给b 按照“&#43;&#43;”的含义，第二步中a&#43;&#43;的结果依然是1，即c为1，随后a立即增1，因此在执行第三步时，a的&#20540;已经是2.所以b的结果为3. 求余运算符的操作数通常是整数，但也适用于浮点数，比如6.5%2.1结果是0.2 关于比较： 对于数字和字符串操作符来说，加号运算符和比较运算符的行为都有所不同，前者更偏爱字符串，如果它的其中一个操作数是字符串的话毛泽进行字符串连接操作。而比较运算符更偏爱数字，只有在两个操作数都是字符串的时候，才会进行字符串的比较。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hadoop搭建之WordCount程序]]></title>
    <url>%2Fposts%2Fbfb99b1f%2F</url>
    <content type="text"><![CDATA[Hadoop环境需要实验一中已经搭好了hadoop，部署模式是完全分布式，一个namenode，三个datanode。之前已经用JPS查看进程，已经搭好，现在再检查下是否搭建成功：在浏览器中输入ma:50070，可以查看详细情况： 图中显示3个livenodes，说明三个datanode正常启动。 输入ma:50090可以查看辅助名称节点，不过这里没有配置。 输入ma:8088可以查看集群工作状况： 至此，hadoop环境一切正常，然后进行下一步的Wordcount实例，也是hadoop里的“Hello World” 在本机上新建一个文件夹/input简单命令sudo mkdir ~/input 然后新建一个文件 sudo touch~/input/Di_Liu.txt 添加以下内容到文本中：123456789101112131415161718192021222324252627------------------------------------------------------------DiLiuNewdeeHelloWorldHelloHadoop------------------------------------------------------------Yousay you love rain,butyou use an umbrella to walk under it.Yousay you love sun,butyou seek shade when it is shining.Yousay you love wind,butwhen it comes you close your window.Sothat's why I'm scared when you say you love me------------------------------------------------------------ 1sudo gedit ~/input/Di_liu.txt 上传先在集群上新建一个input文件夹1hadoop fs –mkdir /input 现在可以再ma:50070上看到已经创建的文件夹，刷新即可。 将本地文件上传至云端1hadoop fs –put ~/.input/Di_liu.txt/input 在网页上再次刷新，即可看到上传的文档 启动Wordcount1hadoopjar /usr/soft/hadoop-2.7.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jarwordcount /input /output 查看结果运行完成后。再次刷新网页。可以发现多了两个文件夹 进入/output目录下，查看单词计数的结果： 点击part-r-00000，下载，打开即可。 至此，单词计数程序已经完成。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hadoop搭建]]></title>
    <url>%2Fposts%2F4f23e727%2F</url>
    <content type="text"><![CDATA[这里以虚拟机为例，介绍Hadoop2.7.1的搭建过程 一、更新、升级、安装ssh服务更新：1sudo apt-get update (也可以先更改下软件源，在source.list里面，因为国内属网易163软件源最快，具体命令为sudo gedit/etc/apt/source.list) 升级：1sudo apt-get upgrade 安装SSH服务1$ sudo apt-get install ssh （如果安装不成功，可以打开hosts文件，删掉里面ipv6的地址，这个不是必要的，但是本次使用的虚拟机就是因为这个问题，原因尚不明确。虽然用的是虚拟机，但是也出现过很多bug） 查看是否安装好了SSH服务可以用命令：1which ssh 如下所示： 再用ssh localhost 查看是否可以运行。如上图所示，可以登陆本机，说明SSH安装成功。 二、安装JDK我这里是在官网下载的jdk-7u79-linux-x64.tar.gz，因为我用的是64版本Ubuntu，由于是虚拟机，可以先在一台机器上安装好SSH、hadoop、JDK，然后再克隆，可以节省很多时间。 将jdk复制到所要安装的目录下，为了方便区分，我这里在usr目录下新建一个soft文件夹：1sudo mkdir/usr/soft 然后解压：1sudo tar–zxvf jdk-7u79-linux-x64.tar.gz 然后添加环境变量： 这里的environment相当于Windows下的系统全局变量。 在里面添加JAVA的路径：1JAVA_HOME=/usr/soft/jdk1.7.0_79 PATH后面加上：和其路径1PATH=....:/usr/soft/jdk1.7.0_79/bin 先按ctrl O 保存，回车，然后按ctrlX退出编辑。 三、安装Hadoop安装Hadoop的原理和java一样，先将Hadoop压缩包复制到/usr/soft目录下，这里前面要加上sudo，然后解压 解压完成后可以看到： 添加环境变量： 同安装java-JDK一样，sudo nano /etc/environment 然后添加：12345HADOOP_INSTALL=/usr/soft/hadoop-2.7.1:/usr/soft/hadoop-2.7.1/bin:/usr/soft/hadoop-2.7.1/sbin 之所以添加bin和sbin目录，是因为用的2.7.1版本Hadoop，两个目录分别存放不同的执行文件，后面可以看到。 按ctrl O 保存，回车，然后按ctrlX退出编辑。 四、创建一个名为hadoop的用户和用户组，修改机器名（每台机器均要创建相同的用户名和密码）（可选，因为用的是虚拟机，只是用来装hadoop，所以没有必要再另外建一个用户，这里就用的本机用户，用户名为ma）1、用nano打开etc下的sudoers文件1$ sudo nano /etc/sudoers 在rootALL=(ALL)ALL 下面添加如下一行:1hadoopALL=(ALL) ALL 先按ctrl O 保存，回车，然后按ctrlX退出编辑。 此时可以通过命令java -version查看java是否安装成功 通过命令hadoop version查看hadoop是否安装成功（注意这里没有-） 如果没有也不用担心，重启一下就行了。 五、克隆虚拟机： 关闭虚拟机，选中虚拟机，邮件选择“管理”-“克隆”，然后选择完整克隆 一共克隆三台，比直接装虚拟机然后安装环境快多了。 六、修改机器名和/etc/hosts文件（每台机器都修改，hosts内容一样，所以只需要修改一台，然后复制粘贴）这里先查询每台机子的IP地址，可以用ifconfig命令： 然后记下每个机子的IP 1234567ma 192.168.255.133sla1 192.168.255.135sla2 192.168.255.134sla3 192.168.255.136 然后添加到hosts文件中： 命令：1sudo nano /etc/hosts 并删除里面的ipv6地址。 添加后先按ctrl O 保存，回车，然后按ctrlX退出编辑。 然后修改机器名：123$sudo nano /etc/hostname） 对每台都要改。添加后先按ctrl O 保存，回车，然后按ctrlX退出编辑。 七、配置每台电脑无密码访问 首先在每台电脑上生成密钥：1$ssh-keygen -t rsa –P ‘’ （生成RSA公钥,因为是无密码，注意这里是两个单引号） 注意：生成密钥的位置就在/home/ma/.ssh 这个文件夹下。.ssh是个隐藏文件夹，需要 ctrlh 才能看到。 然后在每台电脑上生成密钥文档authorized_keys123$ cd ~/.ssh$ cp id_rsa.pub authorized_keys （将RSA公钥id_rsa.pub存储为授权密钥文档authorized_keys） 然后将sla1 sla2 sla3的authorized_keys中的内容复制给ma： 可以先复制，再追加，也可以直接打开图形界面AltF7，再用鼠标复制粘贴即可。123scp authorized_keys ma:/tmp（sla完成）sudo cat /tmp/authorized_keys ~/.ssh/authorized_keys 最后cat一下是否都添加了 然后再通过scp命令复制给3个sla，命令不再赘述。 然后修改所有机器的authuorized_keys权限1$ chmod 644 authorized_keys （修改密钥权限） 之后测试一下登陆slave机器123$ ssh sla1 $ ssh sla2 第一次只需要按yes，之后直接无密码访问。 八、配置hadoop1、hadoop运行环境变量设置 先进入hadoop目录 1$ sudo nanohadoop-env.sh 在里面添加java的目录1export HADOOP_HOME= /usr/soft/jdk1.7.0_79 配置hadoop云计算系统设置文档直接用nano命令，如core-site.xml则是：sudo nano core-site.xml,最后按ctrl O 保存，回车，然后按ctrlX退出编辑。 配置core-site.xml123456789101112131415?xmlversion=1.0?!--core-site.xml --configurationpropertynamefs.defaultFS/namevaluehdfs://ma//value/property/configuration 配置HDFS分布式文档系统设置文档——hdfs-site.xml12345678910111213141516171819$ sudo nanohdfs-site.xml?xmlversion=1.0?!--hdfs-site.xml --configurationpropertynamedfs.replication/namevalue3/value/property/configuration 配置Map/Reduce程序设置文档­­——mapred-site.xml（这里没有mapred-site.xml文档，但是有mapred-site.xml.template，可以先复制一份，再改为mapred-site.xml）123456789101112131415161718192021222324252627282930313233343536373839$ sudo geditmapred-site.xmlconfigurationpropertynamemapreduce.framework.name/namevalueyarn/value/property/configuration配置yarn：?xmlversion=1.0?!--yarn-site.xml --configurationpropertynameyarn.resourcemanager.hostname/namevaluema/value/propertypropertynameyarn.nodemanager.aux-services/namevaluemapreduce_shuffle/value/property/configuration 4、复制hadoop安装文件12345$ scp –r/usr/soft/hadoop-2.7.1 sla1:/usr/soft/(复制到sla1的/soft文件夹下)$ scp –r/usr/soft/hadoop-2.7.1 sla2:/usr/soft/(复制到sla2的/soft文件夹下)$ scp –r/usr/soft/hadoop-2.7.1 sla3:/usr/soft/(复制到sla3的/soft文件夹下) 九、集群搭建完成、启动hadoop云计算系统设置到这里，就已经完成hadoop云计算平台系统的搭建工作了，现在可以直接启动这个拥有4个节点（master、slave1、slave2，slave3）的hadoop实验平台。 1、式化hadoop命令：hadoop namenode–format 2、启动ssh守护程序1$ start-all.sh 3、查看hadoop云计算系统运行状况可以通过jps命令查看运行状况： 由图可知：这里有一个名称节点namenode，三个数据节点datanode，由于未分配辅助名称节点，所以secondaryNamenode还在主机ma上，三个数据节点已经分配给sla1、sla2、sla3三个主机。 说明hadoop的namenode和datanode已经启动成功。 4、关闭hadoop云计算系统关闭只需要一条指令：1$ stop-all.sh 也可以分别关闭，只需要将all改成yarn或者namenode等。 以下是一些配置文件的内容及意义，未配置则选择默认配置。 注：Hadoop搭建主要步骤123456789101112131415161718192021安装jdk安装hadoop配置环境变量[/etc/environment]JAVA_HOME=/usr/soft/jdk1.7.0_79PATH=....:/usr/soft/jdk1.7.0_79/bin[/etc/environmnet]...HADOOP_INSTALL=/usr/soft/hadoop-2.7.1:/usr/soft/hadoop-2.7.1/bin:/usr/soft/hadoop-2.7.1/sbin 【可选】：{ 新建用户 修改权限拥有 } 安装ssh 配置ssh 修改host123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293ip取决于电脑IP:ma 192.168.255.133sla1 192.168.255.135sla2 192.168.255.134sla3 192.168.255.136名称自定无密码访问配置hadoop!-- core-site.xml --configurationpropertynamefs.defaultFS/namevaluehdfs://ma//value/property/configurationA typical hdfs-site.xml!-- hdfs-site.xml --configurationpropertynamedfs.replication/namevalue3/value/propertypropertynamedfs.secondary.http.address/namevaluema:50090/value/property/configurationmapreduce:configurationpropertynamemapreduce.framework.name/namevalueyarn/value/property/configurationA typical yarn-site.xml file?xml version=1.0?!-- yarn-site.xml --configurationpropertynameyarn.resourcemanager.hostname/namevaluema/value/propertypropertynameyarn.nodemanager.aux-services/namevaluemapreduce_shuffle/value/property/configuration 式化HDFS 启动 验证jps1source /etc/profile 单词计数 启动命令：1hadoop jar /usr/soft/hadoop-2.7.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar wordcount /input /output]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[送]]></title>
    <url>%2Fposts%2Ff84e19c0%2F</url>
    <content type="text"><![CDATA[记得那年，一连月的风，瘆人的声音嘶吼着夜。如你的笑容，曾经的泪水不留痕，你认真说着你的梦。路灯下，脸色如白骨。影子渐渐变长，消失在，送你回去的拐角路口。你突然答应我，继续陪你走。送别后，同时转身，不回头。还在幻想身后，有你的回眸。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[剧闲词]]></title>
    <url>%2Fposts%2Fa0a14ae3%2F</url>
    <content type="text"><![CDATA[没有追剧的习惯，唯一算追过的就是海贼了，也是经常忘记，偶尔想起来才看看更新的几集。昨晚熬夜看完了《平凡的世界》。 记得刚开始是初中的时候，家里一本黄皮的破书，封面也皱得不行，写着路遥文集，后面还差了两页，不知道是被谁撕的。未尝精装的封面下，没见华丽的辞藻，没见跌宕的剧情， 只是写的两兄弟的生活，却反映了一个时代的变迁。那个年纪看书，一直期待着剧情的高潮，可是看完半本却丝毫没有感受到，而我却忘疲的看了下去，等回头再想到这个问题时，书已经看完了，却还一直肤浅地惦记着，那不见了的两页上面一定是大结局。而后来再接触到这本书的时候，已经是好多年了，我终于可以翻开后面看看结局如何，可是已经不再想看，生活就是这样。关于那本书，我只记得有几个农民日复一日的劳动着，平淡如水的日子一直没有多大变化，而剧情也都忘了。 前段时间刚复试完，还在北京的时候就开始看了，不过就看了几集，后来回到武汉，两三天看到了四十多集，坐等更新了。再后来来到这里，终于断断续续的抽了几天看完了。看完了也睡不着了，宁静的夜里，心也静如水。温润的气候，适宜人和蚊子生存，昨晚忘记关窗户，耳边也一直有几只嗡嗡的拍打着翅膀。好在这里的蚊子并不是什么大患，不到第二天早上，咬过的红包就消失得无影无踪了，所以也懒得管它们，静静的想着电视里的各个人物的一生，想着自己最悠闲的坐看白云翻滚的南化生活，想着过去了的最low的四个多月。 最近据说对这部剧吐槽较多，好像都是真了解路遥似的，都完全理解那本书似的，站在各种高度指指点点。路遥潦倒的一生所经历的苦难也鲜有人尝，看着别人的故事哪会有别人的感情。我也不期望能完全体会那个年代的人们的心情，但只是喜爱历经苦难折磨而对生活痴心不改的执着，只是喜爱平凡的那些人们的毫无修饰的感情。 不过不管怎样，还是挺喜欢这部剧的，喜欢初拍的感觉，里面的人物也都喜欢。不管是带领全村谋生活闹世事的孙少安，执着于追求生活的意义不顾旁人眼光的孙少平，还是近乎完美的女神化身田晓霞，还是勤勤恳恳的老实庄稼人孙玉厚，又或是每天想着投机倒把发横财，而年近四十一无所成的王满银，又或是整天无所事事，贪小便宜还喜欢空喊口号的孙玉亭，以及其他的一些未加浓墨重彩的角色，我都喜欢。 喜欢这样的角色，如同喜欢这部剧、这本书一样，让我感受最深的就是它没有强加于人的作者自己的观点，只是记录着这个平凡的世界。每一种人都是不可或缺的，每一种人生态度也是不可或缺的。不管是站在上层的伟人，还是躬耕在底层的小农，悲欢离合，生老病死，自始而终。很多时候生活都是看不到希望的，平静的如一潭死水，也是有人苟安于现实随波而行，也是有人顶着各种复杂的眼光走着自己的路。也的确有人靠自己的勤劳换来了成功，也的确有人用汗水也改不了悲惨的命运，对于不可获知的明天，都是最平凡的人，最平凡的生活。 来这过了几天悠闲的日子，感觉不太适应，怕安逸。老师布置的任务还没完成，就在这闲言碎语了。暂时就说这么多吧，泛起的涟漪终会消散，日子还得安安静静的过下去。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[垂钓]]></title>
    <url>%2Fposts%2F526f0d1a%2F</url>
    <content type="text"><![CDATA[青春一场盛宴，往昔谁知真假？恰如长线抛钩，一边嬉说玩耍。却看天色已暮，露重霜寒无霞。我在河边苦等，你们抱鱼归家。没钱没势没权，收竿又能去哪？不如赚些鱼儿，市上卖个好价。身旁几株枯草，我能看见地下。上面黄叶成尘，泥里它在挣扎。春风铺满十里，春雨润湿万家。我等鱼儿上钩，它等破土成芽。]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[销岁一记]]></title>
    <url>%2Fposts%2Ff71e8f70%2F</url>
    <content type="text"><![CDATA[复暮合，复朝发。一载尘下，几日颜华。不安于泥白藕花，归土为家。俟春荣，俟冬枯。自顾而安，自怜而孤。独做山中远志草，无知更好。]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[昨日记梦]]></title>
    <url>%2Fposts%2F5a450135%2F</url>
    <content type="text"><![CDATA[昨日有梦，吾为人师。先是高中，教语数。但很多课不讲，结果被主任谈话多次，想着生计，应付形式，却有诸老师旁听。好像是讲苏轼词文的，书上有着几篇，索性一次讲了。先是最出名的赤壁赋，我说同学们先读一遍。于是读了。我说再读一遍石钟山记，于是读了。大江东去读一遍。。。我言之再三，半节课过了，还是再读。旁边的主任好像挺不给面子的，“哪里有得你这种教学方法，你好歹也给讲讲。”我说这种文章听比学有意思，主任数目示意，勉为其难。我说请同学们看看这几篇文章有没有什么关联。答曰苏东坡之作。问曰苏东坡何许人也，答曰文豪大家。我说，先看石钟山记，这货想说什么。答曰事不目见耳闻，而臆断其有无，可乎？问曰可乎？答曰不可。他先否定郦道元以声名之，否定敲完了山南山北的石头的李渤。和他儿子晚上在小船上玩，听到了声音，于是觉得这是石钟山得名之由。然后笑郦元简，笑李渤陋。山之来名，本就千奇百怪，人家好歹也是专门去探究的，李渤还是实地考察了的，自己则是送儿子的时候顺便玩玩，大半夜的，听到了点风声，就以为得名之由来。谁在臆断？再看其余的，大江东去。历史上偌大的战役，没有去关注黎民，没有关注战事，也没有关注历史进展，却把焦点聚焦在一个女人身上，小乔初嫁，所以雄姿英发，所以摇一摇破扇子，讲几句黄段子，仗就打赢了。诸葛早有黄牛庙，曰，乱石排空，惊涛拍岸。且不说剽窃，把赤鼻矶说成赤壁，指鹿为马，还引得一大批无聊文人追捧，所谓豪放。本贻笑之事，却被无聊文人追为美谈，还生出了个文赤壁。臆断其有无，可乎。呵呵。再看赤壁赋，前面大江东去里刚刚说了乱石穿空，惊涛拍岸。这才刚刚到水涨船高的七月既望，就清风徐来水波不兴了。除了写景的，其余的不是意淫，就是废话，大家读着好听就读读，考试什么的，自己看着办。还没讲完，教室里好像很安静，主任原来早就站起来了，貌似对我很尊敬。于是我被调到了初中。初中好像又是讲了一个类似的课了，好像是教历史，教政治，没让我教语数。因为评价人物，评价政治，从不按书上来。再就上课放他们去玩，跟他们一起玩，多是荒诞。所以领导又是多次谈话，我到了小学。小学好像安分了很多，我不必去给他们解释世界是什么样的，只需要教认字。有个孩子跑过来了，问，老师，为什么蜜蜂来了，花园里就充满生气了？答曰，蜜蜂干嘛的？答曰，采蜜的。答曰，别人偷了你家的酒，你生气不？未毕，梦醒。近日许久不见梦，稍憩即醒，荒诞如此，难得一次，难得如此清晰。阁子无光，不知时久。几上剩有半杯茶，已凉。]]></content>
      <categories>
        <category>呓语</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时虽予之]]></title>
    <url>%2Fposts%2F41f33d57%2F</url>
    <content type="text"><![CDATA[时虽予之，不若取之。予之易失，取之难得。易得易失，不若难之。时虽予之，不若与之。予之不惜，与之弥珍。时珍于物，不若惜之。 注： 时间给你的东西，生来就有的东西，不如自己去争取。原来所有的东西很容易就失去了，自己争取可能很难得到，但容易得到的就容易失去，难得到的难失去，不如走一条艰难的路。 时间给你的东西，不如把时间给你，自己利用这些时间去努力争取。生来就有的东西不懂得珍惜，自己经过漫长的时间探索而来的却弥足珍贵。时间比所拥有的东西更重要，我宁愿用我当初用时间换来的成就去换回当初的时间，但已经不可能了，珍惜你所拥有的那些，不如去珍惜时间。]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[四岁杂谈]]></title>
    <url>%2Fposts%2Fac01029d%2F</url>
    <content type="text"><![CDATA[四年大学生活，不知是四年羁旅奔波，挣扎奋斗，还是四年光阴误掷，乐在消遣。我真切的感受到毕业的时候，并不是拿到学位证毕业证的时候，不是毕业设计定稿上交的时候，不是各自收拾行李相互道别的时候，而是在学校到处流连，笑声淡淡，拍着毕业照的时候，一如大一时候的欢声笑语中。因为在此之前，很多人如人间蒸发一般，几乎开学以来不曾碰面，而我也开始堕落在寝室里打着游戏，随意的度着日子，当再次看到你们的笑脸，一种久违的感觉，才意识到毕业了。我并不是想说一些沉重的话题，也不是笑谈往日的忧散愁香，只是一些可能在梧桐树下面系鞋带的事，只是可能在桥上湖边突然萌生一个想法，如此之类。来到大学，遇到的一些事，大家都遇到过。有过的一些想法，大家也都有过。或是青葱岁月，踌躇满志。或是呐喊彷徨，朝花夕拾。也许诱惑太多，连自己也成了诱惑。或者从忍受孤独，成为了享受孤独。那些看似不可思议的，却大有它的道理。那些看似极度偶然的，却总是无法避免。当然，这不是在说教，我自认不是什么好榜样，多半只会是误人子弟，不值得学习的。只是写给过去，写给回忆，我唯一拥有的，直到这一刻，也只是回忆。所有的喜怒哀乐，也来自回忆。都说人不能活在回忆中，可是不活在回忆中，又怎能算是活着？这一刻你感受到了神经传来的疼痛，而等你感受到疼痛的时候，疼痛已然成了回忆。可是你不活在回忆中，下一秒你就忘了，不知道被针刺过的感觉，下一次也许还会被刺，但依然不去回忆。直到死，你都不知道自己来过这个世界。那样没有痛苦，也没有人生。 毕业前，班里每个人都说过一段话，说的是四年来的遗憾。说到遗憾，我说过了我不是个好榜样，我也不会再告诫谁要珍惜时间，时间怎么过的，都有它的价值，你所浪费的时间并不是真的浪费了，只是铺成了你自己的人生路，红泥砖不一定好过青石板，每天日夜劳累身心的生活也不见得会比整日醉生梦死，繁华充斥着视听的纸醉金迷的生活差。遗憾，只是来自于曾经的希望。那些没有的，可能在来的途中。而拥有的，却必定会失去，或迟或早，或是你失去它，或是它失去你，或者说已经失去的，你曾经拥有过。不用想着当时该怎么做，或者遗憾当时没怎么做，因为我相信，在整个人生看来，当时的选择一定是最好的。不用想着，如果回到过去，你便能弥补过失。也许你弥补了这个过失，却会引来更大的遗憾。如蝴蝶效应一样，牵一发而动全身，或许最好的解决办法是回到人生开始的地方重新选择，或者别来到这个世界。虽然，我并不觉得我能够拥有什么东西，什么东西都是它自己拥有着自己。也许我拥有思想，也许我就是思想。 当然，也有很多怀念的。不知道是否值得怀念，但只是怀念罢了。怀念曾经去坡上读英语的早晨，空气冷却清爽，气温低但心情舒畅。怀念和同学一起去机房蹭电脑玩时候遇到别的班开始上课，不好走开而足足听完了两节c语言，而真正学会编程爱上编程却是在那次课上。怀念上机实验的一起玩cs的时候，那时候第一次接触这种游戏，老师来了就立刻回到桌面。还有坐在实验室，突然两学妹过来跟我说她们是校报的，喊我老师给我报纸的时候，虽然无奈，但却提醒了我时间的流逝。还有大学物理实验前天照例的抄报告的晚上。还有考研时候发生的一些事。还有每次集体春秋游，还有一起去南京的实习生活。还有很多。还有。这些回忆很重要，因为回忆里有你们。而你们很重要。你们很重要，因为你们见证了这些回忆。而这些回忆很重要。 但我所能拥有的，仅仅只是那些回忆。我所能失去的，也仅仅只会是那些回忆。但我不是一个多愁善感的人，现在应该不是。曾经也有过空谈梦想的年纪，也会悲秋咏春，看白云翻滚，萧瑟天凉，看桂子荷花，烟树明月，也会叹世事无常，人生多变。而现在终于不会，我想，应该不会。我不需要梦想，只要知道我做了什么，接下来该做什么，接下来怎么做。世事也并不是无常，任何偶然也是必然的。时间的脚步也一直没有变宽。所以不必庆幸也不用悲伤，继续走着自己的路，继续犯着自己的错。愿你们的人生幸福。愿你们的回忆美满。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[临风添]]></title>
    <url>%2Fposts%2F1e8f285%2F</url>
    <content type="text"><![CDATA[1.11圈圈点点阴雨暗风寒露重兮风泠泠， 雨打窗兮夜茫茫。 浸渍久兮胶漆散， 三人言兮事已常。 我自顾兮我自忘， 我自笑兮我自伤。 花开半兮尽摇曳， 道不同兮梦不往。]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[离忧]]></title>
    <url>%2Fposts%2Fb51bf43%2F</url>
    <content type="text"><![CDATA[这几年来，对学校一直没什么感觉，在这里住了三四年，原以为，等我毕业之后，学校对我而言就只是一个名字而已了。我实在不想承认这是一所大学，还是我成长的环境。 从大一到现在，被骗过几次钱了，当然，只是觉得那些利用别人同情心的人的确很可怜，比一个乞丐都穷，施舍点也没太大抱怨。但只是为什么要让我在我的大学校园里遇到他们？他们是来上课的么？我亲爱的学校，我将来是不是也会像他们一样呢？也许不该责难，忍一忍就没事了，要是这都忍不了，那岂不是，太对不起老祖宗了。学校不会为了少数人而浪费表情，但愿这也真的只是少数人。 一个人从一个熟悉得地方能带走的记忆多半不会是好的。泰塑，大舒村，还有我们学校那些食堂，那些喊起来不疼不痒的名字，那些极不情愿的留在记忆中的建筑，也许会让我在若干年后还能记起，我也曾经有过大学，或者更深刻一些。 我说我担心自己会变得像那些三教九流一样，我是真的担心。环境拥有让人不可遏制的作用力，在时间陪同下对你做功，改造一个人是很容易的。况且这里社会里的什么人都不缺，连小孩都学会了欺骗与盗窃，而且是在学校引以为傲的装了摄像头不让工人稍微多给点菜的貌似最干净却经常吃出东西来的食堂里。也许他们不是学校的人，哪一天，我成为了这样的人，学校也不会承认曾经来这里受教的我吧。当然，只是对学校，没什么太大的感觉，但映像总不会好的。不过对于老师们，还是很感激的，在这个冷淡冷漠的校园里，谁会对那些年复一年留在这里的草木舍不得呢？老师们的确很好，不需要太多赞词，的确很好。 最近可能压力相对大一些了，脾气也不好，到处不讨好。好不容易借了个位置安安静静准备学习，可是每天每夜，楼下都有一群人拿一个大音响，把音量开到最大。大概是为了运动会吧，不知道干什么，我只是佩服他们耳膜能承受的压力很大，还有天天下在面乱吼乱叫的些人，看起来喊一二一喊的真卖力，几个星期了，也是为了准备运动会吧。可是他们偏偏不去操场，非要在教学楼实验楼办公楼这儿弄，不知道是给谁看。还要弄得你没法安静学习，到晚上九十点钟才罢休，让你知道他们有多勤快。 从暑假教辅关门，到开学说好的教室被占，课程也被新来的乱排，后来的一桩桩，一件件，罄竹难书，擢发难数也许有点过，但如果就每一年的学生们，那些走出去的学长学姐和未来的学弟学妹们来说，这样来形容恰当不过了。改天那些实验楼教学楼，都会成为娱乐场所吧，大学里会充满欢乐，从此在不需要学习。那些把学校弄成这样并因此而笑的人，此刻做着什么样的美梦呢？ 我只当是逆境，来造就我，来毁灭我。]]></content>
      <categories>
        <category>呓语</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新替]]></title>
    <url>%2Fposts%2F56ef94c8%2F</url>
    <content type="text"><![CDATA[突然有种风烛残年的感觉，像是要老去了。大四了么？ 桐花万里丹山路，雏凤清于老凤声。看到那些新生，不知说些什么，三年前和他们一样来到这片天地，也没有人对我说些什么。 我这样的啰嗦的人，却经常不知道要说什么，只是不知道何时我开始如此话多，也许是以前太寡言，也许是以后缄口不言。 但以前以后，不是现在，对于现在的我，这都不重要。 这些天发生了一些事，想说点什么。其实每天都有事发生，想想如此平常，似乎又没有说的必要了。但为了证明话多，还是写了。前几天重新看了下东周列国，从豫让如何生不易节，死不易主，到赵无恤如何使晋三分，韩魏赵并起，春秋五霸成战国七雄，再到魏文王如何励精图治，李悝吴起如何变法，到卫鞅，孙膑庞涓，以及后来的苏秦张仪，如何令山川易主，乾坤倒转。当时感于豫让的视名节胜于生命，感于吴起的做大恶之人，行大’善之事，感于商鞅为万民福祉，与自己为敌，与天下为敌……颇多的感触，现在再想，却只是这些苍白无力的文字而已。 我之所以坚持写下这些，只是因为现在我还能想到这些，也只能想到这些。 还是继续说说最近的事吧，说说开学不到一个月，停水将近二十天的泰塑么？没什么好说的，只是正常的学习受到了点小阻碍，这也正常，当你不想做一件事时，所有的条件都对你有利；而当你决定去做一件事时，所有的困难都会找上门。 当然，仅仅知道这些没什么用，每天这样胡思乱想，想的再多也成不了思想家。以前不知道在哪看到的那句“我思故我在”，当时很喜欢这句话，但后来觉得存在与思考完全是两回事，只有条件反射和应激性的不会思考的低等生物很多，便弃之如草芥。我并不否认思想的重要性，但最多只是内因，不能唯心的夸大其作用。决定事物发展的还是只能是实践，思想可以指导实践，但不能代替实践。——当然，就算只是知道这些，也没什么用。 想起今天九一八，明天中秋，两个稍微有点特殊的日子，又想起了五仁月饼，也许是因为最近在网络遭吐槽的原因。对这事没什么兴趣，只是我才发现小时候那五毛一包的广月就是五仁，可能现在的人们都习惯了软柿子似的月饼，而广月在我的印象中唯一与之不同的，也许是留恋儿时的乐趣。不好吃便不买，对于网上的吐槽，不管是无聊者的恶俗，还是商家的阴谋，我也不想问，也不想参与进去，刨根究底。 看着这些空洞无义的杂七杂八，只是担心有朝一日再不能想到这些，再不能对自己说这些，完完全全陷入了生活留下的死循环中。我常常希望我是两个人，说的那个，是我；听的那个，也是我。 对外面的事，我是不怎么关心的。这个阶段，我所需要的，只是一个无人的教室，和一个操场而已。天下，与我何干。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[豫让赋]]></title>
    <url>%2Fposts%2F795d092a%2F</url>
    <content type="text"><![CDATA[肃清枯叶过雁哀，瑟泠秋风临马嘶。死士袖外三尺剑，知己杯中一生誓。年年合欢抱枝卧，夜夜幽兰含泪眠。四姓分晋护范孤，三家破智忆主缘。未肯易节权势下，哪曾鞠躬车马前。非君不怜女儿泪，非卿未解孤臣心。共乡不识漆肤烂，同枕竟觉炭声喑。刺袍伏剑恩已酬，唯余黄土伴史留。至今桥下风声唳，二臣闻此应足羞。]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>心情</tag>
        <tag>怀古</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[借月章]]></title>
    <url>%2Fposts%2F179dffb0%2F</url>
    <content type="text"><![CDATA[曾记高梧暮池旁，荷下碎月潋光。 芙蕖现清水，莲子隐翠房。 不知年年佳期会，相许定几时？ 过尽帆鸿，笑叹海誓谁曾知。 春红残败秋风起，不问愁怨别离。 街醉人正欢，灯孤黄卷寂。 听得楼头枕边风，明朝君何能？ 天生吾徒，岂教空老负此生。]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[竹节记]]></title>
    <url>%2Fposts%2Fe091e5ba%2F</url>
    <content type="text"><![CDATA[有时候想说些什么，而真正说的时候又忘记了。今天就是，可能是没休息好的原因，也是困扰了很久的一个问题，当一个人的兴趣开始变的不合时宜的时候。 今天立秋。冷在三九，热在三伏，就是人们说的秋老虎。我对这里的秋天没太大感觉，热完了，就直接开始寒冷了，四季都是如此，这里似乎找不到过渡的季节。那些刮着下着连月不开的风和雨的叫春天，雨停了，就夏天了。我快忘了，粉黛桃花，落英缤纷如雨，梨树生雪，初生回眸，个个灿烂笑颜，随风招摆，幽香满园，引得蜂蝶争慕。那些梧桐树叶开始凋零的叫秋天，落光了，就冬天了。不曾想过，枫叶满山，霜红浸透层林，风高气爽，苍苍凉凉，摇摆着一望无际的金色麦野。只是阴雨绵绵的日子还是一样寒冷，梧桐一叶落的今天还是一样炙热。说到过渡的季节，这里似乎一天都可以完成。 我开始感叹这天气，我对天气并没太多抱怨，只是最近变的浮躁了。还是今天没休息好，还是那个困扰我的却一直无法解决的问题。 有时候不管学什么东西，开始的时候，觉得学习只是一种工具，于是你努力的学习，学着学着，最后你发现，自己成为了工具。 一件事能变成兴趣的确不容易，可是当初你拿它来消遣，成为爱好后，欲罢不能，不知不觉，最后成为了它的傀儡。 变的不合时宜了，但骑虎难下，放弃比学习难。于是每晚都入眠太晚，睡眠时间不够了，精神自然不好，脾气不好，各方面都不好。今天居然到了凌晨三四点才睡，于是懒得上去了，就在寝室地铺，可惜三台风扇全升级成了电吹风，我亲眼看着天空由黑变灰变白。 今天一天效率太低，大部分时间是睡过去的。穷则变，变则通，我当然不得不改变，感谢今天“大夫”的建议。 不知觉，现在又是一天了，这里楼顶上的天空依旧是为数不多的一些星星吊在那里，周围的人都睡了，目似瞑，意遐甚。来到这个八月，似乎我也困了。 竹子上面有很多竹节，而没有竹节的竹子是长不高的。且学青竹君做个节，不致让今天再影响了明天。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[暑呓]]></title>
    <url>%2Fposts%2F41e08ba2%2F</url>
    <content type="text"><![CDATA[前几天回去了一趟，跟同学一起的。ta是回去办身份证，我是回去拿个起子。很牵强的理由，但有时候对于漫无目的的事，找到一个说服自己的理由真是难于登天。我说是食堂关门了没饭吃，但的确还有红房子；我说回去把电脑封印，但我最终还是带回来了；我说回去吃好吃的，但一回去就口腔溃疡，几乎每天都是豆腐；我说回去养病，但之前身体好得很；我说了回去拿起子，修电扇，但我还是没拿，外面随便买一个都可以了。在家有个习惯就是晚饭后散步，望不尽的绿野青禾，路两旁稻飞虱穿来穿去，火烧云一片，暑气既已全消，夕晒尚有余温，现在完全看不到一个人在田里，大家都很闲，播种的季节早过了。门口来往的人多半是去牌场消遣的，再就吆喝着八毛钱一斤的西瓜的手扶拖拉机。所说要忙，就是几家喝酒了，但与我无关，我是不操心也不愿去的。家里时间过得太快，看完了岳飞看看龙门镖局，都没缓过神来，我要走了。口腔溃疡好的快，一支西瓜霜就解决了。好了过了一天，我还是决定要回来的。家里没有学习的习惯，我还是无法心安理得的享受在家里衣来伸手，饭来张口的生活，在家比在学校压力大。现在不是收获和享受的季节，我是准备回来了。天气热的原因，下午两点才出发，到了仙桃车站，然后凭直觉步行到花源酒店。我敢说，这是我第一次在仙桃独自一个人走这条路，我对仙桃的路很不熟悉，原谅我长在那里。然后坐车到了天门火车站，在那临时买票，只剩一张了，一等座，贵四块钱，三点钟买的票，三点过七分的票，然后立马跑到了上车的位置。一等座，第一次，看我位置上有个袋子，我礼貌的问那位置有人没，旁边的乘客就看着我。我拿出了我的票，然后她就笑了。我说我该感谢她的朋友。她和她朋友一起买的票，结果她朋友身份证消磁了，没办法回去改签了，他说刚刚改签的，我就上来了，坐了他的位置。然后，地铁，公交，就在寝室了。我该说些什么呢？或许这次口腔溃疡是因为我话太多了，该扎扎实实做点事了。我来，看看能改变什么。]]></content>
      <categories>
        <category>呓语</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习日志8]]></title>
    <url>%2Fposts%2F37928299%2F</url>
    <content type="text"><![CDATA[上午实习老师完成任务的讲了下硝酸的制造工艺，下午就是放假了，没啥，就睡了半天，合着马上就要走了，大家也都开始做着离开的准备了。 上课太困了，天气开始变热，再加上沟通比较困难的方言，上课就很容易走神了。天马行空，毫不搭调。 不知不觉已经过了这么长时间了，学习也荒废了不少，人也变得慵懒了，想改变点什么，也只能想想。而对于无奈，能做的似乎只有等待。但是该有点期冀吧？ 随着年岁的增长，听说越来越多的人不会笑了，还有人做过科学统计，成年人通常每天笑10到15次，而孩子每天能笑400次，也不知是真是假，但我还是宁愿相信。都希望天天快乐，笑口常开，但实在笑不出来。且不说笑，哭只怕更少。或许是成长的代价，小时候对生活的太多幻想，像一个个彩色的气泡，再斑斓，依旧是在生活的大气中，一个个破灭，消失的无影无踪，连回忆里恐怕也很难找到它们的影子了。 最怕的还是没了希望，当然，没了希望的生活，也不会再有什么害怕的了。 暮暮又朝朝，月月复年年，在世事的艰难中逐渐变得冷漠的我们，虽身在闹市中却觉得孤寂无比，甚至落寞绝望。我很担心会变得麻木，人一旦没有了期冀，就容易变的麻木。而人一旦麻木，便忘记了生存，陷入了为生活挣扎的死循环。而通常让人从麻木中清醒的，只能是痛苦。 还是那句话，我无法说哪种生活更好，就算没有目标，就算生活中到处是挫折，人生的路上满是泥泞，你依然对明天抱有希望，就算你没有目标，没有梦想，可你却能真真实实地体会到自己还活着，而那些酸甜苦辣掺杂进回忆里之后，发酵成的名词，叫幸福。 你冷漠的对待生活，对人世的悲欢离合不再有着那些喜怒哀乐，虽然不会幸福，但也没有痛苦，你把自己关在一间小黑屋里，然后关上了仅存的一扇天窗。你来到了这个世界，就好像没来过，留下的是会动的躯壳，回忆也是一片苍白，你的心跳终于赶不上时钟的频率了，最好彻底被遗忘，你这样想着。 想到这里也下课了，落笔至此，略嫌啰嗦。 那些没有说完的，永远说不完的，终于永远不用说了。 2013年7月2日 晴，热，微风。]]></content>
      <categories>
        <category>实习日记</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>实习日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习日志7]]></title>
    <url>%2Fposts%2Fa72d9f08%2F</url>
    <content type="text"><![CDATA[今天有点不同，今天太无聊了，上午讲课，下午还是讲课。 无聊，除了这个词，感觉就是一片空白了。上课随手拿着粉笔在桌子上勾勒几笔，不知不觉，发现了一个美女，然后惺忪的睡眼立马激活，各种描绘，然后配上几句诗，可惜桌子太光滑，实在不好写，字也歪歪斜斜，煞了风景。 这无聊估计是因为生活太舒服了，我还是希望像前两天一样可以累的趴下，在麦当劳睡得像猪，或像军训时候，帽子往下一拉，站着就可以睡着了。 生于忧患，死于安乐。这里条件太优越，的确很不适应。高楼百丈里，昼夜歌舞中，可以让人们享受人生，也可以消磨人的意志。茅檐陋室清，伴与流萤眠，虽然清贫了一些，但却激励着自己，去实现人生的价值。青春，是人生的春天。春天，是播种的季节。 来这里这么些天，突然有点想回去了，像成奂生上城里的那句：此地虽好，但不是久留之所。我还有自己的事，考试完后的放松也差不多了，还是负重的生活好，过着舒服，踏实。 还剩着几天，写日记也写过来了，也许是乱扯过来的，都是没有感觉，为了坚持下来这个习惯而写的，觉着也是浪费时间，写的不咋样也没关系，小学老师讲怎么写日记的时候，我不知道有没有上过那节课，如果上了，那肯定是没听的。不过还有几天，过了就好了。突然想到了今天回去考试的同学，希望你能及时赶上考试，再大的坑，掉进去了也要爬出来。 没有路的时候，记得回头。回头的时候，不应该有遗憾。 昨天更新的海贼王还没看，嗯，回头了，这是个遗憾。 2013年7月1日晴，热，微风。]]></content>
      <categories>
        <category>实习日记</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>实习日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习日志6]]></title>
    <url>%2Fposts%2Fd02aaf9e%2F</url>
    <content type="text"><![CDATA[早上，五点，行程继续。 起这么早是有原因的，记得昨天前半夜还在玄武湖睡，后来风大到里面了，结果在里面睡觉被虫子咬的不行，后半夜还是辗转麦当劳了，他们打牌，我就趴着了，似睡非睡，也许是睡了的。只是苦了那些女生们，网吧的一夜真不该是她们过的。 最大的感觉还是累，这两天不知道走了几十公里了，与其说是旅游，不如说是体验生活的，真的是怀着这种心情。谁会享受呢？这次的苦主们，看你们一个个回来时的样子，垂头丧气，无精打采，如被霜打了一般的青菜，萎了，蔫了。 今天真是走够了，从早上五点，到十一点，基本上都是走的，玄武湖饶了一小圈，其实也不算一圈，有些位置还没去。看了玄武门，失望的发现那个只是朱元璋迁都南京时修的，不是李世民确定地位的那一战里的那个玄武门。高高的城墙颇有点气质，但也就那个城墙。但大家似乎都快走不动了，加上昨晚没睡好，早上没吃好，已经没有了拍照的心情，手机也没电了。有点穷途末路，弹尽粮绝的味道，但我们一路上还是走着，说着，笑着。 体力真的是很重要，昨天在东南大学没吃舒服，早上昂贵的隔夜粥，就吃了几颗米，难闻的气味，老板娘恶劣的态度都没能影响我们的心情。用英语发泄了几句之后又开心的边走路边聊天了，由此看来，学一门外语还是有点用处的。 今天逛的地点几乎都是在玄武湖公园里，其实风景很不错，里面的人也很好，和一位老奶奶聊了会，然后就继续赶路了，从早上五点到将近十一点，就是在走着，走着，走着。 所幸的是，在不停的研究地图和问路的情况，终于摸着摸着，摸到乘车点了，上车就睡了，下车的时候，血量已经回复了百分之三十。然后十二点多吧，吃了两大盘子饭，舒服。回去洗澡，睡觉。 下午不知道要写些什么，因为醒来时就五点半了，而且还是被吵醒的，不过没关系，现在血量回复了百分之七十，精神很好了。出来吃饭时，看到我们班那99分的身体，疲倦的身影，憔悴的神形。 两天，走过了大半个南京，怎一个累字说的清？但是我们心情好，像昨天说的没有遗憾，没有后悔。外人看来一群屌丝，一路欢声笑语不绝于耳。回来一觉，累了之后才体会到舒服。 这次还是有准备的来的，虽说压根没准备什么。但世事无常本是这个世界的常理，无法预料，生活中的困难，难道会因为你一句没准备好而放慢它的脚步，而你就等着有人来帮你么？ 其实没有那么多感慨，只是觉得，不管在什么路上，不停的走，就行了。 2013年6月30日 晴，热，有风。]]></content>
      <categories>
        <category>实习日记</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>实习日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习日志5]]></title>
    <url>%2Fposts%2F4923fe24%2F</url>
    <content type="text"><![CDATA[有时候题目与文章没一点关系，今天就是。仅仅因为发生在实习期间。 南京站，玄武湖，中山陵，明孝陵，总统府，中南大学，夫子庙，水游城，三山街，张府园，南京站。今天比实习累，现在在地铁上。 早上九十点钟出发，一天之内走过这么些地儿，是需要点毅力的。不过也基本上只是玩玩，免费的进去逛逛，收票的在外面逛一圈。不过更有毅力的事，就是现在地铁上继续日记。现在地铁里没有了白天的喧嚣嘈杂熙熙攘攘的人流声，安静，幽静，寂静。 一段时间，已经下了地铁，刚刚到了玄武湖旁。白天与晚上，玄武湖完全是两种不同的感觉，褪去了炙热，天阶夜色凉如水，想泡泡脚，可惜台子高了点。人在囧途的感觉，有种想把今天写成传奇的冲动。 我要说点什么，但是只是些零碎的片段，以我现在的状态，很难将它们连缀成一句话。 从南京站说起吧，做了一两小时到了南京站，准备买四号五号的车票，结果居然最多只能买到三号的票，我这么多天的准备。南京真有意思。 而后，去了中山陵，里面百分之九十以上是卖东西的，价格翻一倍。瞻仰了一下国父遗风。 云山苍苍，江水泱泱，先生之风，山高水长。不知道怎么就想到了这几句，忘了是谁说的。革命尚未成功，同志仍需努力，斯世同仁，无不疾首缅怀。那里还遗留着一些收门票的机器，不知他如果知道，自己百年之后，坟冢成为了商业工具，会做何感想。 后来到了明孝陵，收门票，没进，后来听出来的人说没意思，也不遗憾。今天只是多见识点东西，不是怀着旅游的心情。 之后就是总统府，门口逛了一圈，拍照，这地方算来过了。 然后到了南京外国语学院，之后又到了中南大学，解决了晚饭问题不过感觉有点坑，但也没啥，只是印象不好。 之后就是夫子庙了，琴鼓笙歌夜如昼，花街璀璨灯火流。只是，有这么一群屌丝，徒步走过了夫子庙之后又三四个站，只是为了找一家麦当劳睡一夜。可是，夫子庙里的麦当劳居然晚上关门，没办法，走了两三个小时，就在找那个24小时营业的麦当劳。 去麦当劳的决定不是一时冲动，是在受不了网吧烟味和嘈乱，在看不起附近旅馆的天价房间之下而做出的。只是一路来，居然没有看到一个麦当劳，而且也摸不清身在哪个确切的位置了。可以说是迷路了，也不能这样说，只是懒得管了，毫无目的的走着，当然，也不是毫无目的，目的是麦当劳。 但最终还是放弃了，不得不清醒，找站牌，坐地铁，因为想起了火车站的麦当劳。 现在，到了。不过没去麦当劳，就在玄武湖旁找了快地，躺下了。屌丝气，小强命。 现在没有任何抱怨，没有任何遗憾，席地被天，满怀期待，就等明天到来。 2013年6月29日 晴，热，有风。]]></content>
      <categories>
        <category>实习日记</category>
      </categories>
      <tags>
        <tag>心情</tag>
        <tag>实习日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习日志4]]></title>
    <url>%2Fposts%2F3e24ceb2%2F</url>
    <content type="text"><![CDATA[日记真的是每天都要写的么？又是无聊之中的胡思乱想。 我记得小学一二年级的日记，都是爸妈代写的。由于我们俩从幼儿园到初二，一直在一个班里，小学日记当然是一样了。我记得有次写得好，全班第一，老师念了我们俩的日记。对于几乎从来不写家庭作业的我来说，无疑是个天大的喜讯。那天早上本来不肯上学的，因为老师说先交日记再进教室。我们俩都没做，胆子小，不肯来上学，然后那天早上起床了，爸爸在旁边念，我们俩写。虽然不喜欢一样的，但关键时候，没办法。 然后老师念了：“今天，我们起床了，好冷啊，接着，下起了小雪。。。。。。（后面的不记得了）”念完一个,老师说什么开门见山，直抒胸臆，情感丰富什么的，然后班里鼓掌。然后念另外一个的，“今天，我们起床了，好冷……”然后班里一阵唏嘘，老师为我们圆场，说实际情况是这样的，他们的一天是一样的。 小学时候很少受表扬，一年级等于没读，考试也没让我们俩考，在老师眼里，从来没有奢望过我们有能力回答他上课提出的任何一个哪怕是全班都认为很简单的一个问题。那时不记事，没什么感觉。成绩单上没有好话，我是个标准的最差生，以至于一篇日记，都能让我记这么多年。现在想起来，那时的幸福，这么简单。 再说说今天的日程吧，上午无聊的讲课，当然，说这课无聊应该不只是我一个人的感觉，我说的不是其他同学，而是实习老师，完成任务的态度都看的出来。然后回来睡觉，然后我们五个人去吃饭了，点了四个菜，dy和我有点激动，吃的稍微多了点，不知道他们有没有吃好，我想以后我会文明点的。下午，闻得是硝基氯苯，邻硝，伤肝，喝过酒的不能进，感冒的不能进，一天之内也不能喝酒。所以今天打完球就直接吃饭了，喝的饮料。去的时候回来的时候都逛了下太子山公园，里面几乎都是老人和小孩，一种静谧和谐的感觉，就是“落霞与孤鹜齐飞，秋水共长天一色”的那种意境，旁边一个小女孩扶着她奶奶散步，从我们身边走过，很随意的一个场景，却莫名的有些感动，我们都在感叹那小女孩的懂事。 该懂事的年纪，是从什么时候开始呢？也许是生活的选择，过了我命由我不由天，意气风生的年纪，有的人选择了服从，他追求的是安定的生活；有的人依然不屈不挠的披荆斩棘，他想要的只是一个过程，奋斗。 懵懂不知时光转，生活面前，会如何选择呢？ 听说今天有同学来，暂且搁笔。 也是找个借口，不想写了。 2013年6月28日 多云转晴，有风。]]></content>
      <categories>
        <category>实习日记</category>
      </categories>
      <tags>
        <tag>心情</tag>
        <tag>实习日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习日志3]]></title>
    <url>%2Fposts%2Fa0405b11%2F</url>
    <content type="text"><![CDATA[如果不是兴趣，坚持本身都会是一件无聊乏味而又痛苦的事，正如今天的日记，第三天，实习，继续。 上午讲的离子膜，老师准备了课件，却不料只有黑板，看她那样子，估计之前找教室都费了不少劲。 也是随便讲讲，都是高中化学里的。然后很快完了，就和我们聊天了。当然，与其说是聊天，不如还是说教育，只是现在说的是上班之后该怎么做与不该怎么做了。无聊的时候，玩了下同学的手机，不经意看到了几张艳照——当然是玩笑，你们不会介意。 下午是实习了，昨天闻的苯，今天就是氯气了。好在苯可以致癌，氯气就权当消毒水了。只是对那个女老师有点疑惑，25岁，常州大学，在这工作了十年，不明白她是怎么做，怎么做到的。今天天气不错，由于兴奋，中午yz把裤子穿反了，下午dy把褂子穿反了，不过都及时地在发现之后改过来了。完后屁颠屁颠地都跑过去打球了，包括我，因为，实在，太无聊了。 嗯，的确，很无聊，比我的啰嗦更无聊。如孤村荒林，或者那种人迹罕至的深山老林里晌午聒噪的蝉鸣，更像枯冷的冬夜里的几声乌鸦叫，把林子把夜叫的更显安静了。这安静，叫人厌烦。 看不到大漠，却有孤烟直，几处高耸入云，或黑或白，染得天空如水墨。化工厂随处可见，安静的烟囱，可以看出没有风。 写了前一半，一起打球，一起吃饭，喝酒。再写下一半时，已经忘了要写什么了，可见想做的事还是及早做的好。我的话多，我明白很少有人能忍受，除了我。但现在，真的不知道说什么了。 我也曾幻想过闲云野鹤的那些不切实际的生活，一种精神慰藉，是对某些早已厌倦了，却不得不继续面对的事，这是一个人最累的时候。然后睡一觉，忘了，继续生活。 风吹过外面的树梢，沙沙的响，看不出昨晚下过一场雨，日子继续过着。 2013年6月27日 小雨转阴，阴转晴。]]></content>
      <categories>
        <category>实习日记</category>
      </categories>
      <tags>
        <tag>心情</tag>
        <tag>实习日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习日志2]]></title>
    <url>%2Fposts%2Fd7476b87%2F</url>
    <content type="text"><![CDATA[今天还是讲的氯碱工业和氯苯制取，不过换了个老师。从苯的干燥氯化到尾气处理，无聊的要紧。很快讲完了，然后不自觉的问了我们一句啥专业的，那惊讶的表情就出来了。 没有写日记的习惯，不知不觉就会记流水账了。 现在每天应该都是这样，上午讲课，下午进厂，晚上写写日记，吃饭，玩手机看电视睡觉。继续下一个循环。 今天没怎么下雨，偶尔有点毛毛小雨，皮厚的还感觉不到，太阳有时候从云后面出来下看看这一群，长袖长裤安全帽，不仔细就一群搬砖工人。下午进厂的时候，一直闻到一种气味，可能有苯的成分，就是难闻。说好了不准带手机，但还是让拍照了。看了那些设备，很大的东西就一个很简单的用处，还有很多浪费的。也许，中国的技术不行，这个昨天也听实习老师提起过，外国的工程师，带的工具和我们一模一样，但工艺好，技术精，就连一个焊接都能让你瞠目结舌。 再说到浪费，突然想起了以前不知道在哪看到的一个煮蛋的故事。日本人煮鸡蛋和中国人不同，他们是把器皿弄成10厘米左右的正方型。一个器皿里可以分开好几区域，这样把鸡蛋放进去的时候就能用最少的水而煮最多的鸡蛋。而中国人就直接是一锅煮。我不知道，是煮蛋还是煮水。虽然说的是要煮鸡蛋，可我们常常为了煮一个蛋，煮了一锅的水。 我还是不想下什么结论，也许人生是为了煮水，偶尔加进几个蛋，却也无关紧要。我并不希望我的人生的结果是去煮一个蛋，我全部的记忆，都是那锅水。当然，我并不知道人生的结果，也与我永远都不会知道。 这里虽然人少比较偏远，但随处可看几辆奔驰宝马凯迪拉克，都安静的生活着。我没法评价，只能说每天为了完成任务打发时间，这当然是不去上网不出去最好的选择。 还有你们的那些安全帽，自己过来拿。 2013年6月26日 阴转晴转阴转晴，偶尔夹杂点毛毛雨。]]></content>
      <categories>
        <category>实习日记</category>
      </categories>
      <tags>
        <tag>心情</tag>
        <tag>实习日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习日志1]]></title>
    <url>%2Fposts%2F4e4e3a3d%2F</url>
    <content type="text"><![CDATA[初至南京，记得来之前老师说每天一篇实习日记，也算是完成任务，也算是刚刚结束六级与期末的放松，也算是啰嗦几句。 离题万里若等闲。 昨天没有见到天气预报里的大雨，来的一路上愉悦心情，D3082，四个时辰，从汉口至黄山至合肥至南京南。虽然只坐过两次动车，但感觉火车上的人，除了卖东西的都很好，那些买站票的农民工，两鬓已被牙齿染色，却依然笑着，笑着为生活奋斗奔波。他们会毫无顾忌的与你聊天说地，或者自己一个人拿着已经过时几年，看起来都像是上世纪的国产机，放着歌，声音开到最大音量了吧。如果这是某个学生，我肯定会鄙弃加以憎恶反感的，而且往往这种歌多半是为了显示自己的潮，大多数人只能默默的厌恶，或者奔腾过几只草泥马，毫无素养，毫无美感可言。但是对于农民工，却没有，他们听的事我未曾听过的属于他们年代的歌曲，他们或许不懂流行，但那些歌曲却让我分明感到的是他们多年简单的心酸，奋斗的泪水。与他们的交谈中，我为自己的历史常识捉襟见肘而羞愧，他一直聊着解放时代，抗战时期的事，自豪的给我们讲着哪位哪位将军，哪位哪位元帅，我只能静静的听着，戴着耳机，但我早就关了歌曲。 昨晚到了南京，大家的最大反应不是天气预报不准，而是这里的妹纸少，质量低。而关于这个问题，在宿舍我也说过喜欢美女，鸭子说，容颜都会变，年纪都会来。这话我听过很多遍，但昨天第一次有不一样的感觉，说不清什么感觉，但的确不一样了。昨晚分的宿舍，空调热水大床厚被子，晚上看看电视聊聊天，可能价格有点高，但与一些现象相比，我很感激。 今天是实习的第一天，理所当然是安全教育课，氯碱工业，有机如苯的反应制氯苯等。各种有毒有害，易燃易爆。对于这个南化，我本是不曾了解的，但却听到了一个很熟悉也很钦佩的一个名字，侯德榜——第一任厂长兼总工程师。 今天刚进入梅雨季节。梅雨，霉雨。本来很愉快的以为，不管外面或是烈日当空，或是酷暑难耐，有了空调就好了。淫雨霏霏。连月不开。外面的温度开始比宿舍的温度低，听实习老师叫我们不要在这买东西，说着那些骗着外地人的丑恶嘴脸，说着这六朝遗留下来的文化，被污染的体无完肤。 2013年6月25日 中雨转大雨转中雨转小雨，晚上停。]]></content>
      <categories>
        <category>实习日记</category>
      </categories>
      <tags>
        <tag>心情</tag>
        <tag>实习日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[等]]></title>
    <url>%2Fposts%2Fdc21e617%2F</url>
    <content type="text"><![CDATA[不知道我在等什么。 展厅里的一束花，等待的是众人艳羡的目光？ 可是路边的野百合依旧怡然自得的展露他的芬芳，沐浴着微醺的令人意醉神迷的阵阵暖风，似乎从没羡慕过任何可以用美来形容的世间万物。她们得意地花枝招展，宁其一生孤芳自赏，不愿融入这个纷繁芜杂的尘嚣之中。 在写这篇文章时犹豫了很久，不知道是否有写下去的必要，直到数十天之后，再次从尘封的草稿箱中捡出当时兴起而未成的无稽且荒唐的话题。当然，如果我有时间，我愿意把以前脑中闪过的每一个想法都写下来，用那些涉世不深的文笔，虽然在以前这对我是种折磨————任何高雅的兴趣，一旦与考试联系起来，都会成为折磨人的低俗习惯，变的无味，甚至惹人厌恶鄙弃。 而且我也宁愿固执地去相信，这绝不会只是我一个人的感受。 显然并不是所有时候都适合等，我的实验报告等不了。老师第一次没有收，然后它就没了。 可是依然等着。 过了一天，它又回来了。 在此期间，一个同学因为幸灾乐祸，也弄丢了报告，可是他没有等，他重抄了一份，虽然他的那份后来也找到了，我也笑了他，但这并不是什么可喜的事，打心眼里没觉得高兴。 举这个例子我没觉得有什么必要，但是我还是举了，当时的冲动罢，也就放在那里了。 所以，不管发生什么事，悲伤或是快乐都为时尚早，最起码你无法预测如果你继续活下去会发生什么平凡的或是不可思议的事。当你在弥留之际如果还能回忆起你人生中种种曾经让你笑让你泪的那些事那些人，或许无法去评价你的人生是喜是悲，或许已经不再会有感觉了。你曾经后悔过的事你不再后悔，无法挽回的事没有遗憾，你要走了。周围的人可能不想让你离去，但他们早就做好了送你的准备，你可能会想哭，但你已经没有泪水。 我写文章从来都不知道自己的中心在哪————这跟我说话一样，大部分时间是侃侃以活跃气氛的适合闲聊的话题。连小时候的作文也是，除了中心要突出，我不记得以前的语文老师还教过我什么，除了把那作文指导书或是教案上的要求给我们念一遍，好像不记得什么新颖的做法了————当然，这在当时的他们看来或许是比较高明的，而且足以应付教学需求，足以应付什么都不懂的学生们。我一直觉得自己运气好，或许我遇到了不一样的老师，他没有应付什么都不懂的我，但我还是什么都不懂。虽然他应付与不应付看起来没差别，但我宁愿他没有应付，我希望没学好只是我自己的责任。我说这话没别的意思，只是不愿让我这文章的中心停留这一个已经老掉牙却依然流行问题上。 但是文章没有中心是我唯一没有为自己觉得遗憾的，甚至为自己没有再遵守以前作文课的时候的应试作文的这个要求而沾沾自喜，不必被那些分数束缚。我甚至连一句结论性的话都不想写，因为这本该是读者的工作。手中紧攥的风筝的线的另一头应该不是风筝，只是一只麻木的飞鸟。日复一日的被牵引着，使它不敢飞得再高。就像被一群苏格兰牧羊犬围追堵截的惊慌失措的那群绵羊们，不得越雷池半步，偶尔有个把不听话的绵羊跑了出来，身手敏捷的牧羊犬马上跳出来将他咬死。终于，为了上等的羊毛，牧羊人们培养出来了一群听话的被阉割了的绵羊。这不残忍，它们已经感觉不到残忍与悲哀，这是生活，是绝大多数只在城里生活的人不会了解的现实。我庆幸自己终于离开了作文课堂，许是上了年纪的好处（当然，这话不敢随便乱说，我这里用括号括起来）。文章如生活，人的一生每一个阶段可能应该或许有一个中心，但是人生的中心是什么？活着的时候你不去想你为什么而活着，因为这个只有活下去才知道答案。快要撒手于世的时候，你想通了吗？或许那时候你已经想不到这个问题了。 我一直固执地认为，人生不需要中心，因为需要太多中心。我不希望我被理解，因为理解了就会有人来规劝你，来说服你。我是很乐意与人争辩的，但不想将时间浪费在这个上面，看了觉得有错的也不要来规劝我，这是徒劳的，我不会领情。我从来不奢望自己能写出什么样的水平，让你笑了，我无可奈何；让你哭了，我也无可奈何。至于在深夜，你深有感触地说：这他妈不是当时的我么？然后看着，笑着，泪着。这当然是我莫大的荣幸。但人生的阅历还不够如此。 再换一个话题，我是不是很矫情？我想，矫情总比做作要好的多。每个人都应该有感性和理性的一面，这是毋庸置疑的。至于为什么男人要可以隐藏其感性的一面，我就不理解了。或许是我涉世未深，或许这是生存的法则，那我又该庆幸，庆幸年纪小的好处。我不必掩饰什么，尽管有人会对此嗤之以鼻，然后把他的感情永远的锁在自己的小天地里，不跟任何人提起，运气不好的话就带进了棺材，而留给人的是本来不是他的他。大一的时候写的那些诗，当时终于鼓起勇气写了出来，我依然是庆幸，要不我现在就很可能还是一个循规蹈矩的好学生了，还好我不是。 写了这么多好像文不对题，那就暂时回到题目上来。文章我也不喜欢写题目，一旦写了就容易限制作者的思维，同时也限制了读者的思维————他们本该有不同的感受的，这也是我看文章最大的乐趣，没有陷于千篇一律的中心论点里。也就是说，我本来不打算写题目的。但是发表不了，所以便一字以蔽之。但我终究还是要说说这个话题的。我一直觉得自己在等着什么，或有什么在等待着自己，我也宁愿相信不止一个人有这种感受。知识，爱情，和对人类苦难的同情心，是人类所具有的三种永远不会过时的美。我所觉得的悲剧，就是这三种美最终被世俗打得支离破碎的时候，或是被尘嚣湮没不复存在的时候。也许那时不会意识到这丑恶不堪，当美感失去的时候。 我和你们一样，在自己的耕地里播种，施肥，浇水。顶着炎炎烈日，解救那干涸的土地，不辞劳苦，没有怨恨。只是希望那些小生命茁壮成长，定期除虫撒药除杂草，我希望都是自己的努力，不需老天的眷顾。最后到了收获的季节，你们的稻田里颗颗穗粒饱满，善良而富有的邻人为我惋惜。而看着那些 干瘪的稻子，我发疯似的大笑，我的付出不比他们少 ，得到的自然不会少。他们的怜悯只会让自己变得可怜。 你在黑夜里等待着光明，而太阳出来的时候，你倍感欢欣，太阳走的时候，你却寂寞了。你回到了你刚开始的状态，却不习惯属于你的黑暗。如果不曾遇到光明，你不会发觉自己生了一双眼睛，当你习惯用眼睛看世界的时候，你又回到了黑暗。太阳本来不是属于你的，布泽万物，你应该感激，可你终究没有，你甚至心怀怨恨，你开始诅咒，既然最终要戴上桎梏，何必需要曾经的自由？生活中，我们是一个人出生，一个人死亡，为何中途非要两个人生活？这是我安慰人的一句不高明的话，我知道，除了古代的和尚尼姑和教士神父们，有这种想法都是不合时宜的，我也不能免俗。也许两个人更好，我只是想说，一个人，也可以生活。 我还是等待着，我无法避免说是在等死，这是每个生灵不可逃避的宿命。但我们等待的却真的不会是死亡，既已知道结果的必然性，便没有等的必要了。尽管我还无法保证，我也宁愿固执地相信，有什么在等着我。不管我的脚步朝着什么方向，终究会遇到的。 野百合等待着他的命运，放在毫无生机的展厅里，或是在她生长的野地与百花争艳斗姿。我说不上哪种生活她会喜欢，人类无法了解植物的情感，也许万物是有灵性的，但人类目前无法了解，你不知道花的感受，花开堪折直须折，莫待无花空折枝？或是宁可枝头抱香死，何曾吹落北风中？人类给她加上自己的情感，它便有了情感。这篇不知道写什么的文章也是，希望赋予它情感的不是作者，而是读者。而这也将会是我莫大的荣幸。 你在等待着什么呢？]]></content>
      <categories>
        <category>呓语</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[周郎忆]]></title>
    <url>%2Fposts%2F3e23e45%2F</url>
    <content type="text"><![CDATA[三爵之后断琴声，意气风生美名卓。昔时协策定江东，年少志酬明君佐。胸中万千兵家计，胜负不待明日晨。虎帐临军且谈笑，一炬四海定三分。阿满徒笑袁表无，不知公瑾在岸东。弹指万千樯橹尽，赤壁如昼火如龙。山高月小连天幕，水湍浪急奏凯师。奇谋险兵仁退挫，豪情一掷千金诺。杏花烟浓蹉跎尽，天下大事不敢忘。九霄琴音英姿飒，红雨国色袖添香。尊前琴女竞相思，宁误一曲换郎顾。只叹未尽天伦情，音书从此随尔无。风流天下才情调，左右婉转皆娥眉。忆君青冢门前土，埋了多少英雄泪！]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>心情</tag>
        <tag>怀古</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你]]></title>
    <url>%2Fposts%2Fd617d273%2F</url>
    <content type="text"><![CDATA[你，我似乎很熟悉。对你有一种亲切，与生俱来；对你有一种陌生，恍若隔世。我笑，你笑；我哭，你哭。我痛恨，自己总是无法超越你；我欣喜，倒霉的时候也有你陪着。再努力，还是无法超越你，却有一种快乐的心酸；再荒唐，你也一起堕落了，分明感到了狂喜的痛苦。也许我们一直在一起，所以我不该觉得孤独；也许本来在两个世界，所以我才摸不清你的情绪。再善于伪装，却逃不过你的眼睛。做的再多，你也只是过而不问。我们总是做着同样的事，是你的主意，还是我的决定？我们总是犯着同样的错误，是你的责任，还是我的过失？以前我们都惯于沉默，以后或许也只能用沉默来回忆现在的沉默了。终于，我忍不住了，我说我们一起奋斗吧！你还是静静不语。那我当你默认了啊！可是我还是不认识你啊！不算真的认识。可你一定认识我的，你也一定了解我的，你到底在哪呢？直到有一天，早上起床，我拿着杯子。在镜子里，蓦然瞥见了，那个睡眼惺忪的你。你是否也曾和我有过一样的感觉呢？你，我似乎不曾了解。]]></content>
      <categories>
        <category>呓语</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寒之岁碎言]]></title>
    <url>%2Fposts%2F1f4b713c%2F</url>
    <content type="text"><![CDATA[俺没有写东西的习惯，在以前写作文都是煎熬。但现在突然觉得，有些辉煌，你不留下来，你就会后悔遗失；有些经典，你不记下来，你就会后悔忘却。临晚照对晴空，这难得的好天气；无来鸿无去雁，却也无防碍，本不愿附庸风雅，况这大寒天气，俺自以为身体要紧，哪有这闲情逸致怀古伤今。只是不小心想到了一些人，一些事。怕说了无益，又怕不说就忘了，也许是在家闲着无聊。 罗嗦，俺性格。 突然想到了周朝。周朝，是的，我国最早有明确记年方式的朝代。自文王演易经八卦，武王伐纣，姜太公渭水垂钓，算来周朝历近三百年。印象深刻的是直到第十一代周王静暴毙，太子宫涅即位，开始了昏乱的统治。 不听忠言，不遵周礼，还将劝谏的褒大夫割舌囚之三年有余。后其子为救父亲，效仿当初苏护出狱的故事，然后褒姒登场了。只是那费仲尤浑换成了虢石父，那妲己成了如今的褒姒，那商纣成了如今的幽王。却同是荒淫无道，同是佞贼满朝，同是黄钟毁弃，瓦釜雷鸣。只是换了个时间，换了个地点，历史被重演而已。 为其一笑而狼烟起，因其一颦而信义失。及至犬戎进犯，身死骊山。 当然，带着神秘色彩的褒姒也不知所踪，关于其说法有很多，但这不是重点。而人们大多得出的结论是红颜祸水。 红颜祸水似乎在历史上屡见不鲜，而似乎也屡试不爽。从之前的苏妲己到后来的褒姒，再到西施，到玉环、飞燕，皆为尘土。在男权的社会里，也许太美就是种罪。有功都是男人的，有罪都往女人身上推。昏庸的周幽王，没有褒姒就不会灭？呵，鱼儿上钩，皆责鱼儿贪，却无人怪钓者。 自周天子划地分疆，各诸侯们的故事可谓精彩绝伦。当然，俺想说的要从周平王开始，此时周朝已逐渐衰微。居然与自己的臣国郑交换太子互为人质，可见郑国的实力之强大。郑国君寤生，是在其母其弟的反对陷害下继位的。 寤者，逆也。 在杀了谋反的弟公子段之后，又发誓与其母不到黄泉，决不相见。这当然是人之常情。说到庄公寤生，不得不说下颖考叔，古今论孝道，考叔是楷模，但关于他的故事我就不多说了，有兴趣可以百一下，因为俺的罗嗦是有限度的。话说考叔是带着一只猫头鹰去见庄公，言此鸟最该吃。为什么呢？因为此鸟幼时母喂其食，长大后却反啄其母。寤生这一听就明白了，后悔了，便派人去接他母亲回来。但其母怕其违誓，遭神灵处罚，不肯回去。这时又是考叔献计，上演了一出凿泉见母的感人场面。 敢正面与周天子作对，并在战争中取胜，这在诸侯中是第一人。最后周天子不得不承认他的地位，庄公于是便成为后世诸侯之楷模。可是，霸业未成，抱憾而终。 这又让我们想起了公子小白。俺想起小白是有原因的，待会再说。 小白原不是按理即位的，当初贝丘山离宫一场大火，前任齐王诸儿被杀。齐国陷入内乱。诸儿一直喜欢自己的妹妹文姜，可早已许配给鲁国，于是便设计杀害鲁候。方是时，齐国靡乱之风日盛。小白和他的哥哥纠分别在鲍叔牙和管仲的带领下逃亡异国。待内乱既平，随之便又是王位之争。管仲欲让公子纠即位，便一箭射中小白，管子神射当时天下皆知。只见那小白口吐鲜血，倒于车上，管子这才放心而去。后小白醒，说是怕他再射一箭，便咬破舌头佯死。而后先入为主成了齐王。随后公子纠又被鲁国国君处死。正当管仲临刑，却不料被齐所救。齐国之要活管仲，不要死公子。什么意思，想必众人皆知。小白原想报射钩之仇，却不料拜他做了相国。后来管鲍之交，鲍叔牙举贤不避亲，小白纳才不避敌成千古美谈。 而后，小白有和郑庄公一样的雄心，称霸天下。在管子辅佐下，九合诸侯，一匡天下。尊王攘夷，霸业既成。 小白帮寤生走完了他想走的路，要是寤生知道了小白的结局，还会抱憾而终么？霸业未成，奋斗一生也许更好。 出师未捷身先死，还可以换得天下英雄为之惋惜。月满则亏，水满则溢。到达了人生的顶点，后面的就是下坡路了。 这一生戎马，挥戈天下，抱称霸之心，却留称霸之憾的人生，若能完成霸业，似乎就没有一点瑕疵了。可夺城易，守城难，小白一世英豪，天下诸侯景仰，尊王有德，攘夷有力，实力就摆在那里，无与争锋。多少王室的梦想，无数先王的遗憾，他终于完成了。可是结局却是被自己信任的宦官囚于王宫，无吃无喝，死后六十几日都没人发现。这是王室里罕见的悲剧，前面倒有一例，是纣王。 说到这里，突然想笑一下，然后什么都不说了。 桓公和纣王，一以仁义治天下，一依暴虐施于民；一雄心凌云，志在天下诸侯，一目光短浅，只图朝夕安乐；一任用贤才，“举贤不避亲，纳才不避敌”成千古佳话，乃后治世之楷模；一则酒池肉林，摘星楼奢华之极，整日歌舞不减，醉生梦死，为一己之私欲，残害忠良，佞贼当朝，鸡犬升天，成汤天下，毁于一旦，徒留万世之骂名。 两个相反的人生却有般这相似的结局，也许是物极必反。想到这里，俺不知道小白是否会觉得自己比寤生好，有了梦想就去努力实现，就算为之而死也没关系。可你带着天下人的目光，完成了梦想，你达到了时代的顶点，达到了人生的顶点，自以为可以开始享受自己曾经的付出，然而管、隰之死，鲍辞官，贤臣良将都离之而去。你明知道他们是小人，却还是不愿离开他们，苦果既结，苦酒自酿矣。 你坐上了春秋霸主的第一把交椅，以实力征服天下，俺觉得要是能在管鲍离开之前寿终正寝就好了。这一来，你这一生便没有什么遗憾了，你也老了，打也打不动了，但你的功绩前无古人。二来，你在他们之前挂了，他们会帮你选好新任齐王，你就不必担心王位之争，便无后顾之忧了。 说来，俺得出一个结论，不管是什么问题，你都可以归结为时间的问题。俺觉得寤生的遗憾是时间不够了，小白的悲剧是寿命太长了。 呵呵，俺这估计是放假无聊胡乱扯的，上不得大雅之堂，不过这个结论俺倒是觉得还适用。考试没考好，是复习时间不够；任务没完成，是给的时间太少；精神不好是睡觉时间不够… 不过从另一方面说不出太阳是因为阴雨时间不够，不成功就是因为失败的时间不够，寂寞的时间不够。成功是失败之后没有放弃的配拥有，成功只为耐得住寂寞的人买单。说说俺还觉得励志了，呵呵，可是找不回当初的热情了。 说着突然发现，最近喜欢用俺自称了。主要原因，是最近经常想到悟空的那句“妖怪，吃俺老孙一棒”。每每想到，便忍俊不禁。突然觉得这字喊起来别有一番味道。比如曹操说“宁叫俺负天下人，休叫天下人负俺”，说这又想笑了，这奸雄形象却显得有些滑稽，多萌几分了。只恨那阿满不会这方言。或者又有“俺住长江头，君住长江尾，日日思君不见君，共饮长江水”，或者“俺寄愁心与明月，随风直到夜郎西”，或者“人若犯俺，俺必犯人”，不知道你们读的时候有啥感觉，俺反正就是想笑，不知不觉这字俺就顺口了…罪过—— 俺用的这水货砖头，一次只能写几百字，还不会分段。虽然不怎么方便，但俺也没啥不满，砖头能打电话发短信，关键时候还能防身，够用了。俺这文章写的不咋样，但还是首尾照应的，最起码等你们读到结尾时，你们会发现这照应了前面一句“罗嗦，俺性格”。。。 到这里，不罗嗦了。 水货手机，害得老子写了几次，拖了几天，不知道的还以为俺在找妹子聊天，老子的节操啊…… ——记于大寒时节的罗嗦…对了，俺是不觉得红颜祸水的，来的越多越好，哈哈！]]></content>
      <categories>
        <category>呓语</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[停调中秋吟]]></title>
    <url>%2Fposts%2F6d156558%2F</url>
    <content type="text"><![CDATA[晓月多寒岚雾重， 几回相思几回空？ 五处风光五处尽， 一夜乡心一夜同。 叶落雁归周复始， 残梦易醒万事空。 银光伴客与愁眠， 灯火百家随月圆。 只字难慰心中苦， 锦瑟又知几回重？ 且吟且唱怨离合， 难舍难归忆亲容。 聚首不待多时日， 浮云低徊起伏中。 几时银辉重如今， 借月把觞一醉纵！]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[悼亡词]]></title>
    <url>%2Fposts%2F66fca25e%2F</url>
    <content type="text"><![CDATA[寒暑流年易霜鬓，荏苒岁月半世灰。春来春去任劬劳，又是春时大梦归。茫茫天地再不见，泪尽眼枯唤不回。东风无力挽落晖，悲怀沾襟日渐垂。秋至兰蕙谢枯丛，今夕三月复吐芳；今夕三月魂归天，奈何此生永销亡！未等曲终已先断，泪逝徒留存者伤。人到七十古时稀，今本百岁可有余。不等儿孙来奉孝，人鬟何处话凄凉？常期命比南山石，星月轮回固恒长。谁料人生祸不单，一朝幽隔天人墙！痛怨费词已无用，唯愿安好黄泉上！ ——3.24]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[粘蝇板]]></title>
    <url>%2Fposts%2F61fb1399%2F</url>
    <content type="text"><![CDATA[一只苍蝇飞到另一只身边，开始一段时间，生活比蜜甜，而后，他们可以相濡以沫，这当然是件很温馨的事。可是时间长了，他们发现自己还是在粘在上面，失去了最初的自由，留给它们的，便是等不完的绝望。或许，等到某天，粘蝇板上的胶老化了，其中一个力量较大的挣脱了它的束缚，飞走了。临走前，他说∶我一定会回来的！剩下的一只会相信这句话么？或许，她不想在绝望中度过自己的余生。但是绝望就是绝望，她不相信，她也不敢相信，可是他明知道这里有粘蝇板，还可能回来么？他们都知道，回来那他不如不走，走了干嘛还回来。于是，头也不回，或许是怕暴露自己此刻的欣喜。他看到了另一只苍蝇，便飞过去，拿自己的不幸去引来一些同情，拿自己丰富的人生阅历去引来一些羡慕的目光，他开始满足了。那些走进过别人的世界的人似乎总是显得很有生活经验，显得很有历史，尤其是那些总在别人世界里进进出出的人，在别人的世界里刻下几道伤痕，便有了引人羡艳的谈资。他总是认为那些从没离开过粘蝇板的苍蝇总是好骗的。所以很快，他们就在一起了，他很开心，为自己满足。她们开始了一段快乐的时间，而后，他觉得好久飞了，想出去看一下。突然发现，自己脚下还是一张粘蝇纸。他开始挣扎，却越陷越深。此后，他又开始了渴望自由的生活，每天试图摆脱她周围的粘蝇纸。他会逃脱么？或许，某一天跑了，然后到了下一个苍蝇旁边，最后发现，又是一张粘蝇纸。但这已不是重点。因为粘蝇板留给他的教训是永远无法吸取的，到处都是粘蝇板。那只最初被抛弃的苍蝇或许又等到了另一只苍蝇。在他自豪的夸耀自己的过去时，她觉得很无聊，但还是假装出一副羡慕的样子，给他一点满足感，好让他留下来，因为她永远无法习惯这孤单。每只苍蝇脚下都有一个粘蝇板，她终于离开了第一只苍蝇脚下的粘蝇板，站到他这边来了。或许她运气不会总这么差，等他们发现失去自由之后，他便绝望了，不再想着挣脱这束缚，或许也是因为看清了，他们俩就这样可以一直过下去。他们长了一双翅膀，可见，自由是一件天生就很重要的事。可是，他们却总感觉一身桎梏。所以，总有一些苍蝇，为了自由，他们不停的飞，再累也得坚持，他们永远都是孤单的，因为不想被束缚，可他们有时也无法忍受这些孤独。只能自言自语，只能对影而酌。他们没有走进别的粘蝇板上，别的苍蝇也无法进入他们的世界。他们拥有了令所有苍蝇都羡慕的自由和飞行的能力，却永远只能活在自己的世界里。孤独不是他们的习惯，他们的习惯是去习惯孤独，如感冒病毒一样，总无法免疫。—这就是生活。]]></content>
      <categories>
        <category>呓语</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不属于自己的高三]]></title>
    <url>%2Fposts%2F5f159f2c%2F</url>
    <content type="text"><![CDATA[桌上的一大堆书完全可以挡住老师的视线，让睡觉在其盲区内进行。 也不知道自己拿着什么作业在做，做着做着就睡了，睡着睡着就醒了。发现周围的同学还在埋头写着，我的试卷上多了一滩口水，便檫干了继续做。多想找个时光机把我送到未来好好的睡一觉再回来。然而产生这种想法的时刻便注定了绝望。没有时间再去想这些虚妄的事了，得继续做作业。可是身体却感到特别疲惫。但周围同学的专注的眼神，让我不由自主的紧张，而眼睛却懒得睁开。本想转移下注意力，换本书，却依然看不进去。也许离目标的差距就在这里吧！我胡思乱想着，勉强着让视线回到试卷。刚只做了一题，看大家的样子是快做完了。可以抄吗？但既然有精力抄，那为什么没有精力自己做呢？想着想着，也懒得抄了。手中的笔还没掉，不过也没握着，看样子也过不了几分钟就会滑下去，可手也懒得动一下。 老师突然进来了，我强迫自己坐好，握好笔，费力的去看题目。可是老师开始收卷了！题目还是一个也看不进去, 老师的脚步还在临近。最后问同学答案，可突然发现老师就在我们旁边，收了他的卷子，看着我。不知道那是什么眼神，可那透过厚厚的镜片折射出得光线分明让人感到不安。他开始收我的卷子，我却紧紧的按着，不想交给他。然后他就更用力的拉，我也更紧地按着。最后，他把我的手挪开，看了看那张白卷，又看了看我。感觉到脸颊在发烫，但还是迷迷糊糊的，分不清这又是什么眼神了。白色的灯光下，两只大手举着一张卷子，然后，用力一撕———- 醒了。 突然想起自己在自习室的桌子上睡着了。也不知道自己睡了多长时间，周围的人也都不在了，大概是去吃饭了吧。一个梦而已，好像我高三并未经历过，但好真实。 算了，不想了，马上就要考试了，开始复习了。]]></content>
      <categories>
        <category>呓语</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[忆韩生]]></title>
    <url>%2Fposts%2Ff9f66023%2F</url>
    <content type="text"><![CDATA[风满楼，月满楼，小调难抒一丝愁，未觉泪先流。 成也何，败也何,一生戎马为君戈，钟室良弓折。]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>心情</tag>
        <tag>怀古</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OP，随心谁听]]></title>
    <url>%2Fposts%2F7bfdba78%2F</url>
    <content type="text"><![CDATA[“我是要成为海贼王的男人！“每当面临战争时，路飞总是这么说的。虽然不会游泳，却要当海贼王。自从踏上了海贼船，伙伴们也从不退缩。一个是要成为剑豪。一个是要找到all blue————一个或许都不存在的海域，成为顶级的厨师。一个是要环游世界，画出世界的航海图。还有天下第一的吹牛大王——呵呵，姑且这么称作罢，也可以叫狙击王。还有乔巴，一个动物，也算是一个人，还是一个医师，又是世界顶级的。还有罗宾，历史学家，依然是顶级的。还有，顶级的船工，顶级的音乐家，也许还会有第十个人吧。”总有一天，我会聚集一群不输给这些人的伙伴，并找到世界第一的财宝，我要当海贼王！！！ “在与给他拿顶草帽的男人离别时，他是这么说的。”我决定了要成为海贼王便要为此而战，就算死也不要紧。每当战争的时候，还是正面迎敌，不知道躲闪。还记得索隆的那句话么：“背上的伤痕是剑士的耻辱！”他张开双臂，迎接鹰眼的两刀，当时好像是在微笑。路飞就这样看着，自己的伙伴，好不容易找到的伙伴，在自己的面前一次次地倒下，安静地看着。“等同伴倒下后再去找他算账。”路飞应该是这么想的。因为那是他的梦啊！要成为天下第一的剑豪，就必须打败眼前这个男人。为了小时候和克伊娜的约定，他要帮自己和她一起实现这个梦想，让自己的声名响彻天国！即使会使普通人昏倒的伤，我也绝对不能倒下！！！即使会使普通人死掉的伤，我也不可以死…如果我是普通人，就绝对赢不了“鹰眼”，所以我不可以是普通人！！ 所谓强，指的并不是力气，也不是技巧，而是心。鷹眼的男子：為什麼你不後退，也不閃躲呢？索隆：我不知道……但是可以肯定的是……如果我後退的話，我曾重視的誓言和約定……就會全部消失，然後，再也不會回來這個地方了……鷹眼的男子：沒錯！那就是失敗。索隆：是嗎？那麼我就更不能後退了！鷹眼的男子：所以你寧願求死！？索隆：我寧願光榮戰死，也不苟且偷生！鹰眼 ，这个站在世界剑客顶点的男人，也不得不震惊：“我会一直在这个顶点等你的，罗罗洛亚 索隆,记住我的名字，鹰眼 米霍克！”索隆失败了，那次，索隆的眼泪终于打湿了睫毛，然后就肆无忌惮了。“路飞你听见了吗？对不起，我让你担心了是吧。我要是不能成为世界第一的剑客，就只能增加你的负担是吧。所以我不会再输了，在我打赢那个家伙成为世界第一的剑客前，我保证绝对不会再失败。没意见吧，海贼王！” 路飞：“没.”之后便为了另一个伙伴，索隆走了。鹰眼也走了。在与人交谈中，路飞总是不避讳地说出自己的梦想。海贼王!于是每次都让大家震惊着。索隆在一旁说道：”诶，他说的是真的。“决定了要成为海贼王便要为此而战，就算死也不要紧，不是么？团队精神？互相帮助，互相袒护么？也有人这么认为吧。我是认为那根本只是唬人！应该是每个人抱着必死决心做自己的事，“我做好自己的部分”“接下来轮到你”“做不好的话我就揍扁你”要是有这种决心才能算是团队精神吧！这就是他的伙伴！他是对伙伴这么定义的。”我根本就不会剑术! 而且我也不会航海!更不会做菜!也不会说谎! 如果没有他们的帮助，我根本活不下去!“他是和阿龙这么说的。阿龙：”很少会这样全面否定自己的….有你这样无能的船长，做你的夥伴一定很累吧？ 那为什麼你的夥伴会拼命想救你呢？ 什麼都不会的你，凭什麼当一船的船长？你到底能做什麼？“路飞：“我可以打赢你 ！！”这句话很经典。因为这就是伙伴，最好的团队。大概是受香克斯的影响吧，“就算你们把酒或食物丢在我头上…或是你们吐口水在我身上，我都会笑笑当作没事…但是…不管你们有什麼样的理由…我都不会饶了伤害我朋友的家伙!! ”然后为了路飞，丢了一只手臂。“一只手臂而已，没什么。你没事就好。”走的时候在路飞身上寄存了自己最珍贵的帽子。路飞要当海贼王，寄存的大概也是梦想和期望吧。在以后的战争中，就算丢了性命，也不能丢掉那个帽子。他最重要的宝贝，不是金银，只是那顶草帽。 但终归是太弱了——————他们到达了伟大航路，但还是进不了新世界。路飞要得到one piece，拿到这个世界的宝藏，成为海贼王。然而马林梵多上的一战，亲人的生离死别，还是让他崩溃了。“什么海贼王啊！我实在是太弱了！！”太弱了？他想到了伙伴。又是一件令人崩溃的事————那是在肥皂泡群岛。大熊的出现，伙伴们被一个个打飞，也不知道飞到何处。草帽海贼团瞬间毁灭了。危机？转机！挫折？转折！在冥王雷利的帮助下，路飞开始了新的修行。伙伴们也是，在世界各地。这是大熊安排的，世界政府也不知道。因为他们太弱了，所以只能变强了才能进入新世界，才能实现自己的梦想。为了追求光明，才沉入黑暗；为了获得自由，才戴上桎梏。not perfect ,but try.终于，修行归来，大家都变得更强了。久违了的新世界，路飞重新拾起那个梦想。“海贼王，我当定了！”一个人可以被打倒，但不可以被打败。（虽然第一次说这句话的人不是我）再次踏上了梦想的征途。one piece啊！这个海洋上的宝物，所有海贼们趋之若鹜的目标。还有香吉士的梦想————all blue会不会是一场梦呢？或许真的什么都没有。 也许等路飞历经千幸万苦之后，到达了新世界，找到了one piece。就像张卫健演的连续剧《鹿鼎记》里的一样，找到了藏宝之地，却只有两行字：不识庐山正面目，只缘身在此山中。one piece？也许就是几个字：dream。应该是前海贼王罗杰留下的。“世代继承的意志，时代的变迁，人的梦，这些都是挡不住的。 “”只要人们继续追求自由的解答，这一切都将永不停止！” 他说这是他的所有宝藏。然后因为这句话，大海贼时代开始了。为了一个根本不存在的梦想，就这样奋斗了，历经千幸万苦之后，才发现这是一个骗局。很可笑吧。这真的是骗局么？这有什么好笑的！海贼王罗杰难道说错了么？他所有的宝藏，就是梦想啊！海贼精神，便是追寻自己的梦想，在这片辽阔的大海上！骷髏代表著信念!怎麼可能是毒藥！ 等路飞发现之后，人们一定会震惊。也许会嘲笑，也许会可怜，也许会觉得悲剧。一直在为之奋斗的宝藏，什么都没有。但正真可笑、可怜、可悲的是他们。最起码巴基算一个。 不过路飞一定不会觉得失望的。还记得他在死刑耄前的笑容吗？他说：“索隆，香吉士，娜美，乌索普。抱歉，我要死了。”然后笑了。这就是海贼王啊！]]></content>
      <categories>
        <category>呓语</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>海贼</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[子夜]]></title>
    <url>%2Fposts%2F5e4725d8%2F</url>
    <content type="text"><![CDATA[冷月无风秋自憔， 万籁暗寞旧梦凋。 又是落叶离别时， 去年烟雨花多娇。天意不怜离枝苦， 人间风雨几时休？ 一朝卷入黄土中， 曾经枝头入云霄。 二十一日，夜深，万籁皆寂，月落，过半墙，银光寒。此刻，一个人最容易发现自己的心。这个安静的时刻，并不适合休息。不如盛一壶月光，留进梦里，让回忆带走。]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生命的意义]]></title>
    <url>%2Fposts%2F9e3b7d7e%2F</url>
    <content type="text"><![CDATA[人活着到底是为了什么？初中时我会说：为了更好的活着而活着。这似乎太朦胧了，有投机取巧的嫌疑，和没回答一样。高中后会说：对知识的渴望，对爱情的追求，和对人类苦难无法扼制的同情心，这三种感情支配着我的一生。可是，九个亿万富翁相继自杀的事件，让我不得不重新考虑这个问题。如果人生只是为了追求的话，那么当你拥有了一切的时候是否就是人生的终点？人生只是一个过程，只是从我们不存在的时刻开始到另一个我们将要不存在的时刻。没有生命是永恒的，也就是说，一个人生命没有结果。而在这个只重视结果的年代，一个人的生命又有什么意义呢？如果只发生一次的事便没有什么意义的话，那么我们的生命又有什么价值呢？生命没有意义？没有价值？可是不存在对时间的函数为什么会是间断的，而不是连续的？连续的话便没有生命了，也就是说生命为什么会存在？存在也是一种意义，因为它有存在的意义。可是一个生命对时间的函数的定义域的长度是有限的。对一个人来说，无穷大定义域的只能是不存在函数。而这个函数的间断是为了说明间断前后的表达式不一样么？也就是生命前后的不存在已经有所不同了。[br]（无聊的时候喜欢思考人生，而由于以后还会无聊，故此未完待续）不同的表达式表达着不同性质的生命。把生命微分，微分到一分一秒，这一分这一秒过去了就不存在了，如果没有了连续的下一分下一秒，你能做成什么？或许连后悔都来不及完成；把生命积分，积分到整个历史，这里面那些形形色色的生命都只是画过一些单值曲线，也许在同一时刻有着许多不同的曲线。但是，我在想，生命的横轴是时间轴，积分变量也是时间，那么纵轴代表着什么？积分的意义又在哪里？对于生命，人们往往关心的便是长度与宽度。宽度也可以说是高度，生命只是二维的。我不是什么什么家，但请允许我擅自定义这纵轴代表生命的高度，那么积分的意义便是这生命的意义了。那么，一条短线，在一有限区间里的积分，也就是短线下时间轴上区间内的那部分面积，便是生命的意义。〈手机限制，未完待续〉]]></content>
      <categories>
        <category>呓语</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无调自吟]]></title>
    <url>%2Fposts%2Fe3091d2%2F</url>
    <content type="text"><![CDATA[春来东风瘦，夏至烈日骄。残阳下小楼，红霞野火烧。犹记伤心无限事，挥泪难话路迢迢。不知远处路如何，空自向人道沧桑。一声弹指若隔世，十年书山梦一场。风雨消磨，韶华暗逝，却嫌岁月长。回首成非，还忆当时书生气；来日不见，世事依旧两茫茫。素不善工诗恨难已，而天涯也无际，找不到，埋愁地！]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻涯临雪]]></title>
    <url>%2Fposts%2F6ad13995%2F</url>
    <content type="text"><![CDATA[岁岁纷零雪，处处染白头。徒自凭空意乱舞，都作瞬息不识愁。江山远，天地空，素衣掩住千尺楼。踏雪寻涯若无忧，赚得此生似水流。 暮暮北天寒，迟迟晚风干。谁把流年暗偷换，俯仰陈迹再见难。布衾冷，人未还，每临清夜离魂乱。被酒忽忆故乡好，半载只向梦中看。]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[伤逝]]></title>
    <url>%2Fposts%2F38270fed%2F</url>
    <content type="text"><![CDATA[冷风瑟瑟枯木摇，落叶纷纷百草凋。日光已经不觉暖，雾锁清秋透骨寒。一年光景黯淡处，雁字早去客犹在，否极，泰不来，那堪哀？ 曾经蹉跎厌时长，回首半载已成霜。飞蓬无心随风逐浮萍却要独海航。夜深始觉布衾冷，晚风易止恨难罢，梦觉，愁未醒，伤无涯。]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[清辉孤月伴我行]]></title>
    <url>%2Fposts%2F4521ac31%2F</url>
    <content type="text"><![CDATA[似曾懒慢倦疏狂，只看闲云流水长。饱食碌碌不终日，茫然不知所为何。月已再度几盈缺？苦恨半载徒虚晃。提笔长作无病吟，逢人道忙却是茫。光阴恰如风吹走，掠过半生不留痕。低吟愁思万缕长，未曾间断费思量。持觞绝断愁中愁，临风添酒伤更伤。去日尽是苦与忧，泪湿睫毛与双袖。凉风吹得心意冷，前途黯黯无月明。岁月何能如此殇？唯留烦懑与时增。仰身只把双臂枕，清夜怅望独伤神。然却今日仍少年，风吹两鬓黑如油。还忆当日踌躇志，苦也罢，愁也罢，纵使波浪兼天涌，起帆当把长风驾。]]></content>
      <categories>
        <category>乱体诗</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>心情</tag>
      </tags>
  </entry>
</search>
